{"ast":null,"code":"import { getThirdwebBaseUrl } from \"../../../../../utils/domains.js\";\nimport { getLoginUrl } from \"../../../core/authentication/getLoginPath.js\";\nimport { DEFAULT_POP_UP_SIZE } from \"./constants.js\";\nconst closeWindow = ({\n  isWindowOpenedByFn,\n  win,\n  closeOpenedWindow\n}) => {\n  if (isWindowOpenedByFn) {\n    win?.close();\n  } else {\n    if (win && closeOpenedWindow) {\n      closeOpenedWindow(win);\n    } else if (win) {\n      win.close();\n    }\n  }\n};\nexport const loginWithOauthRedirect = options => {\n  const loginUrl = getLoginUrl({\n    ...options,\n    mode: options.mode || \"redirect\"\n  });\n  if (options.mode === \"redirect\") {\n    window.location.href = loginUrl;\n  } else {\n    window.open(loginUrl);\n  }\n};\nexport const loginWithOauth = async options => {\n  let win = options.openedWindow;\n  let isWindowOpenedByFn = false;\n  if (!win) {\n    win = window.open(getLoginUrl({\n      ...options,\n      mode: \"popup\"\n    }), `Login to ${options.authOption}`, DEFAULT_POP_UP_SIZE);\n    isWindowOpenedByFn = true;\n  }\n  if (!win) {\n    throw new Error(\"Something went wrong opening pop-up\");\n  }\n  const result = await new Promise((resolve, reject) => {\n    // detect when the user closes the login window\n    const pollTimer = window.setInterval(async () => {\n      if (win.closed) {\n        clearInterval(pollTimer);\n        window.removeEventListener(\"message\", messageListener);\n        reject(new Error(\"User closed login window\"));\n      }\n    }, 1000);\n    const messageListener = async event => {\n      if (event.origin !== getThirdwebBaseUrl(\"inAppWallet\")) {\n        return;\n      }\n      if (typeof event.data !== \"object\") {\n        reject(new Error(\"Invalid event data\"));\n        return;\n      }\n      switch (event.data.eventType) {\n        case \"oauthSuccessResult\":\n          {\n            window.removeEventListener(\"message\", messageListener);\n            clearInterval(pollTimer);\n            closeWindow({\n              isWindowOpenedByFn,\n              win,\n              closeOpenedWindow: options.closeOpenedWindow\n            });\n            if (event.data.authResult) {\n              resolve(event.data.authResult);\n            }\n            break;\n          }\n        case \"oauthFailureResult\":\n          {\n            window.removeEventListener(\"message\", messageListener);\n            clearInterval(pollTimer);\n            closeWindow({\n              isWindowOpenedByFn,\n              win,\n              closeOpenedWindow: options.closeOpenedWindow\n            });\n            reject(new Error(event.data.errorString));\n            break;\n          }\n        default:\n          {\n            // no-op, DO NOT THROW HERE\n          }\n      }\n    };\n    window.addEventListener(\"message\", messageListener);\n  });\n  return result;\n};\n//# sourceMappingURL=oauth.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}