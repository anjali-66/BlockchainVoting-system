{"ast":null,"code":"import { bls12_381 as bls } from '@noble/curves/bls12-381';\nimport * as Hex from './Hex.js';\n/**\n * Converts a BLS point to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ### Public Key to Bytes\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const publicKey = Bls.getPublicKey({ privateKey: '0x...' })\n * const publicKeyBytes = BlsPoint.toBytes(publicKey)\n * // @log: Uint8Array [172, 175, 255, ...]\n * ```\n *\n * @example\n * ### Signature to Bytes\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const signature = Bls.sign({ payload: '0x...', privateKey: '0x...' })\n * const signatureBytes = BlsPoint.toBytes(signature)\n * // @log: Uint8Array [172, 175, 255, ...]\n * ```\n *\n * @param point - The BLS point to convert.\n * @returns The bytes representation of the BLS point.\n */\nexport function toBytes(point) {\n  const group = typeof point.z === 'bigint' ? bls.G1 : bls.G2;\n  return new group.ProjectivePoint(point.x, point.y, point.z).toRawBytes();\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function toHex(point) {\n  return Hex.fromBytes(toBytes(point));\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function fromBytes(bytes) {\n  const group = bytes.length === 48 ? bls.G1 : bls.G2;\n  const point = group.ProjectivePoint.fromHex(bytes);\n  return {\n    x: point.px,\n    y: point.py,\n    z: point.pz\n  };\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function fromHex(hex, group) {\n  return fromBytes(Hex.toBytes(hex), group);\n}\n//# sourceMappingURL=BlsPoint.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}