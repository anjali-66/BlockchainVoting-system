{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Suspense, useRef, useState } from \"react\";\nimport { defineChain } from \"../../../../chains/utils.js\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { linkProfile } from \"../../../../wallets/in-app/web/lib/auth/index.js\";\nimport { iconSize } from \"../../../core/design-system/index.js\";\nimport { useAddConnectedWallet } from \"../../../core/hooks/wallets/useAddConnectedWallet.js\";\nimport AllWalletsUI from \"../../ui/ConnectWallet/Modal/AllWalletsUI.js\";\nimport { WalletSelector } from \"../../ui/ConnectWallet/WalletSelector.js\";\nimport { Spacer } from \"../../ui/components/Spacer.js\";\nimport { WalletImage } from \"../../ui/components/WalletImage.js\";\nimport { Container, ModalHeader } from \"../../ui/components/basic.js\";\nimport { getDefaultWallets } from \"../defaultWallets.js\";\nimport { ErrorState } from \"../shared/ErrorState.js\";\nimport { LoadingScreen } from \"../shared/LoadingScreen.js\";\nimport { LoadingState } from \"../shared/LoadingState.js\";\nexport function WalletAuth(props) {\n  const {\n    wallet,\n    done\n  } = props;\n  const addConnectedWallet = useAddConnectedWallet();\n  const walletToConnect = useRef(undefined);\n  const [status, setStatus] = useState(\"selecting\");\n  const [error, setError] = useState();\n  const [showAll, setShowAll] = useState(false);\n  const ecosystem = isEcosystemWallet(wallet) ? {\n    id: wallet.id,\n    partnerId: wallet.getConfig()?.partnerId\n  } : undefined;\n  const back = () => {\n    setStatus(\"selecting\");\n    walletToConnect.current = undefined;\n    props.onBack();\n  };\n  async function login(walletToLink) {\n    setStatus(\"loading\");\n    walletToConnect.current = walletToLink;\n    try {\n      if (props.isLinking) {\n        await linkProfile({\n          client: props.client,\n          strategy: \"wallet\",\n          wallet: walletToLink,\n          chain: wallet.getChain() || defineChain(1),\n          ecosystem\n        }).catch(e => {\n          setError(e.message);\n          throw e;\n        });\n      } else {\n        await wallet.connect({\n          client: props.client,\n          strategy: \"wallet\",\n          wallet: walletToLink,\n          chain: walletToLink.getChain() || defineChain(1)\n        });\n      }\n      addConnectedWallet(walletToLink);\n      done();\n    } catch {\n      setStatus(\"error\");\n    }\n  }\n  if (!walletToConnect.current) {\n    if (showAll) {\n      return _jsx(Suspense, {\n        fallback: _jsx(LoadingScreen, {}),\n        children: _jsx(AllWalletsUI, {\n          onBack: () => setShowAll(false),\n          onSelect: async newWallet => {\n            login(newWallet);\n            setShowAll(false);\n          },\n          client: props.client,\n          connectLocale: props.locale,\n          recommendedWallets: undefined,\n          specifiedWallets: [],\n          size: props.size,\n          disableSelectionDataReset: true\n        })\n      });\n    }\n    return _jsx(WalletSelector, {\n      title: props.locale.connectAWallet,\n      wallets: getDefaultWallets(),\n      selectWallet: async newWallet => {\n        login(newWallet);\n      },\n      onShowAll: () => {\n        setShowAll(true);\n      },\n      done: () => {},\n      goBack: back,\n      setModalVisibility: () => {},\n      client: props.client,\n      connectLocale: props.locale,\n      hideHeader: false,\n      recommendedWallets: undefined,\n      chain: wallet.getChain(),\n      showAllWallets: true,\n      chains: [],\n      size: props.size,\n      meta: props.meta || {},\n      walletConnect: props.walletConnect,\n      modalHeader: {\n        title: props.isLinking ? props.inAppLocale.linkWallet : props.inAppLocale.signInWithWallet,\n        onBack: back\n      },\n      walletIdsToHide: [\"inApp\"],\n      disableSelectionDataReset: true\n    });\n  }\n  return _jsxs(Container, {\n    animate: \"fadein\",\n    fullHeight: true,\n    flex: \"column\",\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: _jsx(ModalHeader, {\n        title: props.isLinking ? props.inAppLocale.linkWallet : props.inAppLocale.signInWithWallet,\n        onBack: back\n      })\n    }), _jsx(Container, {\n      px: props.size === \"wide\" ? \"xxl\" : \"lg\",\n      expand: true,\n      flex: \"column\",\n      center: \"y\",\n      children: _jsx(\"div\", {\n        children: status === \"error\" ? _jsxs(_Fragment, {\n          children: [_jsx(ErrorState, {\n            onTryAgain: () => {\n              if (!walletToConnect.current) {\n                throw new Error(\"Failed to connect to unknown wallet\");\n              }\n              login(walletToConnect.current);\n            },\n            title: error || \"Failed to Login\"\n          }), _jsx(Spacer, {\n            y: \"lg\"\n          })]\n        }) : _jsx(_Fragment, {\n          children: _jsx(LoadingState, {\n            title: \"Sign in with your wallet\",\n            subtitle: \"A pop-up prompt will appear to sign-in and verify your wallet\",\n            icon: _jsx(WalletImage, {\n              id: walletToConnect.current.id ?? \"\",\n              size: iconSize.xl,\n              client: props.client\n            })\n          })\n        })\n      })\n    })]\n  });\n}\n//# sourceMappingURL=WalletAuth.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}