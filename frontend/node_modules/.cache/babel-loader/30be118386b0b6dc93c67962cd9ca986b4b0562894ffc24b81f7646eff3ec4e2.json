{"ast":null,"code":"import * as Bytes from './Bytes.js';\nimport * as Hex from './Hex.js';\nimport * as internal from './internal/base58.js';\n/**\n * Encodes a {@link ox#Bytes.Bytes} to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58, Bytes } from 'ox'\n *\n * const value = Base58.fromBytes(Bytes.fromString('Hello World!'))\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The byte array to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromBytes(value) {\n  return internal.from(value);\n}\n/**\n * Encodes a {@link ox#Hex.Hex} to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58, Hex } from 'ox'\n *\n * const value = Base58.fromHex(Hex.fromString('Hello World!'))\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The byte array to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromHex(value) {\n  return internal.from(value);\n}\n/**\n * Encodes a string to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.fromString('Hello World!')\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The string to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromString(value) {\n  return internal.from(Bytes.fromString(value));\n}\n/**\n * Decodes a Base58-encoded string to a {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toBytes('2NEpo7TZRRrLZSi2U')\n * // @log: Uint8Array [ 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33 ]\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded byte array.\n */\nexport function toBytes(value) {\n  return Bytes.fromHex(toHex(value));\n}\n/**\n * Decodes a Base58-encoded string to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toHex('2NEpo7TZRRrLZSi2U')\n * // @log: '0x48656c6c6f20576f726c6421'\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded hex string.\n */\nexport function toHex(value) {\n  let integer = BigInt(0);\n  let pad = 0;\n  let checkPad = true;\n  for (let i = 0; i < value.length; i++) {\n    const char = value[i];\n    // check for leading 1s\n    if (checkPad && char === '1') pad++;else checkPad = false;\n    // check for invalid characters\n    if (typeof internal.alphabetToInteger[char] !== 'bigint') throw new Error('invalid base58 character: ' + char);\n    integer = integer * 58n;\n    integer = integer + internal.alphabetToInteger[char];\n  }\n  if (!pad) return `0x${integer.toString(16)}`;\n  return `0x${'0'.repeat(pad * 2)}${integer.toString(16)}`;\n}\n/**\n * Decodes a Base58-encoded string to a string.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toString('2NEpo7TZRRrLZSi2U')\n * // @log: 'Hello World!'\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded string.\n */\nexport function toString(value) {\n  return Hex.toString(toHex(value));\n}\n//# sourceMappingURL=Base58.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}