{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState } from \"react\";\nimport { getThirdwebBaseUrl } from \"../../../../../utils/domains.js\";\nimport { webLocalStorage } from \"../../../../../utils/storage/webStorage.js\";\nimport { isEcosystemWallet } from \"../../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { ClientScopedStorage } from \"../../../../../wallets/in-app/core/authentication/client-scoped-storage.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Spinner } from \"../../components/Spinner.js\";\nimport { Container, Line, ModalHeader } from \"../../components/basic.js\";\n/**\n * @internal\n */\nexport function PrivateKey(props) {\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    const loginReady = async e => {\n      if (typeof e.data === \"object\" && \"eventType\" in e.data && e.origin === baseDomain) {\n        if (e.data.eventType === \"exportPrivateKeyIframeLoaded\") {\n          const iframe = document.getElementById(`export-wallet-${props.wallet?.id}`);\n          if (!(iframe instanceof HTMLIFrameElement)) {\n            return;\n          }\n          if (!props.wallet) {\n            return;\n          }\n          const clientStorage = new ClientScopedStorage({\n            clientId: props.client.clientId,\n            storage: webLocalStorage,\n            ecosystem: isEcosystemWallet(props.wallet) ? {\n              id: props.wallet.id,\n              partnerId: props.wallet.getConfig()?.partnerId\n            } : undefined\n          });\n          if (iframe?.contentWindow) {\n            iframe.contentWindow.postMessage({\n              eventType: \"initExportPrivateKey\",\n              authToken: await clientStorage.getAuthCookie()\n            }, e.origin);\n          }\n        }\n      }\n    };\n    window.addEventListener(\"message\", loginReady);\n    return () => {\n      window.removeEventListener(\"message\", loginReady);\n    };\n  }, [props.wallet, props.client.clientId]);\n  if (!props.wallet) {\n    throw new Error(\"[PrivateKey] No wallet found\");\n  }\n  const baseDomain = getThirdwebBaseUrl(\"inAppWallet\");\n  const ecosystem = isEcosystemWallet(props.wallet) ? {\n    id: props.wallet.id,\n    partnerId: props.wallet.getConfig()?.partnerId\n  } : undefined;\n  return _jsxs(Container, {\n    style: {\n      minHeight: \"300px\"\n    },\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: _jsx(ModalHeader, {\n        title: props.connectLocale.manageWallet.exportPrivateKey,\n        onBack: props.onBack\n      })\n    }), _jsx(Line, {}), _jsxs(Container, {\n      px: \"sm\",\n      scrollY: true,\n      style: {\n        maxHeight: \"500px\"\n      },\n      children: [_jsx(Spacer, {\n        y: \"md\"\n      }), _jsxs(Container, {\n        style: {\n          position: \"relative\",\n          height: \"250px\"\n        },\n        children: [isLoading ? _jsx(Container, {\n          center: \"both\",\n          flex: \"column\",\n          style: {\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\"\n          },\n          children: _jsx(Spinner, {\n            size: \"lg\",\n            color: \"primaryButtonBg\"\n          })\n        }) : _jsx(_Fragment, {}), _jsx(Container, {\n          style: {\n            position: \"absolute\",\n            height: \"100%\",\n            width: \"100%\",\n            zIndex: 11\n          },\n          children: _jsx(\"iframe\", {\n            id: `export-wallet-${props.wallet.id}`,\n            title: \"Export In-App Wallet\",\n            style: {\n              width: \"100%\",\n              height: \"250px\",\n              visibility: isLoading ? \"hidden\" : \"unset\"\n            },\n            onLoad: () => {\n              setLoading(false);\n            },\n            allow: \"clipboard-read; clipboard-write\",\n            src: `${baseDomain}/sdk/2022-08-12/embedded-wallet/export-private-key?clientId=${props.client.clientId}&theme=${typeof props.theme === \"string\" ? props.theme : props.theme.type}${ecosystem ? `&ecosystemId=${ecosystem.id}` : \"\"}${ecosystem?.partnerId ? `&partnerId=${ecosystem.partnerId}` : \"\"}`\n          })\n        })]\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      })]\n    })]\n  });\n}\n//# sourceMappingURL=PrivateKey.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}