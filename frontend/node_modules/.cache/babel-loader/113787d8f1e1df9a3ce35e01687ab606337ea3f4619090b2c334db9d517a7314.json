{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { CheckCircledIcon, CrossCircledIcon } from \"@radix-ui/react-icons\";\nimport { useState } from \"react\";\nimport { fontSize, iconSize, spacing } from \"../../../../core/design-system/index.js\";\nimport { useWalletBalance } from \"../../../../core/hooks/others/useWalletBalance.js\";\nimport { useActiveAccount } from \"../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWalletChain } from \"../../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport { useSendToken } from \"../../../../core/hooks/wallets/useSendToken.js\";\nimport { defaultTokens } from \"../../../../core/utils/defaultTokens.js\";\nimport { Skeleton } from \"../../components/Skeleton.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Spinner } from \"../../components/Spinner.js\";\nimport { TokenIcon } from \"../../components/TokenIcon.js\";\nimport { Container, ModalHeader } from \"../../components/basic.js\";\nimport { Button } from \"../../components/buttons.js\";\nimport { Input, Label } from \"../../components/formElements.js\";\nimport { Text } from \"../../components/text.js\";\nimport { StyledDiv } from \"../../design-system/elements.js\";\nimport { TokenSelector } from \"./TokenSelector.js\";\nimport { formatTokenBalance } from \"./formatTokenBalance.js\";\nimport { NATIVE_TOKEN } from \"./nativeToken.js\";\n/**\n * @internal\n */\nexport function SendFunds(props) {\n  const [screen, setScreen] = useState(\"base\");\n  const activeChain = useActiveWalletChain();\n  const chainId = activeChain?.id;\n  const {\n    connectLocale,\n    client\n  } = props;\n  let defaultToken = NATIVE_TOKEN;\n  const supportedTokens = props.supportedTokens || defaultTokens;\n  if (\n  // if we know chainId\n  chainId &&\n  // if there is a list of tokens for this chain\n  supportedTokens[chainId] &&\n  // if the list of tokens is not the default list\n  supportedTokens[chainId] !== defaultTokens[chainId]) {\n    // use the first token in the list as default selected\n    const tokensForChain = supportedTokens[chainId];\n    const firstToken = tokensForChain?.[0];\n    if (firstToken) {\n      defaultToken = firstToken;\n    }\n  }\n  const [token, setToken] = useState(defaultToken);\n  const [receiverAddress, setReceiverAddress] = useState(\"\");\n  const [amount, setAmount] = useState(\"0\");\n  const chain = useActiveWalletChain();\n  const tokenList = (chain?.id ? supportedTokens[chain.id] : undefined) || [];\n  if (screen === \"tokenSelector\" && chain) {\n    return _jsx(TokenSelector, {\n      tokenList: tokenList,\n      onBack: () => {\n        setScreen(\"base\");\n      },\n      onTokenSelect: _token => {\n        setToken(_token);\n        setScreen(\"base\");\n      },\n      chain: chain,\n      connectLocale: connectLocale,\n      client: client\n    });\n  }\n  return _jsx(SendFundsForm, {\n    token: token,\n    onTokenSelect: () => {\n      setScreen(\"tokenSelector\");\n    },\n    receiverAddress: receiverAddress,\n    setReceiverAddress: setReceiverAddress,\n    amount: amount,\n    setAmount: setAmount,\n    onBack: props.onBack,\n    client: client,\n    connectLocale: connectLocale\n  });\n}\n/**\n * @internal Exported for tests\n */\nexport function SendFundsForm(props) {\n  const locale = props.connectLocale.sendFundsScreen;\n  const tokenAddress = props.token && \"address\" in props.token ? props.token.address : undefined;\n  const chain = useActiveWalletChain();\n  const activeAccount = useActiveAccount();\n  const activeChain = useActiveWalletChain();\n  const balanceQuery = useWalletBalance({\n    chain,\n    tokenAddress: tokenAddress,\n    address: activeAccount?.address,\n    client: props.client\n  });\n  const {\n    receiverAddress,\n    setReceiverAddress,\n    amount,\n    setAmount\n  } = props;\n  const sendTokenMutation = useSendToken(props.client);\n  function getErrorMessage(error) {\n    const message = error?.data?.message || error?.message;\n    if (!message) {\n      return locale.transactionFailed;\n    }\n    if (message.includes(\"user rejected\")) {\n      return locale.transactionRejected;\n    }\n    if (message.includes(\"insufficient funds\")) {\n      return locale.insufficientFunds;\n    }\n    return message;\n  }\n  if (!activeChain) {\n    return null; // this should never happen\n  }\n  if (sendTokenMutation.isError) {\n    return _jsxs(Container, {\n      p: \"lg\",\n      animate: \"fadein\",\n      children: [_jsx(ModalHeader, {\n        title: locale.title,\n        onBack: () => {\n          sendTokenMutation.reset();\n        }\n      }), _jsx(Spacer, {\n        y: \"xl\"\n      }), _jsxs(Container, {\n        flex: \"column\",\n        gap: \"lg\",\n        animate: \"fadein\",\n        center: \"both\",\n        style: {\n          minHeight: \"200px\"\n        },\n        color: \"danger\",\n        children: [_jsx(CrossCircledIcon, {\n          width: iconSize.xl,\n          height: iconSize.xl\n        }), _jsx(Text, {\n          center: true,\n          multiline: true,\n          color: \"danger\",\n          children: getErrorMessage(sendTokenMutation.error)\n        })]\n      })]\n    });\n  }\n  if (sendTokenMutation.isSuccess) {\n    return _jsxs(Container, {\n      p: \"lg\",\n      animate: \"fadein\",\n      children: [_jsx(ModalHeader, {\n        title: locale.title,\n        onBack: () => {\n          sendTokenMutation.reset();\n        }\n      }), _jsxs(Container, {\n        flex: \"column\",\n        gap: \"lg\",\n        animate: \"fadein\",\n        center: \"both\",\n        style: {\n          minHeight: \"250px\"\n        },\n        color: \"success\",\n        children: [_jsx(CheckCircledIcon, {\n          width: iconSize.xl,\n          height: iconSize.xl\n        }), _jsxs(Text, {\n          color: \"success\",\n          children: [\" \", locale.successMessage, \" \"]\n        })]\n      })]\n    });\n  }\n  const tokenName = (props.token && \"name\" in props.token ? props.token.name : undefined) || balanceQuery?.data?.name;\n  const tokenSymbol = (props.token && \"symbol\" in props.token ? props.token.symbol : undefined) || balanceQuery?.data?.symbol;\n  return _jsxs(Container, {\n    p: \"lg\",\n    animate: \"fadein\",\n    children: [_jsx(ModalHeader, {\n      title: locale.title,\n      onBack: props.onBack\n    }), _jsx(Spacer, {\n      y: \"xl\"\n    }), _jsxs(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n      },\n      children: [_jsx(Label, {\n        htmlFor: \"token\",\n        color: \"secondaryText\",\n        children: locale.token\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      }), _jsxs(Button, {\n        id: \"token\",\n        variant: \"outline\",\n        fullWidth: true,\n        style: {\n          justifyContent: \"flex-start\",\n          gap: spacing.sm,\n          padding: spacing.sm\n        },\n        onClick: props.onTokenSelect,\n        children: [_jsx(TokenIcon, {\n          token: props.token,\n          chain: activeChain,\n          size: \"lg\",\n          client: props.client\n        }), _jsxs(Container, {\n          flex: \"column\",\n          gap: \"xs\",\n          children: [tokenName ? _jsx(Text, {\n            size: \"sm\",\n            color: \"primaryText\",\n            children: tokenName\n          }) : _jsx(Skeleton, {\n            height: fontSize.xs,\n            width: \"150px\"\n          }), balanceQuery.data ? _jsx(Text, {\n            size: \"xs\",\n            children: formatTokenBalance(balanceQuery.data)\n          }) : _jsx(Skeleton, {\n            height: fontSize.xs,\n            width: \"100px\"\n          })]\n        })]\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      }), _jsx(Label, {\n        htmlFor: \"receiver\",\n        color: \"secondaryText\",\n        children: locale.sendTo\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      }), _jsx(Input, {\n        required: true,\n        id: \"receiver\",\n        placeholder: \"0x... or ENS name\",\n        variant: \"outline\",\n        value: receiverAddress,\n        onChange: e => {\n          setReceiverAddress(e.target.value);\n        }\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      }), _jsx(Label, {\n        htmlFor: \"amount\",\n        color: \"secondaryText\",\n        children: locale.amount\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      }), _jsxs(Container, {\n        relative: true,\n        children: [_jsx(Input, {\n          required: true,\n          type: \"number\",\n          id: \"amount\",\n          variant: \"outline\",\n          value: amount,\n          onChange: e => {\n            setAmount(e.target.value);\n          }\n        }), _jsx(CurrencyBadge, {\n          children: _jsxs(Text, {\n            size: \"xs\",\n            children: [\" \", tokenSymbol, \" \"]\n          })\n        })]\n      }), _jsx(Spacer, {\n        y: \"xxl\"\n      }), _jsxs(Button, {\n        fullWidth: true,\n        variant: \"accent\",\n        type: \"submit\",\n        className: \"tw-sendfunds-screen-send-button\",\n        onClick: async () => {\n          if (!receiverAddress || !amount) {\n            return;\n          }\n          await sendTokenMutation.mutateAsync({\n            receiverAddress,\n            amount,\n            tokenAddress: tokenAddress\n          });\n        },\n        style: {\n          alignItems: \"center\",\n          gap: spacing.sm,\n          padding: spacing.md\n        },\n        children: [sendTokenMutation.isPending && _jsx(Spinner, {\n          size: \"sm\",\n          color: \"accentButtonText\"\n        }), sendTokenMutation.isPending ? locale.sending : locale.submitButton]\n      })]\n    })]\n  });\n}\nconst CurrencyBadge = /* @__PURE__ */StyledDiv({\n  position: \"absolute\",\n  top: \"50%\",\n  transform: \"translateY(-50%)\",\n  right: spacing.sm\n});\n//# sourceMappingURL=SendFunds.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}