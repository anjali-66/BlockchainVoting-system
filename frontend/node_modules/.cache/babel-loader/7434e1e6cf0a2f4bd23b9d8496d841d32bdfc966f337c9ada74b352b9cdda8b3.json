{"ast":null,"code":"import { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithCryptoStatusUrl } from \"../utils/definitions.js\";\n/**\n * Gets the status of a buy with crypto transaction\n * @param buyWithCryptoTransaction - Object of type [`BuyWithCryptoTransaction`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransaction)\n * @example\n *\n * ```ts\n * import { sendTransaction } from \"thirdweb\";\n * import { getBuyWithCryptoStatus, getBuyWithCryptoQuote } from \"thirdweb/pay\";\n *\n * // get a quote between two tokens\n * const quote = await getBuyWithCryptoQuote(quoteParams);\n *\n * // if approval is required, send the approval transaction\n * if (quote.approval) {\n *  const txResult = await sendTransaction({\n *    transaction: quote.approval,\n *    account: account, // account from connected wallet\n *  });\n *\n *  await waitForReceipt(txResult);\n * }\n *\n * // send the quoted transaction\n * const swapTxResult = await sendTransaction({\n *    transaction: quote.transactionRequest,\n *    account: account, // account from connected wallet\n *  });\n *\n * await waitForReceipt(swapTxResult);\n *\n * // keep polling the status of the quoted transaction until it returns a success or failure status\n * const status = await getBuyWithCryptoStatus({\n *    client,\n *    transactionHash: swapTxResult.transactionHash,\n * }});\n * ```\n * @returns Object of type [`BuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoStatus)\n * @buyCrypto\n */\nexport async function getBuyWithCryptoStatus(buyWithCryptoTransaction) {\n  try {\n    if (!buyWithCryptoTransaction.transactionHash) {\n      throw new Error(\"Transaction hash is required\");\n    }\n    const queryString = new URLSearchParams({\n      transactionHash: buyWithCryptoTransaction.transactionHash\n    }).toString();\n    const url = `${getPayBuyWithCryptoStatusUrl()}?${queryString}`;\n    const response = await getClientFetch(buyWithCryptoTransaction.client)(url);\n    // Assuming the response directly matches the BuyWithCryptoStatus interface\n    if (!response.ok) {\n      response.body?.cancel();\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = (await response.json()).result;\n    return data;\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n//# sourceMappingURL=getStatus.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}