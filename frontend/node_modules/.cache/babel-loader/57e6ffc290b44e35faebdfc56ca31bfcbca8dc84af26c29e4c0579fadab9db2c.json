{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { CrossCircledIcon } from \"@radix-ui/react-icons\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { Suspense, lazy } from \"react\";\nimport { isEcosystemWallet } from \"../../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { iconSize } from \"../../../../core/design-system/index.js\";\nimport { useActiveWalletChain } from \"../../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport { useAdminWallet } from \"../../../../core/hooks/wallets/useAdminWallet.js\";\nimport EcosystemWalletConnectUI from \"../../../wallets/ecosystem/EcosystemWalletConnectUI.js\";\nimport { LoadingScreen } from \"../../../wallets/shared/LoadingScreen.js\";\nimport { Container, Line, ModalHeader } from \"../../components/basic.js\";\nimport { Text } from \"../../components/text.js\";\nconst InAppWalletConnectUI = /* @__PURE__ */lazy(() => import(\"../../../wallets/in-app/InAppWalletConnectUI.js\"));\n/**\n * @internal\n */\nexport function LinkProfileScreen(props) {\n  const activeWallet = useAdminWallet();\n  const chain = useActiveWalletChain();\n  const queryClient = useQueryClient();\n  if (!activeWallet) {\n    return _jsx(LoadingScreen, {});\n  }\n  if (activeWallet.id === \"inApp\") {\n    return _jsx(Suspense, {\n      fallback: _jsx(LoadingScreen, {}),\n      children: _jsx(InAppWalletConnectUI, {\n        walletConnect: props.walletConnect,\n        wallet: activeWallet,\n        done: () => {\n          setTimeout(() => {\n            queryClient.invalidateQueries({\n              queryKey: [\"profiles\"]\n            });\n          }, 500);\n          props.onBack();\n        },\n        connectLocale: props.locale,\n        client: props.client,\n        size: \"compact\",\n        chain: chain,\n        meta: {\n          title: props.locale.manageWallet.linkProfile,\n          showThirdwebBranding: false\n        },\n        isLinking: true,\n        goBack: props.onBack\n      })\n    });\n  }\n  if (isEcosystemWallet(activeWallet)) {\n    return _jsx(Suspense, {\n      fallback: _jsx(LoadingScreen, {}),\n      children: _jsx(EcosystemWalletConnectUI, {\n        wallet: activeWallet,\n        done: () => {\n          setTimeout(() => {\n            queryClient.invalidateQueries({\n              queryKey: [\"profiles\"]\n            });\n          }, 500);\n          props.onBack();\n        },\n        connectLocale: props.locale,\n        client: props.client,\n        size: \"compact\",\n        chain: chain,\n        meta: {\n          title: props.locale.manageWallet.linkProfile,\n          showThirdwebBranding: false\n        },\n        walletConnect: props.walletConnect,\n        isLinking: true,\n        goBack: props.onBack\n      })\n    });\n  }\n  return _jsxs(Container, {\n    style: {\n      minHeight: \"300px\"\n    },\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: _jsx(ModalHeader, {\n        title: props.locale.manageWallet.linkProfile,\n        onBack: props.onBack\n      })\n    }), _jsx(Line, {}), _jsxs(Container, {\n      flex: \"column\",\n      gap: \"md\",\n      center: \"both\",\n      px: \"xl\",\n      color: \"secondaryText\",\n      style: {\n        flex: \"1\",\n        minHeight: \"250px\"\n      },\n      children: [_jsx(CrossCircledIcon, {\n        width: iconSize.xl,\n        height: iconSize.xl\n      }), _jsx(Text, {\n        center: true,\n        children: \"This wallet does not support account linking\"\n      })]\n    })]\n  });\n}\n//# sourceMappingURL=LinkProfileScreen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}