{"ast":null,"code":"import * as Address from './Address.js';\nimport * as Errors from './Errors.js';\nimport * as Hash from './Hash.js';\nimport * as Hex from './Hex.js';\n/**\n * Converts a list of Access List tuples into a object-formatted list.\n *\n * @example\n * ```ts twoslash\n * import { AccessList } from 'ox'\n *\n * const accessList = AccessList.fromTupleList([\n *   [\n *     '0x0000000000000000000000000000000000000000',\n *     [\n *       '0x0000000000000000000000000000000000000000000000000000000000000001',\n *       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe',\n *     ],\n *   ],\n * ])\n * // @log: [\n * // @log:   {\n * // @log:     address: '0x0000000000000000000000000000000000000000',\n * // @log:     storageKeys: [\n * // @log:       '0x0000000000000000000000000000000000000000000000000000000000000001',\n * // @log:       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe',\n * // @log:     ],\n * // @log:   },\n * // @log: ]\n * ```\n *\n * @param accessList - List of tuples.\n * @returns Access list.\n */\nexport function fromTupleList(accessList) {\n  const list = [];\n  for (let i = 0; i < accessList.length; i++) {\n    const [address, storageKeys] = accessList[i];\n    if (address) Address.assert(address, {\n      strict: false\n    });\n    list.push({\n      address: address,\n      storageKeys: storageKeys.map(key => Hash.validate(key) ? key : Hex.trimLeft(key))\n    });\n  }\n  return list;\n}\n/**\n * Converts a structured Access List into a list of tuples.\n *\n * @example\n * ```ts twoslash\n * import { AccessList } from 'ox'\n *\n * const accessList = AccessList.toTupleList([\n *   {\n *     address: '0x0000000000000000000000000000000000000000',\n *     storageKeys: [\n *       '0x0000000000000000000000000000000000000000000000000000000000000001',\n *       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe'],\n *   },\n * ])\n * // @log: [\n * // @log:   [\n * // @log:     '0x0000000000000000000000000000000000000000',\n * // @log:     [\n * // @log:       '0x0000000000000000000000000000000000000000000000000000000000000001',\n * // @log:       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe',\n * // @log:     ],\n * // @log:   ],\n * // @log: ]\n * ```\n *\n * @param accessList - Access list.\n * @returns List of tuples.\n */\nexport function toTupleList(accessList) {\n  if (!accessList || accessList.length === 0) return [];\n  const tuple = [];\n  for (const {\n    address,\n    storageKeys\n  } of accessList) {\n    for (let j = 0; j < storageKeys.length; j++) if (Hex.size(storageKeys[j]) !== 32) throw new InvalidStorageKeySizeError({\n      storageKey: storageKeys[j]\n    });\n    if (address) Address.assert(address, {\n      strict: false\n    });\n    tuple.push([address, storageKeys]);\n  }\n  return tuple;\n}\n/** Thrown when the size of a storage key is invalid. */\nexport class InvalidStorageKeySizeError extends Errors.BaseError {\n  constructor({\n    storageKey\n  }) {\n    super(`Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${Hex.size(storageKey)} bytes.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'AccessList.InvalidStorageKeySizeError'\n    });\n  }\n}\n//# sourceMappingURL=AccessList.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}