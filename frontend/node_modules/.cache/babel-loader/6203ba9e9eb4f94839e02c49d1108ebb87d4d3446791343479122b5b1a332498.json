{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { CheckCircledIcon, ExternalLinkIcon } from \"@radix-ui/react-icons\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { formatExplorerTxUrl } from \"../../../../utils/url.js\";\nimport { iconSize } from \"../../../core/design-system/index.js\";\nimport { useChainExplorers } from \"../../../core/hooks/others/useChainQuery.js\";\nimport { useSendTransaction } from \"../../hooks/transaction/useSendTransaction.js\";\nimport { AccentFailIcon } from \"../ConnectWallet/icons/AccentFailIcon.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport { Container, ModalHeader } from \"../components/basic.js\";\nimport { Button, ButtonLink } from \"../components/buttons.js\";\nimport { Text } from \"../components/text.js\";\nexport function ExecutingTxScreen(props) {\n  const sendTxCore = useSendTransaction({\n    payModal: false\n  });\n  const [txHash, setTxHash] = useState();\n  const chainExplorers = useChainExplorers(props.tx.chain);\n  const [status, setStatus] = useState(\"loading\");\n  const sendTx = useCallback(async () => {\n    setStatus(\"loading\");\n    try {\n      const txData = await sendTxCore.mutateAsync(props.tx);\n      setTxHash(txData.transactionHash);\n      props.onTxSent(txData);\n      setStatus(\"sent\");\n    } catch (e) {\n      // Do not reject the transaction here, because the user may want to try again\n      // we only reject on modal close\n      console.error(e);\n      setStatus(\"failed\");\n    }\n  }, [sendTxCore, props.tx, props.onTxSent]);\n  const done = useRef(false);\n  useEffect(() => {\n    if (done.current) {\n      return;\n    }\n    done.current = true;\n    sendTx();\n  }, [sendTx]);\n  return _jsxs(Container, {\n    p: \"lg\",\n    children: [_jsx(ModalHeader, {\n      title: \"Transaction\",\n      onBack: props.onBack\n    }), _jsx(Spacer, {\n      y: \"xxl\"\n    }), _jsx(Spacer, {\n      y: \"xxl\"\n    }), _jsxs(Container, {\n      flex: \"row\",\n      center: \"x\",\n      children: [status === \"loading\" && _jsx(Spinner, {\n        size: \"xxl\",\n        color: \"accentText\"\n      }), status === \"failed\" && _jsx(AccentFailIcon, {\n        size: iconSize[\"3xl\"]\n      }), status === \"sent\" && _jsx(Container, {\n        color: \"success\",\n        flex: \"row\",\n        center: \"both\",\n        children: _jsx(CheckCircledIcon, {\n          width: iconSize[\"3xl\"],\n          height: iconSize[\"3xl\"]\n        })\n      })]\n    }), _jsx(Spacer, {\n      y: \"lg\"\n    }), _jsxs(Text, {\n      color: \"primaryText\",\n      center: true,\n      size: \"lg\",\n      children: [status === \"loading\" && \"Sending transaction\", status === \"failed\" && \"Transaction failed\", status === \"sent\" && \"Transaction sent\"]\n    }), _jsx(Spacer, {\n      y: \"sm\"\n    }), _jsx(Text, {\n      color: \"danger\",\n      center: true,\n      size: \"sm\",\n      children: status === \"failed\" && sendTxCore.error ? sendTxCore.error.message : \"\"\n    }), _jsx(Spacer, {\n      y: \"xxl\"\n    }), _jsx(Spacer, {\n      y: \"xxl\"\n    }), status === \"failed\" && _jsx(Button, {\n      variant: \"accent\",\n      fullWidth: true,\n      onClick: sendTx,\n      children: \"Try Again\"\n    }), status === \"sent\" && _jsxs(_Fragment, {\n      children: [_jsx(Button, {\n        variant: \"accent\",\n        fullWidth: true,\n        onClick: props.closeModal,\n        children: \"Done\"\n      }), txHash && _jsxs(_Fragment, {\n        children: [_jsx(Spacer, {\n          y: \"sm\"\n        }), _jsxs(ButtonLink, {\n          fullWidth: true,\n          variant: \"outline\",\n          href: formatExplorerTxUrl(chainExplorers.explorers[0]?.url ?? \"\", txHash),\n          target: \"_blank\",\n          as: \"a\",\n          gap: \"xs\",\n          style: {\n            textDecoration: \"none\",\n            color: \"inherit\"\n          },\n          children: [\"View on Explorer\", _jsx(ExternalLinkIcon, {\n            width: iconSize.sm,\n            height: iconSize.sm\n          })]\n        })]\n      })]\n    })]\n  });\n}\n//# sourceMappingURL=ExecutingScreen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}