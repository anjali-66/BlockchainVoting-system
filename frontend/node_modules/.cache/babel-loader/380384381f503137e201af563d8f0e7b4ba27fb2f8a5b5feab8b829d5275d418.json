{"ast":null,"code":"import { encodePacked } from \"viem\";\nimport { ZERO_ADDRESS, isNativeTokenAddress } from \"../../../constants/addresses.js\";\nimport { keccak256 } from \"../../hashing/keccak256.js\";\nimport { convertQuantity } from \"./convert-quantity.js\";\nexport async function hashEntry(options) {\n  const currencyAddress = options.entry.currencyAddress || ZERO_ADDRESS;\n  const currencyDecimals = await (async () => {\n    if (isNativeTokenAddress(currencyAddress) || currencyAddress === ZERO_ADDRESS) {\n      return 18;\n    }\n    const [{\n      getContract\n    }, {\n      decimals: getDecimals\n    }] = await Promise.all([import(\"../../../contract/contract.js\"), import(\"../../../extensions/erc20/read/decimals.js\")]);\n    const currencyContract = getContract({\n      address: currencyAddress,\n      chain: options.chain,\n      client: options.client\n    });\n    return await getDecimals({\n      contract: currencyContract\n    });\n  })();\n  return keccak256(encodePacked([\"address\", \"uint256\", \"uint256\", \"address\"], [options.entry.address, convertQuantity({\n    quantity: options.entry.maxClaimable || \"unlimited\",\n    tokenDecimals: options.tokenDecimals\n  }), convertQuantity({\n    quantity: options.entry.price || \"unlimited\",\n    tokenDecimals: currencyDecimals\n  }), currencyAddress]));\n}\n//# sourceMappingURL=hash-entry.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}