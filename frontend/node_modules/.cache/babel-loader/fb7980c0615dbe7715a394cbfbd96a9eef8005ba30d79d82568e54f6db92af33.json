{"ast":null,"code":"import { createCoinbaseWalletProvider } from './createCoinbaseWalletProvider.js';\nimport { VERSION } from './sdk-info.js';\nimport { ScopedLocalStorage } from './core/storage/ScopedLocalStorage.js';\nimport { checkCrossOriginOpenerPolicy } from './util/checkCrossOriginOpenerPolicy.js';\nimport { validatePreferences } from './util/validatePreferences.js';\nconst DEFAULT_PREFERENCE = {\n  options: 'all'\n};\n/**\n * Create a Coinbase Wallet SDK instance.\n * @param params - Options to create a Coinbase Wallet SDK instance.\n * @returns A Coinbase Wallet SDK object.\n */\nexport function createCoinbaseWalletSDK(params) {\n  var _a;\n  const versionStorage = new ScopedLocalStorage('CBWSDK');\n  versionStorage.setItem('VERSION', VERSION);\n  void checkCrossOriginOpenerPolicy();\n  const options = {\n    metadata: {\n      appName: params.appName || 'Dapp',\n      appLogoUrl: params.appLogoUrl || '',\n      appChainIds: params.appChainIds || []\n    },\n    preference: Object.assign(DEFAULT_PREFERENCE, (_a = params.preference) !== null && _a !== void 0 ? _a : {})\n  };\n  /**\n   * Validate user supplied preferences. Throws if key/values are not valid.\n   */\n  validatePreferences(options.preference);\n  let provider = null;\n  return {\n    getProvider: () => {\n      if (!provider) {\n        provider = createCoinbaseWalletProvider(options);\n      }\n      return provider;\n    }\n  };\n}\n//# sourceMappingURL=createCoinbaseWalletSDK.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}