{"ast":null,"code":"import { trackConnect } from \"../analytics/track/connect.js\";\nimport { getCachedChainIfExists } from \"../chains/utils.js\";\nimport { webLocalStorage } from \"../utils/storage/webStorage.js\";\nimport { isMobile } from \"../utils/web/isMobile.js\";\nimport { openWindow } from \"../utils/web/openWindow.js\";\nimport { coinbaseWalletSDK } from \"./coinbase/coinbase-wallet.js\";\nimport { getCoinbaseWebProvider } from \"./coinbase/coinbase-web.js\";\nimport { COINBASE } from \"./constants.js\";\nimport { isEcosystemWallet } from \"./ecosystem/is-ecosystem-wallet.js\";\nimport { ecosystemWallet } from \"./in-app/web/ecosystem.js\";\nimport { inAppWallet } from \"./in-app/web/in-app.js\";\nimport { getInjectedProvider } from \"./injected/index.js\";\nimport { smartWallet } from \"./smart/smart-wallet.js\";\nimport { createWalletEmitter } from \"./wallet-emitter.js\";\n// TODO: figure out how to define the type without tuple args type and using function overloads\n/**\n * Creates a wallet based on the provided ID and arguments.\n *\n * - Supports 500+ wallets\n * - Handles both injected browser wallets and WalletConnect sessions\n *\n * [View all available wallets](https://portal.thirdweb.com/typescript/v5/supported-wallets)\n *\n * @param args - The arguments for creating the wallet.\n * @param args.id - The ID of the wallet to create, this will be autocompleted by your IDE.\n * [View all available wallets](https://portal.thirdweb.com/typescript/v5/supported-wallets)\n * @param args.createOptions - The options for creating the wallet.\n * The arguments are different for each wallet type.\n * Refer to the [WalletCreationOptions](https://portal.thirdweb.com/references/typescript/v5/WalletCreationOptions) type for more details.\n * @returns - The created wallet.\n * @example\n *\n * ## Connecting the wallet\n *\n * Once created, you can connect the wallet to your app by calling the `connect` method.\n *\n * The `connect` method returns a promise that resolves to the connected account.\n *\n * Each wallet type can have different connect options. [View the different connect options](https://portal.thirdweb.com/references/typescript/v5/WalletConnectionOption)\n *\n * ## Connecting to an injected wallet\n *\n * ```ts\n * import { createWallet } from \"thirdweb/wallets\";\n *\n * const metamaskWallet = createWallet(\"io.metamask\");\n *\n * const account = await metamaskWallet.connect({\n *  client,\n * });\n * ```\n *\n * You can check if a wallet is installed by calling the [injectedProvider](https://portal.thirdweb.com/references/typescript/v5/injectedProvider) method.\n *\n * ## Connecting via WalletConnect modal\n *\n * ```ts\n * import { createWallet } from \"thirdweb/wallets\";\n *\n * const metamaskWallet = createWallet(\"io.metamask\");\n *\n * await metamask.connect({\n *   client,\n *   walletConnect: {\n *     projectId: \"YOUR_PROJECT_ID\",\n *     showQrModal: true,\n *     appMetadata: {\n *       name: \"My App\",\n *       url: \"https://my-app.com\",\n *       description: \"my app description\",\n *       logoUrl: \"https://path/to/my-app/logo.svg\",\n *     },\n *   },\n * });\n * ```\n * [View ConnectWallet connection options](https://portal.thirdweb.com/references/typescript/v5/WCConnectOptions)\n *\n * ## Connecting with coinbase wallet\n *\n * ```ts\n * import { createWallet } from \"thirdweb/wallets\";\n *\n * const cbWallet = createWallet(\"com.coinbase.wallet\", {\n *   appMetadata: {\n *     name: \"My App\",\n *     url: \"https://my-app.com\",\n *     description: \"my app description\",\n *     logoUrl: \"https://path/to/my-app/logo.svg\",\n *   },\n *   walletConfig: {\n *     // options: 'all' | 'smartWalletOnly' | 'eoaOnly'\n *     options: 'all',\n *   },\n * });\n *\n * const account = await cbWallet.connect({\n *  client,\n * });\n * ```\n *\n * [View Coinbase wallet creation options](https://portal.thirdweb.com/references/typescript/v5/CoinbaseWalletCreationOptions)\n *\n * @wallet\n */\nexport function createWallet(...args) {\n  const [id, creationOptions] = args;\n  switch (true) {\n    /**\n     * SMART WALLET\n     */\n    case id === \"smart\":\n      {\n        return smartWallet(creationOptions);\n      }\n    /**\n     * IN-APP WALLET\n     */\n    case id === \"embedded\" || id === \"inApp\":\n      {\n        return inAppWallet(creationOptions);\n      }\n    /**\n     * ECOSYSTEM WALLET\n     */\n    case isEcosystemWallet(id):\n      return ecosystemWallet(...args);\n    /**\n     * COINBASE WALLET VIA SDK\n     * -> if no injected coinbase found, we'll use the coinbase SDK\n     */\n    case id === COINBASE:\n      {\n        const options = creationOptions;\n        return coinbaseWalletSDK({\n          createOptions: options,\n          providerFactory: () => getCoinbaseWebProvider(options),\n          onConnectRequested: async provider => {\n            // on the web, make sure to show the coinbase popup IMMEDIATELY on connection requested\n            // otherwise the popup might get blocked in safari\n            // TODO awaiting the provider is fast only thanks to preloading that happens in our components\n            // these probably need to actually imported / created synchronously to be used headless properly\n            const {\n              showCoinbasePopup\n            } = await import(\"./coinbase/utils.js\");\n            return showCoinbasePopup(provider);\n          }\n        });\n      }\n    /**\n     * WALLET CONNECT AND INJECTED WALLETS + walletConnect standalone\n     */\n    default:\n      {\n        const emitter = createWalletEmitter();\n        let account = undefined;\n        let chain = undefined;\n        const unsubscribeChain = emitter.subscribe(\"chainChanged\", newChain => {\n          chain = newChain;\n        });\n        function reset() {\n          account = undefined;\n          chain = undefined;\n        }\n        let handleDisconnect = async () => {};\n        const unsubscribeDisconnect = emitter.subscribe(\"disconnect\", () => {\n          reset();\n          unsubscribeChain();\n          unsubscribeDisconnect();\n        });\n        emitter.subscribe(\"accountChanged\", _account => {\n          account = _account;\n        });\n        let handleSwitchChain = async () => {\n          throw new Error(\"Not implemented yet\");\n        };\n        // on mobile, deeplink to the wallet app for session handling\n        const sessionHandler = isMobile() ? uri => openWindow(uri) : undefined;\n        const wallet = {\n          id,\n          subscribe: emitter.subscribe,\n          getConfig: () => args[1],\n          getChain() {\n            if (!chain) {\n              return undefined;\n            }\n            chain = getCachedChainIfExists(chain.id) || chain;\n            return chain;\n          },\n          getAccount: () => account,\n          autoConnect: async options => {\n            const {\n              injectedProvider\n            } = await import(\"./injected/mipdStore.js\");\n            // injected wallet priority for autoConnect\n            if (id !== \"walletConnect\" && injectedProvider(id)) {\n              const {\n                autoConnectEip1193Wallet\n              } = await import(\"./injected/index.js\");\n              const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await autoConnectEip1193Wallet({\n                id: id,\n                provider: getInjectedProvider(id),\n                emitter,\n                chain: options.chain,\n                client: options.client\n              });\n              // set the states\n              account = connectedAccount;\n              chain = connectedChain;\n              handleDisconnect = doDisconnect;\n              handleSwitchChain = doSwitchChain;\n              trackConnect({\n                client: options.client,\n                walletType: id,\n                walletAddress: account.address,\n                chainId: chain.id\n              });\n              // return account\n              return account;\n            }\n            if (options && \"client\" in options) {\n              const {\n                autoConnectWC\n              } = await import(\"./wallet-connect/controller.js\");\n              const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await autoConnectWC(options, emitter, wallet.id, webLocalStorage, sessionHandler);\n              // set the states\n              account = connectedAccount;\n              chain = connectedChain;\n              handleDisconnect = doDisconnect;\n              handleSwitchChain = doSwitchChain;\n              trackConnect({\n                client: options.client,\n                walletType: id,\n                walletAddress: account.address,\n                chainId: chain.id\n              });\n              // return account\n              return account;\n            }\n            throw new Error(\"Failed to auto connect\");\n          },\n          connect: async options => {\n            async function wcConnect(wcOptions) {\n              const {\n                connectWC\n              } = await import(\"./wallet-connect/controller.js\");\n              const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await connectWC(wcOptions, emitter, wallet.id, webLocalStorage, sessionHandler);\n              // set the states\n              account = connectedAccount;\n              chain = connectedChain;\n              handleDisconnect = doDisconnect;\n              handleSwitchChain = doSwitchChain;\n              trackConnect({\n                client: wcOptions.client,\n                walletType: id,\n                walletAddress: account.address,\n                chainId: chain.id\n              });\n              return account;\n            }\n            if (id === \"walletConnect\") {\n              const {\n                client,\n                chain: _chain,\n                ...walletConnectOptions\n              } = options;\n              return wcConnect({\n                client,\n                chain: _chain,\n                walletConnect: {\n                  ...walletConnectOptions\n                }\n              });\n            }\n            // prefer walletconnect over injected if explicitely passing walletConnect options\n            const forceWalletConnectOption = options && \"walletConnect\" in options;\n            const {\n              injectedProvider\n            } = await import(\"./injected/mipdStore.js\");\n            if (injectedProvider(id) && !forceWalletConnectOption) {\n              const {\n                connectEip1193Wallet\n              } = await import(\"./injected/index.js\");\n              const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await connectEip1193Wallet({\n                id: id,\n                provider: getInjectedProvider(id),\n                client: options.client,\n                chain: options.chain,\n                emitter\n              });\n              // set the states\n              account = connectedAccount;\n              chain = connectedChain;\n              handleDisconnect = doDisconnect;\n              handleSwitchChain = doSwitchChain;\n              trackConnect({\n                client: options.client,\n                walletType: id,\n                walletAddress: account.address,\n                chainId: chain.id\n              });\n              // return account\n              return account;\n            }\n            if (options && \"client\" in options) {\n              return wcConnect(options);\n            }\n            throw new Error(\"Failed to connect\");\n          },\n          // these get overridden in connect and autoConnect\n          disconnect: async () => {\n            reset();\n            await handleDisconnect();\n          },\n          switchChain: c => handleSwitchChain(c)\n        };\n        return wallet;\n      }\n  }\n}\n/**\n * Creates a wallet that allows connecting to any wallet that supports the WalletConnect protocol.\n * @returns The created smart wallet.\n * @example\n * ```ts\n * import { walletConnect } from \"thirdweb/wallets\";\n *\n * const wallet = walletConnect();\n *\n * const account = await wallet.connect({\n *  client\n * });\n * ```\n * @wallet\n */\nexport function walletConnect() {\n  return createWallet(\"walletConnect\");\n}\n//# sourceMappingURL=create-wallet.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}