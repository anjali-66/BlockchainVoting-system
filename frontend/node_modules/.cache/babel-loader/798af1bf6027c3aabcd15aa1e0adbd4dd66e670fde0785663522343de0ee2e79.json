{"ast":null,"code":"import { getThirdwebBaseUrl } from \"../../../../utils/domains.js\";\nimport { authOptions } from \"../../../../wallets/types.js\";\nconst getLoginOptionRoute = option => {\n  if (!authOptions.includes(option)) {\n    throw new Error(`Unknown auth option ${option}`);\n  }\n  switch (option) {\n    case \"wallet\":\n      return \"siwe\";\n    default:\n      return option;\n  }\n};\nexport const getLoginUrl = ({\n  authOption,\n  client,\n  ecosystem,\n  mode = \"popup\",\n  redirectUrl\n}) => {\n  if (mode === \"popup\" && redirectUrl) {\n    throw new Error(\"Redirect URL is not supported for popup mode\");\n  }\n  if (mode === \"window\" && !redirectUrl) {\n    throw new Error(\"Redirect URL is required for window mode\");\n  }\n  const route = getLoginOptionRoute(authOption);\n  let baseUrl = `${getThirdwebBaseUrl(\"inAppWallet\")}/api/2024-05-05/login/${route}?clientId=${client.clientId}`;\n  if (ecosystem?.partnerId) {\n    baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}&ecosystemPartnerId=${ecosystem.partnerId}`;\n  } else if (ecosystem) {\n    baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}`;\n  }\n  // Always append redirectUrl to the baseUrl if mode is not popup\n  if (mode !== \"popup\") {\n    const formattedRedirectUrl = new URL(redirectUrl || window.location.href);\n    formattedRedirectUrl.searchParams.set(\"walletId\", ecosystem?.id || \"inApp\");\n    formattedRedirectUrl.searchParams.set(\"authProvider\", authOption);\n    baseUrl = `${baseUrl}&redirectUrl=${encodeURIComponent(formattedRedirectUrl.toString())}`;\n  }\n  return baseUrl;\n};\nexport const getLoginCallbackUrl = ({\n  authOption,\n  client,\n  ecosystem\n}) => {\n  const route = getLoginOptionRoute(authOption);\n  let baseUrl = `${getThirdwebBaseUrl(\"inAppWallet\")}/api/2024-05-05/login/${route}/callback?clientId=${client.clientId}`;\n  if (ecosystem?.partnerId) {\n    baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}&ecosystemPartnerId=${ecosystem.partnerId}`;\n  } else if (ecosystem) {\n    baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}`;\n  }\n  return baseUrl;\n};\n//# sourceMappingURL=getLoginPath.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}