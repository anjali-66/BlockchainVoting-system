{"ast":null,"code":"import { getClientFetch } from \"../fetch.js\";\nimport { resolveScheme } from \"../ipfs.js\";\nimport { parseNftUri } from \"../nft/parseNft.js\";\n/**\n * Parses an ENS or similar avatar record. Supports NFT URIs, IPFS scheme, and HTTPS URIs.\n * @param options - The options for parsing an ENS avatar record.\n * @param options.client - The Thirdweb client.\n * @param options.uri - The URI to parse.\n * @returns A promise that resolves to the avatar URL, or null if the URI could not be parsed.\n * @example\n * ```ts\n * import { parseAvatarRecord } from \"thirdweb/utils/ens\";\n * const avatarUrl = await parseAvatarRecord({\n *    client,\n *    uri: \"ipfs://bafybeiemxf5abjwjbikoz4mc3a3dla6ual3jsgpdr4cjr3oz3evfyavhwq/\",\n * });\n *\n * console.log(avatarUrl); // \"https://ipfs.io/ipfs/bafybeiemxf5abjwjbikoz4mc3a3dla6ual3jsgpdr4cjr3oz3evfyavhwq/\"\n *\n * const avatarUrl2 = await parseAvatarRecord({\n *    client,\n *    uri: \"eip155:1/erc1155:0xb32979486938aa9694bfc898f35dbed459f44424/10063\",\n * });\n *\n * console.log(avatarUrl2); // \"https://opensea.io/assets/0xb32979486938aa9694bfc898f35dbed459f44424/10063\"\n * ```\n * @extension ENS\n */\nexport async function parseAvatarRecord(options) {\n  let uri = options.uri;\n  if (/eip155:/i.test(options.uri)) {\n    // do nft uri parsing\n    uri = await parseNftUri(options);\n  }\n  if (!uri) {\n    return null;\n  }\n  const resolvedScheme = resolveScheme({\n    client: options.client,\n    uri\n  });\n  // check if it's an image\n  if (await isImageUri({\n    client: options.client,\n    uri: resolvedScheme\n  })) {\n    return resolvedScheme;\n  }\n  return null;\n}\nasync function isImageUri(options) {\n  try {\n    const res = await getClientFetch(options.client)(options.uri, {\n      method: \"HEAD\"\n    });\n    // retrieve content type header to check if content is image\n    if (res.status === 200) {\n      const contentType = res.headers.get(\"content-type\");\n      return !!contentType?.startsWith(\"image/\");\n    }\n    return false;\n    // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  } catch (error) {\n    // if error is not cors related then fail\n    if (typeof error === \"object\" && typeof error.response !== \"undefined\") {\n      return false;\n    }\n    // fail in NodeJS, since the error is not cors but any other network issue\n    if (Object.hasOwn(globalThis, \"Image\")) {\n      return false;\n    }\n    // in case of cors, use image api to validate if given url is an actual image\n    return new Promise(resolve => {\n      const img = new Image();\n      img.onload = () => {\n        resolve(true);\n      };\n      img.onerror = () => {\n        resolve(false);\n      };\n      img.src = options.uri;\n    });\n  }\n}\n//# sourceMappingURL=avatar.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}