{"ast":null,"code":"var _jsxFileName = \"/Users/sharmaanjali/blockchain-voting-system/frontend/src/components/ConnectWallet.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectWallet = ({\n  onWalletConnected\n}) => {\n  _s();\n  const [error, setError] = useState('');\n  const [isConnecting, setIsConnecting] = useState(false);\n  const connectWallet = async () => {\n    setIsConnecting(true);\n    setError('');\n    try {\n      if (!window.ethereum) {\n        throw new Error('MetaMask is not installed');\n      }\n\n      // Force MetaMask to reload and clear cached connections\n      if (window.ethereum.networkVersion) {\n        await window.ethereum.request({\n          method: 'wallet_requestPermissions',\n          params: [{\n            eth_accounts: {}\n          }]\n        });\n      }\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n\n      // Create provider with specific timeout and polling interval\n      const provider = new ethers.BrowserProvider(window.ethereum, {\n        polling: true,\n        pollingInterval: 15000,\n        timeout: 30000\n      });\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      onWalletConnected(provider, address);\n    } catch (err) {\n      let errorMessage = err.message;\n\n      // Handle specific extension errors\n      if (errorMessage.includes('Failed to send message to service worker')) {\n        errorMessage = 'MetaMask connection error. Please try refreshing the page or restarting your browser.';\n      }\n      setError(errorMessage);\n      console.error('Wallet connection error:', err);\n    }\n    setIsConnecting(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-500 mb-2\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      disabled: isConnecting,\n      className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n      children: isConnecting ? 'Connecting...' : 'Connect Wallet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(ConnectWallet, \"cYrtscU01X8haoxYz30x1dG0rRI=\");\n_c = ConnectWallet;\nexport default ConnectWallet;\nvar _c;\n$RefreshReg$(_c, \"ConnectWallet\");","map":{"version":3,"names":["React","useState","ethers","jsxDEV","_jsxDEV","ConnectWallet","onWalletConnected","_s","error","setError","isConnecting","setIsConnecting","connectWallet","window","ethereum","Error","networkVersion","request","method","params","eth_accounts","provider","BrowserProvider","polling","pollingInterval","timeout","signer","getSigner","address","getAddress","err","errorMessage","message","includes","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/sharmaanjali/blockchain-voting-system/frontend/src/components/ConnectWallet.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { ethers } from 'ethers';\n\nconst ConnectWallet = ({ onWalletConnected }) => {\n  const [error, setError] = useState('');\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const connectWallet = async () => {\n    setIsConnecting(true);\n    setError('');\n\n    try {\n      if (!window.ethereum) {\n        throw new Error('MetaMask is not installed');\n      }\n\n      // Force MetaMask to reload and clear cached connections\n      if (window.ethereum.networkVersion) {\n        await window.ethereum.request({\n          method: 'wallet_requestPermissions',\n          params: [{ eth_accounts: {} }]\n        });\n      }\n\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      \n      // Create provider with specific timeout and polling interval\n      const provider = new ethers.BrowserProvider(window.ethereum, {\n        polling: true,\n        pollingInterval: 15000,\n        timeout: 30000\n      });\n\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      \n      onWalletConnected(provider, address);\n    } catch (err) {\n      let errorMessage = err.message;\n      \n      // Handle specific extension errors\n      if (errorMessage.includes('Failed to send message to service worker')) {\n        errorMessage = 'MetaMask connection error. Please try refreshing the page or restarting your browser.';\n      }\n      \n      setError(errorMessage);\n      console.error('Wallet connection error:', err);\n    }\n    setIsConnecting(false);\n  };\n\n  return (\n    <div>\n      {error && <div className=\"text-red-500 mb-2\">{error}</div>}\n      <button \n        onClick={connectWallet}\n        disabled={isConnecting}\n        className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n      >\n        {isConnecting ? 'Connecting...' : 'Connect Wallet'}\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectWallet;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChCD,eAAe,CAAC,IAAI,CAAC;IACrBF,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,IAAI,CAACI,MAAM,CAACC,QAAQ,EAAE;QACpB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;;MAEA;MACA,IAAIF,MAAM,CAACC,QAAQ,CAACE,cAAc,EAAE;QAClC,MAAMH,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC;UAC5BC,MAAM,EAAE,2BAA2B;UACnCC,MAAM,EAAE,CAAC;YAAEC,YAAY,EAAE,CAAC;UAAE,CAAC;QAC/B,CAAC,CAAC;MACJ;MAEA,MAAMP,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;;MAEhE;MACA,MAAMG,QAAQ,GAAG,IAAInB,MAAM,CAACoB,eAAe,CAACT,MAAM,CAACC,QAAQ,EAAE;QAC3DS,OAAO,EAAE,IAAI;QACbC,eAAe,EAAE,KAAK;QACtBC,OAAO,EAAE;MACX,CAAC,CAAC;MAEF,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,SAAS,CAAC,CAAC;MACzC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;MAEzCvB,iBAAiB,CAACe,QAAQ,EAAEO,OAAO,CAAC;IACtC,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,IAAIC,YAAY,GAAGD,GAAG,CAACE,OAAO;;MAE9B;MACA,IAAID,YAAY,CAACE,QAAQ,CAAC,0CAA0C,CAAC,EAAE;QACrEF,YAAY,GAAG,uFAAuF;MACxG;MAEAtB,QAAQ,CAACsB,YAAY,CAAC;MACtBG,OAAO,CAAC1B,KAAK,CAAC,0BAA0B,EAAEsB,GAAG,CAAC;IAChD;IACAnB,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,oBACEP,OAAA;IAAA+B,QAAA,GACG3B,KAAK,iBAAIJ,OAAA;MAAKgC,SAAS,EAAC,mBAAmB;MAAAD,QAAA,EAAE3B;IAAK;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC1DpC,OAAA;MACEqC,OAAO,EAAE7B,aAAc;MACvB8B,QAAQ,EAAEhC,YAAa;MACvB0B,SAAS,EAAC,sEAAsE;MAAAD,QAAA,EAE/EzB,YAAY,GAAG,eAAe,GAAG;IAAgB;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACjC,EAAA,CA5DIF,aAAa;AAAAsC,EAAA,GAAbtC,aAAa;AA8DnB,eAAeA,aAAa;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}