{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport styled from \"@emotion/styled\";\nimport { ChevronDownIcon, CrossCircledIcon } from \"@radix-ui/react-icons\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { getTokenBalance } from \"../../../../../wallets/utils/getTokenBalance.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { fontSize, iconSize, spacing } from \"../../../../core/design-system/index.js\";\nimport { useChainIconUrl, useChainName } from \"../../../../core/hooks/others/useChainQuery.js\";\nimport { useTokenInfo } from \"../../../../core/hooks/others/useTokenInfo.js\";\nimport { useActiveAccount } from \"../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { ChainIcon } from \"../../components/ChainIcon.js\";\nimport { Skeleton } from \"../../components/Skeleton.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Spinner } from \"../../components/Spinner.js\";\nimport { TokenIcon } from \"../../components/TokenIcon.js\";\nimport { Container, Line, ModalHeader } from \"../../components/basic.js\";\nimport { Button } from \"../../components/buttons.js\";\nimport { Input } from \"../../components/formElements.js\";\nimport { Text } from \"../../components/text.js\";\nimport { ChainButton, NetworkSelectorContent } from \"../NetworkSelector.js\";\nimport { formatTokenBalance } from \"./formatTokenBalance.js\";\nimport { NATIVE_TOKEN, isNativeToken } from \"./nativeToken.js\";\n// Note: TokenSelector can be used when wallet may or may not be connected\n/**\n *\n * @internal\n */\nexport function TokenSelector(props) {\n  const [screen, setScreen] = useState(\"base\");\n  const [input, setInput] = useState(\"\");\n  const chain = props.chain;\n  const chainNameQuery = useChainName(chain);\n  const chainIconQuery = useChainIconUrl(chain);\n  // if input is undefined, it loads the native token\n  // otherwise it loads the token with given address\n  const tokenQuery = useTokenInfo({\n    chain: chain,\n    tokenAddress: input,\n    client: props.client\n  });\n  const locale = props.connectLocale.sendFundsScreen;\n  let tokenList = props.tokenList;\n  if (tokenQuery.data && input) {\n    tokenList = [{\n      ...tokenQuery.data,\n      address: input\n    }, ...tokenList];\n  }\n  const filteredList = input ? tokenList.filter(t => {\n    const inputStr = input.toLowerCase();\n    return t.name.toLowerCase().includes(inputStr) || t.symbol.toLowerCase().includes(inputStr) || t.address.includes(input);\n  }) : tokenList;\n  const {\n    chainSelection\n  } = props;\n  if (screen === \"select-chain\" && chainSelection) {\n    return _jsx(NetworkSelectorContent, {\n      client: props.client,\n      connectLocale: props.connectLocale,\n      showTabs: false,\n      onBack: () => setScreen(\"base\"),\n      // pass swap supported chains\n      chains: chainSelection.chains,\n      closeModal: () => setScreen(\"base\"),\n      networkSelector: {\n        renderChain(renderChainProps) {\n          return _jsx(ChainButton, {\n            chain: renderChainProps.chain,\n            confirming: false,\n            switchingFailed: false,\n            onClick: () => {\n              chainSelection.select(renderChainProps.chain);\n              setScreen(\"base\");\n            },\n            client: props.client,\n            connectLocale: props.connectLocale\n          });\n        }\n      }\n    });\n  }\n  return _jsxs(Container, {\n    animate: \"fadein\",\n    style: {\n      minHeight: \"300px\"\n    },\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: _jsx(ModalHeader, {\n        onBack: props.onBack,\n        title: props.modalTitle || locale.selectTokenTitle\n      })\n    }), _jsx(Line, {}), _jsxs(Container, {\n      scrollY: true,\n      style: {\n        maxHeight: \"450px\"\n      },\n      children: [_jsx(Spacer, {\n        y: \"md\"\n      }), props.chainSelection && _jsxs(Container, {\n        px: \"lg\",\n        children: [_jsx(Text, {\n          size: \"sm\",\n          children: \"Select Network\"\n        }), _jsx(Spacer, {\n          y: \"xxs\"\n        }), _jsxs(SelectTokenBtn, {\n          fullWidth: true,\n          variant: \"secondary\",\n          onClick: () => {\n            setScreen(\"select-chain\");\n          },\n          children: [_jsx(ChainIcon, {\n            chainIconUrl: chainIconQuery.url,\n            size: iconSize.lg,\n            client: props.client\n          }), chainNameQuery.name ? _jsx(Text, {\n            color: \"primaryText\",\n            size: \"sm\",\n            children: chainNameQuery.name\n          }) : _jsx(Skeleton, {\n            height: fontSize.md\n          }), _jsx(ChevronDownIcon, {\n            width: iconSize.sm,\n            height: iconSize.sm,\n            style: {\n              marginLeft: \"auto\"\n            }\n          })]\n        }), _jsx(Spacer, {\n          y: \"xl\"\n        }), _jsx(Text, {\n          size: \"sm\",\n          children: \"Select Token\"\n        })]\n      }), _jsxs(Container, {\n        px: \"lg\",\n        children: [_jsx(Spacer, {\n          y: \"xs\"\n        }), _jsx(Input, {\n          placeholder: locale.searchToken,\n          variant: \"outline\",\n          value: input,\n          onChange: e => {\n            setInput(e.target.value);\n          }\n        })]\n      }), _jsx(Spacer, {\n        y: \"md\"\n      }), (filteredList.length > 0 || !input) && _jsxs(Container, {\n        flex: \"column\",\n        gap: \"xs\",\n        px: \"lg\",\n        scrollY: true,\n        style: {\n          paddingTop: 0,\n          paddingBottom: spacing.lg\n          // maxHeight: props.chainSelection ? \"300px\" : \"400px\",\n        },\n        children: [!input && _jsx(SelectTokenButton, {\n          onClick: () => {\n            props.onTokenSelect(NATIVE_TOKEN);\n          },\n          chain: props.chain,\n          token: NATIVE_TOKEN,\n          client: props.client\n        }), filteredList.map(token => {\n          return _jsx(SelectTokenButton, {\n            onClick: () => props.onTokenSelect(token),\n            token: token,\n            chain: props.chain,\n            client: props.client\n          }, token.address);\n        })]\n      }), filteredList.length === 0 && tokenQuery.isLoading && input && _jsx(Container, {\n        animate: \"fadein\",\n        p: \"lg\",\n        flex: \"column\",\n        gap: \"md\",\n        center: \"both\",\n        style: {\n          minHeight: \"200px\",\n          paddingTop: 0\n        },\n        color: \"secondaryText\",\n        children: _jsx(Spinner, {\n          size: \"lg\",\n          color: \"accentText\"\n        })\n      }), filteredList.length === 0 && !tokenQuery.isLoading && input && _jsxs(Container, {\n        animate: \"fadein\",\n        p: \"lg\",\n        flex: \"column\",\n        gap: \"md\",\n        center: \"both\",\n        style: {\n          minHeight: \"200px\",\n          paddingTop: 0\n        },\n        color: \"secondaryText\",\n        children: [_jsx(CrossCircledIcon, {\n          width: iconSize.lg,\n          height: iconSize.lg\n        }), locale.noTokensFound]\n      }), _jsx(Spacer, {\n        y: \"md\"\n      })]\n    })]\n  });\n}\nfunction SelectTokenButton(props) {\n  const account = useActiveAccount();\n  const tokenInfoQuery = useTokenInfo({\n    chain: props.chain,\n    tokenAddress: isNativeToken(props.token) ? undefined : props.token.address,\n    client: props.client\n  });\n  const tokenName = isNativeToken(props.token) ? tokenInfoQuery.data?.name : props.token.name;\n  return _jsxs(SelectTokenBtn, {\n    fullWidth: true,\n    variant: \"secondary\",\n    onClick: props.onClick,\n    children: [_jsx(TokenIcon, {\n      token: props.token,\n      chain: props.chain,\n      size: \"lg\",\n      client: props.client\n    }), _jsxs(Container, {\n      flex: \"column\",\n      gap: \"xxs\",\n      children: [tokenName ? _jsx(Text, {\n        size: \"sm\",\n        color: \"primaryText\",\n        children: tokenName\n      }) : _jsx(Skeleton, {\n        height: fontSize.md,\n        width: \"150px\"\n      }), account && _jsx(TokenBalance, {\n        account: account,\n        chain: props.chain,\n        client: props.client,\n        tokenAddress: isNativeToken(props.token) ? undefined : props.token.address\n      })]\n    })]\n  });\n}\nfunction TokenBalance(props) {\n  const tokenBalanceQuery = useQuery({\n    queryKey: [\"tokenBalance\", props],\n    queryFn: async () => {\n      return getTokenBalance({\n        account: props.account,\n        chain: props.chain,\n        client: props.client,\n        tokenAddress: props.tokenAddress\n      });\n    }\n  });\n  if (tokenBalanceQuery.data) {\n    return _jsxs(Text, {\n      size: \"xs\",\n      children: [\" \", formatTokenBalance(tokenBalanceQuery.data)]\n    });\n  }\n  return _jsx(Skeleton, {\n    height: fontSize.xs,\n    width: \"100px\"\n  });\n}\nconst SelectTokenBtn = /* @__PURE__ */styled(Button)(() => {\n  const theme = useCustomTheme();\n  return {\n    background: theme.colors.tertiaryBg,\n    justifyContent: \"flex-start\",\n    gap: spacing.sm,\n    padding: spacing.sm,\n    \"&:hover\": {\n      background: theme.colors.secondaryButtonBg,\n      transform: \"scale(1.01)\"\n    },\n    transition: \"background 200ms ease, transform 150ms ease\"\n  };\n});\n//# sourceMappingURL=TokenSelector.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}