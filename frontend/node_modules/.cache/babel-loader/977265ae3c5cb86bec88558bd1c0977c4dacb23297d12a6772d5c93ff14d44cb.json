{"ast":null,"code":"import { handleSendRawTransactionRequest } from \"./request-handlers/send-raw-transaction.js\";\nimport { handleSendTransactionRequest } from \"./request-handlers/send-transaction.js\";\nimport { handleSignTransactionRequest } from \"./request-handlers/sign-transaction.js\";\nimport { handleSignTypedDataRequest } from \"./request-handlers/sign-typed-data.js\";\n// Due to some edge cases, we can't import these handlers dynamically\nimport { handleSignRequest } from \"./request-handlers/sign.js\";\nimport { parseEip155ChainId } from \"./utils.js\";\n/**\n * @internal\n */\nexport async function fulfillRequest(options) {\n  const {\n    wallet,\n    walletConnectClient,\n    thirdwebClient,\n    event: {\n      topic,\n      id,\n      params: {\n        chainId: rawChainId,\n        request\n      }\n    },\n    handlers\n  } = options;\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(\"No account connected to provided wallet\");\n  }\n  let result;\n  try {\n    switch (request.method) {\n      case \"personal_sign\":\n        {\n          if (handlers?.personal_sign) {\n            result = await handlers.personal_sign({\n              account,\n              params: request.params\n            });\n          } else {\n            result = await handleSignRequest({\n              account,\n              params: request.params\n            });\n          }\n          break;\n        }\n      case \"eth_sign\":\n        {\n          if (handlers?.eth_sign) {\n            result = await handlers.eth_sign({\n              account,\n              params: request.params\n            });\n          } else {\n            result = await handleSignRequest({\n              account,\n              params: request.params\n            });\n          }\n          break;\n        }\n      case \"eth_signTypedData\":\n        {\n          if (handlers?.eth_signTypedData) {\n            result = await handlers.eth_signTypedData({\n              account,\n              params: request.params\n            });\n          } else {\n            result = await handleSignTypedDataRequest({\n              account,\n              params: request.params\n            });\n          }\n          break;\n        }\n      case \"eth_signTypedData_v4\":\n        {\n          if (handlers?.eth_signTypedData_v4) {\n            result = await handlers.eth_signTypedData_v4({\n              account,\n              params: request.params\n            });\n          } else {\n            result = await handleSignTypedDataRequest({\n              account,\n              params: request.params\n            });\n          }\n          break;\n        }\n      case \"eth_signTransaction\":\n        {\n          if (handlers?.eth_signTransaction) {\n            result = await handlers.eth_signTransaction({\n              account,\n              params: request.params\n            });\n          } else {\n            result = await handleSignTransactionRequest({\n              account,\n              params: request.params\n            });\n          }\n          break;\n        }\n      case \"eth_sendTransaction\":\n        {\n          const chainId = parseEip155ChainId(rawChainId);\n          if (handlers?.eth_sendTransaction) {\n            result = await handlers.eth_sendTransaction({\n              account,\n              chainId,\n              params: request.params\n            });\n          } else {\n            result = await handleSendTransactionRequest({\n              account,\n              chainId,\n              thirdwebClient,\n              params: request.params\n            });\n          }\n          break;\n        }\n      case \"eth_sendRawTransaction\":\n        {\n          const chainId = parseEip155ChainId(rawChainId);\n          if (handlers?.eth_sendRawTransaction) {\n            result = await handlers.eth_sendRawTransaction({\n              account,\n              chainId,\n              params: request.params\n            });\n          } else {\n            result = await handleSendRawTransactionRequest({\n              account,\n              chainId,\n              params: request.params\n            });\n          }\n          break;\n        }\n      case \"wallet_addEthereumChain\":\n        {\n          if (handlers?.wallet_addEthereumChain) {\n            result = await handlers.wallet_addEthereumChain({\n              wallet,\n              params: request.params\n            });\n          } else {\n            throw new Error(\"Unsupported request method: wallet_addEthereumChain\");\n          }\n          break;\n        }\n      case \"wallet_switchEthereumChain\":\n        {\n          if (handlers?.wallet_switchEthereumChain) {\n            result = await handlers.wallet_switchEthereumChain({\n              wallet,\n              params: request.params\n            });\n          } else {\n            const {\n              handleSwitchChain\n            } = await import(\"./request-handlers/switch-chain.js\");\n            result = await handleSwitchChain({\n              wallet,\n              params: request.params\n            });\n          }\n          break;\n        }\n      default:\n        {\n          const potentialHandler = handlers?.[request.method];\n          if (potentialHandler) {\n            result = await potentialHandler({\n              account,\n              chainId: parseEip155ChainId(rawChainId),\n              params: request.params\n            });\n          } else {\n            throw new Error(`Unsupported request method: ${request.method}`);\n          }\n        }\n    }\n  } catch (error) {\n    result = {\n      code: typeof error === \"object\" && error !== null && \"code\" in error ? error.code : 500,\n      message: typeof error === \"object\" && error !== null && \"message\" in error ? error.message : \"Unknown error\"\n    };\n  }\n  walletConnectClient.respond({\n    topic,\n    response: {\n      id,\n      jsonrpc: \"2.0\",\n      result\n    }\n  });\n}\n//# sourceMappingURL=session-request.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}