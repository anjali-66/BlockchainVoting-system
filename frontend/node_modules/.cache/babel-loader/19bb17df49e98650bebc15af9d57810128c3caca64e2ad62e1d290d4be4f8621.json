{"ast":null,"code":"import { uint8ArrayToHex } from \"./encoding/hex.js\";\n/**\n * Returns the minimum of two BigInt values.\n * @param a - The first BigInt value.\n * @param b - The second BigInt value.\n * @returns The smaller of the two BigInt values.\n * @utils\n * @example\n * ```ts\n * min(1n, 2n)\n * // 1n\n */\nexport function min(a, b) {\n  return a < b ? a : b;\n}\n/**\n * Returns the maximum of two BigInt values.\n * @param a - The first BigInt value.\n * @param b - The second BigInt value.\n * @returns The larger of the two BigInt values.\n * @utils\n * @example\n * ```ts\n * max(1n, 2n)\n * // 2n\n */\nexport function max(a, b) {\n  return a > b ? a : b;\n}\n/**\n * Provides error checking on string or number bigint inputs.\n * @param value - A possibly integer-like string, number, or bigint.\n * @returns The bigint representation of the input.\n * @example\n * ```ts\n * toBigInt(\"2\")\n * // 2n\n */\nexport function toBigInt(value) {\n  if ([\"string\", \"number\"].includes(typeof value) && !Number.isInteger(Number(value))) {\n    throw new Error(`Expected value to be an integer to convert to a bigint, got ${value} of type ${typeof value}`);\n  }\n  if (value instanceof Uint8Array) {\n    return BigInt(uint8ArrayToHex(value));\n  }\n  return BigInt(value);\n}\nexport const replaceBigInts = (obj, replacer) => {\n  if (typeof obj === \"bigint\") return replacer(obj);\n  if (Array.isArray(obj)) return obj.map(x => replaceBigInts(x, replacer));\n  if (obj && typeof obj === \"object\") return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, replaceBigInts(v, replacer)]));\n  return obj;\n};\n//# sourceMappingURL=bigint.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}