{"ast":null,"code":"const t = 0,\n  e = 1,\n  n = 2,\n  i = 3,\n  s = 0,\n  a = 0,\n  r = 2,\n  o = 0,\n  l = 1,\n  f = 160,\n  U = 161,\n  c = 162,\n  h = 163,\n  _ = 0,\n  p = 1,\n  g = 0,\n  y = 1,\n  x = 2,\n  u = 3,\n  b = 4,\n  d = 5,\n  m = 6,\n  w = 7,\n  D = 8,\n  B = 9,\n  L = 10,\n  A = 11,\n  k = 12,\n  v = 13,\n  S = 14,\n  I = 15,\n  O = 16,\n  T = 17,\n  V = 18,\n  E = 0,\n  F = 1,\n  P = 2,\n  C = 3,\n  z = 4,\n  M = 5,\n  W = 6,\n  N = 7,\n  H = 8,\n  K = 9,\n  X = 10,\n  j = 11,\n  R = 0,\n  Y = 1,\n  q = 2,\n  G = 13,\n  J = 14,\n  Q = 15,\n  Z = 128,\n  $ = 64,\n  tt = 32,\n  et = 16,\n  nt = 0,\n  it = 1,\n  st = 2,\n  at = 3,\n  rt = 4,\n  ot = 5,\n  lt = 6,\n  ft = 7,\n  Ut = 8,\n  ct = 9,\n  ht = 10,\n  _t = 13,\n  pt = 14,\n  gt = 15,\n  yt = 16,\n  xt = 17,\n  ut = 20,\n  bt = 21,\n  dt = 22,\n  mt = 23,\n  wt = 24,\n  Dt = 27,\n  Bt = 28,\n  Lt = 29,\n  At = 30,\n  kt = 31,\n  vt = 34,\n  St = 35,\n  It = 36,\n  Ot = 37,\n  Tt = 38,\n  Vt = 41,\n  Et = 42,\n  Ft = 43,\n  Pt = 44,\n  Ct = 45,\n  zt = 48,\n  Mt = 49,\n  Wt = 50,\n  Nt = 58,\n  Ht = 59,\n  Kt = 62,\n  Xt = 63,\n  jt = 64,\n  Rt = 65,\n  Yt = 68,\n  qt = 69,\n  Gt = 70,\n  Jt = 71,\n  Qt = 74,\n  Zt = 75,\n  $t = 76,\n  te = 77,\n  ee = 78,\n  ne = 81,\n  ie = 82,\n  se = 83,\n  ae = 84,\n  re = 85,\n  oe = 88,\n  le = 89,\n  fe = 90,\n  Ue = 91,\n  ce = 92,\n  he = 95,\n  _e = 96,\n  pe = 97,\n  ge = 98,\n  ye = 99,\n  xe = 100,\n  ue = 101,\n  be = 102,\n  de = 103,\n  me = 104,\n  we = 105,\n  De = 106,\n  Be = 107,\n  Le = 108,\n  Ae = 109,\n  ke = 110,\n  ve = 111,\n  Se = 112,\n  Ie = 113,\n  Oe = 114,\n  Te = 115,\n  Ve = 116,\n  Ee = 117,\n  Fe = 118,\n  Pe = 119,\n  Ce = 120,\n  ze = 121,\n  Me = 122,\n  We = 123,\n  Ne = 124,\n  He = 125,\n  Ke = 126,\n  Xe = 127,\n  je = 128,\n  Re = 129,\n  Ye = 130,\n  qe = 131,\n  Ge = 132,\n  Je = 133,\n  Qe = 134,\n  Ze = 135,\n  $e = 136,\n  tn = 137,\n  en = 138,\n  nn = 139,\n  sn = 140,\n  an = 141,\n  rn = 142,\n  on = 143,\n  ln = 144,\n  fn = 145,\n  Un = 146,\n  cn = 147,\n  hn = 148,\n  _n = 149,\n  pn = 150,\n  gn = 151,\n  yn = 152,\n  xn = 153,\n  un = 154,\n  bn = 155,\n  dn = 156,\n  mn = 157,\n  wn = 158,\n  Dn = 159,\n  Bn = 160,\n  Ln = 161,\n  An = 162,\n  kn = 163,\n  vn = 164,\n  Sn = 165,\n  In = 166,\n  On = 167,\n  Tn = 168,\n  Vn = 169,\n  En = 170,\n  Fn = 171,\n  Pn = 172,\n  Cn = 173,\n  zn = 174,\n  Mn = 175,\n  Wn = 176,\n  Nn = 177,\n  Hn = 178,\n  Kn = 179,\n  Xn = 180,\n  jn = 181,\n  Rn = 182,\n  Yn = 183,\n  qn = 184,\n  Gn = 1000156007,\n  Jn = 1000156008,\n  Qn = 1000156009,\n  Zn = 1000156010,\n  $n = 1000156011,\n  ti = 1000156017,\n  ei = 1000156018,\n  ni = 1000156019,\n  ii = 1000156020,\n  si = 1000156021,\n  ai = 1000054e3,\n  ri = 1000054001,\n  oi = 1000054002,\n  li = 1000054003,\n  fi = 1000054004,\n  Ui = 1000054005,\n  ci = 1000054006,\n  hi = 1000054007,\n  _i = 1000066e3,\n  pi = 1000066001,\n  gi = 1000066002,\n  yi = 1000066003,\n  xi = 1000066004,\n  ui = 1000066005,\n  bi = 1000066006,\n  di = 1000066007,\n  mi = 1000066008,\n  wi = 1000066009,\n  Di = 1000066010,\n  Bi = 1000066011,\n  Li = 1000066012,\n  Ai = 1000066013,\n  ki = 100034e4,\n  vi = 1000340001;\nclass Si {\n  constructor() {\n    this.vkFormat = 0, this.typeSize = 1, this.pixelWidth = 0, this.pixelHeight = 0, this.pixelDepth = 0, this.layerCount = 0, this.faceCount = 1, this.supercompressionScheme = 0, this.levels = [], this.dataFormatDescriptor = [{\n      vendorId: 0,\n      descriptorType: 0,\n      descriptorBlockSize: 0,\n      versionNumber: 2,\n      colorModel: 0,\n      colorPrimaries: 1,\n      transferFunction: 2,\n      flags: 0,\n      texelBlockDimension: [0, 0, 0, 0],\n      bytesPlane: [0, 0, 0, 0, 0, 0, 0, 0],\n      samples: []\n    }], this.keyValue = {}, this.globalData = null;\n  }\n}\nclass Ii {\n  constructor(t, e, n, i) {\n    this._dataView = new DataView(t.buffer, t.byteOffset + e, n), this._littleEndian = i, this._offset = 0;\n  }\n  _nextUint8() {\n    const t = this._dataView.getUint8(this._offset);\n    return this._offset += 1, t;\n  }\n  _nextUint16() {\n    const t = this._dataView.getUint16(this._offset, this._littleEndian);\n    return this._offset += 2, t;\n  }\n  _nextUint32() {\n    const t = this._dataView.getUint32(this._offset, this._littleEndian);\n    return this._offset += 4, t;\n  }\n  _nextUint64() {\n    const t = this._dataView.getUint32(this._offset, this._littleEndian) + 2 ** 32 * this._dataView.getUint32(this._offset + 4, this._littleEndian);\n    return this._offset += 8, t;\n  }\n  _nextInt32() {\n    const t = this._dataView.getInt32(this._offset, this._littleEndian);\n    return this._offset += 4, t;\n  }\n  _skip(t) {\n    return this._offset += t, this;\n  }\n  _scan(t, e = 0) {\n    const n = this._offset;\n    let i = 0;\n    for (; this._dataView.getUint8(this._offset) !== e && i < t;) i++, this._offset++;\n    return i < t && this._offset++, new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + n, i);\n  }\n}\nconst Oi = new Uint8Array([0]),\n  Ti = [171, 75, 84, 88, 32, 50, 48, 187, 13, 10, 26, 10];\nfunction Vi(t) {\n  return \"undefined\" != typeof TextEncoder ? new TextEncoder().encode(t) : Buffer.from(t);\n}\nfunction Ei(t) {\n  return \"undefined\" != typeof TextDecoder ? new TextDecoder().decode(t) : Buffer.from(t).toString(\"utf8\");\n}\nfunction Fi(t) {\n  let e = 0;\n  for (const n of t) e += n.byteLength;\n  const n = new Uint8Array(e);\n  let i = 0;\n  for (const e of t) n.set(new Uint8Array(e), i), i += e.byteLength;\n  return n;\n}\nfunction Pi(t) {\n  const e = new Uint8Array(t.buffer, t.byteOffset, Ti.length);\n  if (e[0] !== Ti[0] || e[1] !== Ti[1] || e[2] !== Ti[2] || e[3] !== Ti[3] || e[4] !== Ti[4] || e[5] !== Ti[5] || e[6] !== Ti[6] || e[7] !== Ti[7] || e[8] !== Ti[8] || e[9] !== Ti[9] || e[10] !== Ti[10] || e[11] !== Ti[11]) throw new Error(\"Missing KTX 2.0 identifier.\");\n  const n = new Si(),\n    i = 17 * Uint32Array.BYTES_PER_ELEMENT,\n    s = new Ii(t, Ti.length, i, !0);\n  n.vkFormat = s._nextUint32(), n.typeSize = s._nextUint32(), n.pixelWidth = s._nextUint32(), n.pixelHeight = s._nextUint32(), n.pixelDepth = s._nextUint32(), n.layerCount = s._nextUint32(), n.faceCount = s._nextUint32();\n  const a = s._nextUint32();\n  n.supercompressionScheme = s._nextUint32();\n  const r = s._nextUint32(),\n    o = s._nextUint32(),\n    l = s._nextUint32(),\n    f = s._nextUint32(),\n    U = s._nextUint64(),\n    c = s._nextUint64(),\n    h = new Ii(t, Ti.length + i, 3 * a * 8, !0);\n  for (let e = 0; e < a; e++) n.levels.push({\n    levelData: new Uint8Array(t.buffer, t.byteOffset + h._nextUint64(), h._nextUint64()),\n    uncompressedByteLength: h._nextUint64()\n  });\n  const _ = new Ii(t, r, o, !0),\n    p = {\n      vendorId: _._skip(4)._nextUint16(),\n      descriptorType: _._nextUint16(),\n      versionNumber: _._nextUint16(),\n      descriptorBlockSize: _._nextUint16(),\n      colorModel: _._nextUint8(),\n      colorPrimaries: _._nextUint8(),\n      transferFunction: _._nextUint8(),\n      flags: _._nextUint8(),\n      texelBlockDimension: [_._nextUint8(), _._nextUint8(), _._nextUint8(), _._nextUint8()],\n      bytesPlane: [_._nextUint8(), _._nextUint8(), _._nextUint8(), _._nextUint8(), _._nextUint8(), _._nextUint8(), _._nextUint8(), _._nextUint8()],\n      samples: []\n    },\n    g = (p.descriptorBlockSize / 4 - 6) / 4;\n  for (let t = 0; t < g; t++) {\n    const e = {\n      bitOffset: _._nextUint16(),\n      bitLength: _._nextUint8(),\n      channelType: _._nextUint8(),\n      samplePosition: [_._nextUint8(), _._nextUint8(), _._nextUint8(), _._nextUint8()],\n      sampleLower: -Infinity,\n      sampleUpper: Infinity\n    };\n    64 & e.channelType ? (e.sampleLower = _._nextInt32(), e.sampleUpper = _._nextInt32()) : (e.sampleLower = _._nextUint32(), e.sampleUpper = _._nextUint32()), p.samples[t] = e;\n  }\n  n.dataFormatDescriptor.length = 0, n.dataFormatDescriptor.push(p);\n  const y = new Ii(t, l, f, !0);\n  for (; y._offset < f;) {\n    const t = y._nextUint32(),\n      e = y._scan(t),\n      i = Ei(e),\n      s = y._scan(t - e.byteLength);\n    n.keyValue[i] = i.match(/^ktx/i) ? Ei(s) : s, y._offset % 4 && y._skip(4 - y._offset % 4);\n  }\n  if (c <= 0) return n;\n  const x = new Ii(t, U, c, !0),\n    u = x._nextUint16(),\n    b = x._nextUint16(),\n    d = x._nextUint32(),\n    m = x._nextUint32(),\n    w = x._nextUint32(),\n    D = x._nextUint32(),\n    B = [];\n  for (let t = 0; t < a; t++) B.push({\n    imageFlags: x._nextUint32(),\n    rgbSliceByteOffset: x._nextUint32(),\n    rgbSliceByteLength: x._nextUint32(),\n    alphaSliceByteOffset: x._nextUint32(),\n    alphaSliceByteLength: x._nextUint32()\n  });\n  const L = U + x._offset,\n    A = L + d,\n    k = A + m,\n    v = k + w,\n    S = new Uint8Array(t.buffer, t.byteOffset + L, d),\n    I = new Uint8Array(t.buffer, t.byteOffset + A, m),\n    O = new Uint8Array(t.buffer, t.byteOffset + k, w),\n    T = new Uint8Array(t.buffer, t.byteOffset + v, D);\n  return n.globalData = {\n    endpointCount: u,\n    selectorCount: b,\n    imageDescs: B,\n    endpointsData: S,\n    selectorsData: I,\n    tablesData: O,\n    extendedData: T\n  }, n;\n}\nfunction Ci() {\n  return (Ci = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n      for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);\n    }\n    return t;\n  }).apply(this, arguments);\n}\nconst zi = {\n  keepWriter: !1\n};\nfunction Mi(t, e = {}) {\n  e = Ci({}, zi, e);\n  let n = new ArrayBuffer(0);\n  if (t.globalData) {\n    const e = new ArrayBuffer(20 + 5 * t.globalData.imageDescs.length * 4),\n      i = new DataView(e);\n    i.setUint16(0, t.globalData.endpointCount, !0), i.setUint16(2, t.globalData.selectorCount, !0), i.setUint32(4, t.globalData.endpointsData.byteLength, !0), i.setUint32(8, t.globalData.selectorsData.byteLength, !0), i.setUint32(12, t.globalData.tablesData.byteLength, !0), i.setUint32(16, t.globalData.extendedData.byteLength, !0);\n    for (let e = 0; e < t.globalData.imageDescs.length; e++) {\n      const n = t.globalData.imageDescs[e];\n      i.setUint32(20 + 5 * e * 4 + 0, n.imageFlags, !0), i.setUint32(20 + 5 * e * 4 + 4, n.rgbSliceByteOffset, !0), i.setUint32(20 + 5 * e * 4 + 8, n.rgbSliceByteLength, !0), i.setUint32(20 + 5 * e * 4 + 12, n.alphaSliceByteOffset, !0), i.setUint32(20 + 5 * e * 4 + 16, n.alphaSliceByteLength, !0);\n    }\n    n = Fi([e, t.globalData.endpointsData, t.globalData.selectorsData, t.globalData.tablesData, t.globalData.extendedData]);\n  }\n  const i = [];\n  let s = t.keyValue;\n  e.keepWriter || (s = Ci({}, t.keyValue, {\n    KTXwriter: \"KTX-Parse v0.3.1\"\n  }));\n  for (const t in s) {\n    const e = s[t],\n      n = Vi(t),\n      a = \"string\" == typeof e ? Vi(e) : e,\n      r = n.byteLength + 1 + a.byteLength + 1,\n      o = r % 4 ? 4 - r % 4 : 0;\n    i.push(Fi([new Uint32Array([r]), n, Oi, a, Oi, new Uint8Array(o).fill(0)]));\n  }\n  const a = Fi(i);\n  if (1 !== t.dataFormatDescriptor.length || 0 !== t.dataFormatDescriptor[0].descriptorType) throw new Error(\"Only BASICFORMAT Data Format Descriptor output supported.\");\n  const r = t.dataFormatDescriptor[0],\n    o = new ArrayBuffer(28 + 16 * r.samples.length),\n    l = new DataView(o),\n    f = 24 + 16 * r.samples.length;\n  if (l.setUint32(0, o.byteLength, !0), l.setUint16(4, r.vendorId, !0), l.setUint16(6, r.descriptorType, !0), l.setUint16(8, r.versionNumber, !0), l.setUint16(10, f, !0), l.setUint8(12, r.colorModel), l.setUint8(13, r.colorPrimaries), l.setUint8(14, r.transferFunction), l.setUint8(15, r.flags), !Array.isArray(r.texelBlockDimension)) throw new Error(\"texelBlockDimension is now an array. For dimensionality `d`, set `d - 1`.\");\n  l.setUint8(16, r.texelBlockDimension[0]), l.setUint8(17, r.texelBlockDimension[1]), l.setUint8(18, r.texelBlockDimension[2]), l.setUint8(19, r.texelBlockDimension[3]);\n  for (let t = 0; t < 8; t++) l.setUint8(20 + t, r.bytesPlane[t]);\n  for (let t = 0; t < r.samples.length; t++) {\n    const e = r.samples[t],\n      n = 28 + 16 * t;\n    if (e.channelID) throw new Error(\"channelID has been renamed to channelType.\");\n    l.setUint16(n + 0, e.bitOffset, !0), l.setUint8(n + 2, e.bitLength), l.setUint8(n + 3, e.channelType), l.setUint8(n + 4, e.samplePosition[0]), l.setUint8(n + 5, e.samplePosition[1]), l.setUint8(n + 6, e.samplePosition[2]), l.setUint8(n + 7, e.samplePosition[3]), 64 & e.channelType ? (l.setInt32(n + 8, e.sampleLower, !0), l.setInt32(n + 12, e.sampleUpper, !0)) : (l.setUint32(n + 8, e.sampleLower, !0), l.setUint32(n + 12, e.sampleUpper, !0));\n  }\n  const U = Ti.length + 68 + 3 * t.levels.length * 8,\n    c = U + o.byteLength;\n  let h = n.byteLength > 0 ? c + a.byteLength : 0;\n  h % 8 && (h += 8 - h % 8);\n  const _ = [],\n    p = new DataView(new ArrayBuffer(3 * t.levels.length * 8));\n  let g = (h || c + a.byteLength) + n.byteLength;\n  for (let e = 0; e < t.levels.length; e++) {\n    const n = t.levels[e];\n    _.push(n.levelData), p.setBigUint64(24 * e + 0, BigInt(g), !0), p.setBigUint64(24 * e + 8, BigInt(n.levelData.byteLength), !0), p.setBigUint64(24 * e + 16, BigInt(n.uncompressedByteLength), !0), g += n.levelData.byteLength;\n  }\n  const y = new ArrayBuffer(68),\n    x = new DataView(y);\n  return x.setUint32(0, t.vkFormat, !0), x.setUint32(4, t.typeSize, !0), x.setUint32(8, t.pixelWidth, !0), x.setUint32(12, t.pixelHeight, !0), x.setUint32(16, t.pixelDepth, !0), x.setUint32(20, t.layerCount, !0), x.setUint32(24, t.faceCount, !0), x.setUint32(28, t.levels.length, !0), x.setUint32(32, t.supercompressionScheme, !0), x.setUint32(36, U, !0), x.setUint32(40, o.byteLength, !0), x.setUint32(44, c, !0), x.setUint32(48, a.byteLength, !0), x.setBigUint64(52, BigInt(n.byteLength > 0 ? h : 0), !0), x.setBigUint64(60, BigInt(n.byteLength), !0), new Uint8Array(Fi([new Uint8Array(Ti).buffer, y, p.buffer, o, a, h > 0 ? new ArrayBuffer(h - (c + a.byteLength)) : new ArrayBuffer(0), n, ..._]));\n}\nexport { Q as KHR_DF_CHANNEL_RGBSDA_ALPHA, q as KHR_DF_CHANNEL_RGBSDA_BLUE, J as KHR_DF_CHANNEL_RGBSDA_DEPTH, Y as KHR_DF_CHANNEL_RGBSDA_GREEN, R as KHR_DF_CHANNEL_RGBSDA_RED, G as KHR_DF_CHANNEL_RGBSDA_STENCIL, p as KHR_DF_FLAG_ALPHA_PREMULTIPLIED, _ as KHR_DF_FLAG_ALPHA_STRAIGHT, s as KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT, c as KHR_DF_MODEL_ASTC, f as KHR_DF_MODEL_ETC1, h as KHR_DF_MODEL_ETC1S, U as KHR_DF_MODEL_ETC2, l as KHR_DF_MODEL_RGBSDA, o as KHR_DF_MODEL_UNSPECIFIED, W as KHR_DF_PRIMARIES_ACES, N as KHR_DF_PRIMARIES_ACESCC, j as KHR_DF_PRIMARIES_ADOBERGB, z as KHR_DF_PRIMARIES_BT2020, P as KHR_DF_PRIMARIES_BT601_EBU, C as KHR_DF_PRIMARIES_BT601_SMPTE, F as KHR_DF_PRIMARIES_BT709, M as KHR_DF_PRIMARIES_CIEXYZ, X as KHR_DF_PRIMARIES_DISPLAYP3, H as KHR_DF_PRIMARIES_NTSC1953, K as KHR_DF_PRIMARIES_PAL525, E as KHR_DF_PRIMARIES_UNSPECIFIED, tt as KHR_DF_SAMPLE_DATATYPE_EXPONENT, Z as KHR_DF_SAMPLE_DATATYPE_FLOAT, et as KHR_DF_SAMPLE_DATATYPE_LINEAR, $ as KHR_DF_SAMPLE_DATATYPE_SIGNED, O as KHR_DF_TRANSFER_ACESCC, T as KHR_DF_TRANSFER_ACESCCT, V as KHR_DF_TRANSFER_ADOBERGB, w as KHR_DF_TRANSFER_BT1886, k as KHR_DF_TRANSFER_DCIP3, B as KHR_DF_TRANSFER_HLG_EOTF, D as KHR_DF_TRANSFER_HLG_OETF, u as KHR_DF_TRANSFER_ITU, y as KHR_DF_TRANSFER_LINEAR, b as KHR_DF_TRANSFER_NTSC, S as KHR_DF_TRANSFER_PAL625_EOTF, v as KHR_DF_TRANSFER_PAL_OETF, L as KHR_DF_TRANSFER_PQ_EOTF, A as KHR_DF_TRANSFER_PQ_OETF, d as KHR_DF_TRANSFER_SLOG, m as KHR_DF_TRANSFER_SLOG2, x as KHR_DF_TRANSFER_SRGB, I as KHR_DF_TRANSFER_ST240, g as KHR_DF_TRANSFER_UNSPECIFIED, a as KHR_DF_VENDORID_KHRONOS, r as KHR_DF_VERSION, e as KHR_SUPERCOMPRESSION_BASISLZ, t as KHR_SUPERCOMPRESSION_NONE, i as KHR_SUPERCOMPRESSION_ZLIB, n as KHR_SUPERCOMPRESSION_ZSTD, Si as KTX2Container, Ut as VK_FORMAT_A1R5G5B5_UNORM_PACK16, qt as VK_FORMAT_A2B10G10R10_SINT_PACK32, Rt as VK_FORMAT_A2B10G10R10_SNORM_PACK32, Yt as VK_FORMAT_A2B10G10R10_UINT_PACK32, jt as VK_FORMAT_A2B10G10R10_UNORM_PACK32, Xt as VK_FORMAT_A2R10G10B10_SINT_PACK32, Ht as VK_FORMAT_A2R10G10B10_SNORM_PACK32, Kt as VK_FORMAT_A2R10G10B10_UINT_PACK32, Nt as VK_FORMAT_A2R10G10B10_UNORM_PACK32, vi as VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT, ki as VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT, Bi as VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT, Xn as VK_FORMAT_ASTC_10x10_SRGB_BLOCK, Kn as VK_FORMAT_ASTC_10x10_UNORM_BLOCK, mi as VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT, zn as VK_FORMAT_ASTC_10x5_SRGB_BLOCK, Cn as VK_FORMAT_ASTC_10x5_UNORM_BLOCK, wi as VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT, Wn as VK_FORMAT_ASTC_10x6_SRGB_BLOCK, Mn as VK_FORMAT_ASTC_10x6_UNORM_BLOCK, Di as VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT, Hn as VK_FORMAT_ASTC_10x8_SRGB_BLOCK, Nn as VK_FORMAT_ASTC_10x8_UNORM_BLOCK, Li as VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT, Rn as VK_FORMAT_ASTC_12x10_SRGB_BLOCK, jn as VK_FORMAT_ASTC_12x10_UNORM_BLOCK, Ai as VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT, qn as VK_FORMAT_ASTC_12x12_SRGB_BLOCK, Yn as VK_FORMAT_ASTC_12x12_UNORM_BLOCK, _i as VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT, wn as VK_FORMAT_ASTC_4x4_SRGB_BLOCK, mn as VK_FORMAT_ASTC_4x4_UNORM_BLOCK, pi as VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT, Bn as VK_FORMAT_ASTC_5x4_SRGB_BLOCK, Dn as VK_FORMAT_ASTC_5x4_UNORM_BLOCK, gi as VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT, An as VK_FORMAT_ASTC_5x5_SRGB_BLOCK, Ln as VK_FORMAT_ASTC_5x5_UNORM_BLOCK, yi as VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT, vn as VK_FORMAT_ASTC_6x5_SRGB_BLOCK, kn as VK_FORMAT_ASTC_6x5_UNORM_BLOCK, xi as VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT, In as VK_FORMAT_ASTC_6x6_SRGB_BLOCK, Sn as VK_FORMAT_ASTC_6x6_UNORM_BLOCK, ui as VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT, Tn as VK_FORMAT_ASTC_8x5_SRGB_BLOCK, On as VK_FORMAT_ASTC_8x5_UNORM_BLOCK, bi as VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT, En as VK_FORMAT_ASTC_8x6_SRGB_BLOCK, Vn as VK_FORMAT_ASTC_8x6_UNORM_BLOCK, di as VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT, Pn as VK_FORMAT_ASTC_8x8_SRGB_BLOCK, Fn as VK_FORMAT_ASTC_8x8_UNORM_BLOCK, Me as VK_FORMAT_B10G11R11_UFLOAT_PACK32, $n as VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16, si as VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16, at as VK_FORMAT_B4G4R4A4_UNORM_PACK16, ft as VK_FORMAT_B5G5R5A1_UNORM_PACK16, ot as VK_FORMAT_B5G6R5_UNORM_PACK16, Mt as VK_FORMAT_B8G8R8A8_SINT, Ct as VK_FORMAT_B8G8R8A8_SNORM, Wt as VK_FORMAT_B8G8R8A8_SRGB, zt as VK_FORMAT_B8G8R8A8_UINT, Pt as VK_FORMAT_B8G8R8A8_UNORM, St as VK_FORMAT_B8G8R8_SINT, kt as VK_FORMAT_B8G8R8_SNORM, It as VK_FORMAT_B8G8R8_SRGB, vt as VK_FORMAT_B8G8R8_UINT, At as VK_FORMAT_B8G8R8_UNORM, Qe as VK_FORMAT_BC1_RGBA_SRGB_BLOCK, Je as VK_FORMAT_BC1_RGBA_UNORM_BLOCK, Ge as VK_FORMAT_BC1_RGB_SRGB_BLOCK, qe as VK_FORMAT_BC1_RGB_UNORM_BLOCK, $e as VK_FORMAT_BC2_SRGB_BLOCK, Ze as VK_FORMAT_BC2_UNORM_BLOCK, en as VK_FORMAT_BC3_SRGB_BLOCK, tn as VK_FORMAT_BC3_UNORM_BLOCK, sn as VK_FORMAT_BC4_SNORM_BLOCK, nn as VK_FORMAT_BC4_UNORM_BLOCK, rn as VK_FORMAT_BC5_SNORM_BLOCK, an as VK_FORMAT_BC5_UNORM_BLOCK, ln as VK_FORMAT_BC6H_SFLOAT_BLOCK, on as VK_FORMAT_BC6H_UFLOAT_BLOCK, Un as VK_FORMAT_BC7_SRGB_BLOCK, fn as VK_FORMAT_BC7_UNORM_BLOCK, Ne as VK_FORMAT_D16_UNORM, je as VK_FORMAT_D16_UNORM_S8_UINT, Re as VK_FORMAT_D24_UNORM_S8_UINT, Ke as VK_FORMAT_D32_SFLOAT, Ye as VK_FORMAT_D32_SFLOAT_S8_UINT, We as VK_FORMAT_E5B9G9R9_UFLOAT_PACK32, dn as VK_FORMAT_EAC_R11G11_SNORM_BLOCK, bn as VK_FORMAT_EAC_R11G11_UNORM_BLOCK, un as VK_FORMAT_EAC_R11_SNORM_BLOCK, xn as VK_FORMAT_EAC_R11_UNORM_BLOCK, pn as VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, _n as VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, yn as VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, gn as VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, hn as VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, cn as VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, Zn as VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16, ii as VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16, fi as VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG, ai as VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, Ui as VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG, ri as VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG, ci as VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG, oi as VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG, hi as VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG, li as VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG, Qn as VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16, Jn as VK_FORMAT_R10X6G10X6_UNORM_2PACK16, Gn as VK_FORMAT_R10X6_UNORM_PACK16, ni as VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16, ei as VK_FORMAT_R12X4G12X4_UNORM_2PACK16, ti as VK_FORMAT_R12X4_UNORM_PACK16, pe as VK_FORMAT_R16G16B16A16_SFLOAT, _e as VK_FORMAT_R16G16B16A16_SINT, ce as VK_FORMAT_R16G16B16A16_SNORM, he as VK_FORMAT_R16G16B16A16_UINT, Ue as VK_FORMAT_R16G16B16A16_UNORM, fe as VK_FORMAT_R16G16B16_SFLOAT, le as VK_FORMAT_R16G16B16_SINT, re as VK_FORMAT_R16G16B16_SNORM, oe as VK_FORMAT_R16G16B16_UINT, ae as VK_FORMAT_R16G16B16_UNORM, se as VK_FORMAT_R16G16_SFLOAT, ie as VK_FORMAT_R16G16_SINT, ee as VK_FORMAT_R16G16_SNORM, ne as VK_FORMAT_R16G16_UINT, te as VK_FORMAT_R16G16_UNORM, $t as VK_FORMAT_R16_SFLOAT, Zt as VK_FORMAT_R16_SINT, Jt as VK_FORMAT_R16_SNORM, Qt as VK_FORMAT_R16_UINT, Gt as VK_FORMAT_R16_UNORM, Ae as VK_FORMAT_R32G32B32A32_SFLOAT, Le as VK_FORMAT_R32G32B32A32_SINT, Be as VK_FORMAT_R32G32B32A32_UINT, De as VK_FORMAT_R32G32B32_SFLOAT, we as VK_FORMAT_R32G32B32_SINT, me as VK_FORMAT_R32G32B32_UINT, de as VK_FORMAT_R32G32_SFLOAT, be as VK_FORMAT_R32G32_SINT, ue as VK_FORMAT_R32G32_UINT, xe as VK_FORMAT_R32_SFLOAT, ye as VK_FORMAT_R32_SINT, ge as VK_FORMAT_R32_UINT, st as VK_FORMAT_R4G4B4A4_UNORM_PACK16, it as VK_FORMAT_R4G4_UNORM_PACK8, lt as VK_FORMAT_R5G5B5A1_UNORM_PACK16, rt as VK_FORMAT_R5G6B5_UNORM_PACK16, ze as VK_FORMAT_R64G64B64A64_SFLOAT, Ce as VK_FORMAT_R64G64B64A64_SINT, Pe as VK_FORMAT_R64G64B64A64_UINT, Fe as VK_FORMAT_R64G64B64_SFLOAT, Ee as VK_FORMAT_R64G64B64_SINT, Ve as VK_FORMAT_R64G64B64_UINT, Te as VK_FORMAT_R64G64_SFLOAT, Oe as VK_FORMAT_R64G64_SINT, Ie as VK_FORMAT_R64G64_UINT, Se as VK_FORMAT_R64_SFLOAT, ve as VK_FORMAT_R64_SINT, ke as VK_FORMAT_R64_UINT, Et as VK_FORMAT_R8G8B8A8_SINT, Tt as VK_FORMAT_R8G8B8A8_SNORM, Ft as VK_FORMAT_R8G8B8A8_SRGB, Vt as VK_FORMAT_R8G8B8A8_UINT, Ot as VK_FORMAT_R8G8B8A8_UNORM, Bt as VK_FORMAT_R8G8B8_SINT, wt as VK_FORMAT_R8G8B8_SNORM, Lt as VK_FORMAT_R8G8B8_SRGB, Dt as VK_FORMAT_R8G8B8_UINT, mt as VK_FORMAT_R8G8B8_UNORM, bt as VK_FORMAT_R8G8_SINT, xt as VK_FORMAT_R8G8_SNORM, dt as VK_FORMAT_R8G8_SRGB, ut as VK_FORMAT_R8G8_UINT, yt as VK_FORMAT_R8G8_UNORM, pt as VK_FORMAT_R8_SINT, ht as VK_FORMAT_R8_SNORM, gt as VK_FORMAT_R8_SRGB, _t as VK_FORMAT_R8_UINT, ct as VK_FORMAT_R8_UNORM, Xe as VK_FORMAT_S8_UINT, nt as VK_FORMAT_UNDEFINED, He as VK_FORMAT_X8_D24_UNORM_PACK32, Pi as read, Mi as write };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}