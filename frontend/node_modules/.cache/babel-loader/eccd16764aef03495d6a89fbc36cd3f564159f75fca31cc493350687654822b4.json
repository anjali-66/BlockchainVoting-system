{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useSelectionData, useSetSelectionData } from \"../../providers/wallet-ui-states-provider.js\";\nimport { useScreenContext } from \"../../ui/ConnectWallet/Modal/screen.js\";\nimport { GuestLogin } from \"../shared/GuestLogin.js\";\nimport { LoadingScreen } from \"../shared/LoadingScreen.js\";\nimport { OTPLoginUI } from \"../shared/OTPLoginUI.js\";\nimport { PassKeyLogin } from \"../shared/PassKeyLogin.js\";\nimport { SocialLogin } from \"../shared/SocialLogin.js\";\nimport { InAppWalletFormUIScreen } from \"./InAppWalletFormUI.js\";\nimport { WalletAuth } from \"./WalletAuth.js\";\nimport { useInAppWalletLocale } from \"./useInAppWalletLocale.js\";\n/**\n *\n * @internal\n */\nfunction InAppWalletConnectUI(props) {\n  const data = useSelectionData();\n  const setSelectionData = useSetSelectionData();\n  const state = data;\n  const localeId = props.connectLocale.id;\n  const locale = useInAppWalletLocale(localeId);\n  const {\n    initialScreen\n  } = useScreenContext();\n  if (!locale) {\n    return _jsx(LoadingScreen, {});\n  }\n  // if the the modal starts out with the wallet's connect ui instead of wallet selector - going back to main screen requires staying on the same component and clearing the selection data\n  // otherwise, we go back to the wallet selector by calling props.goBack\n  const goBackToMain = () => {\n    if (initialScreen === props.wallet) {\n      setSelectionData({});\n    } else {\n      props.goBack?.();\n      setSelectionData({});\n    }\n  };\n  const done = () => {\n    props.done();\n    setSelectionData({});\n  };\n  const otpUserInfo = state?.emailLogin ? {\n    email: state.emailLogin\n  } : state?.phoneLogin ? {\n    phone: state.phoneLogin\n  } : undefined;\n  if (otpUserInfo) {\n    return _jsx(OTPLoginUI, {\n      userInfo: otpUserInfo,\n      locale: locale,\n      done: done,\n      goBack: goBackToMain,\n      wallet: props.wallet,\n      chain: props.chain,\n      client: props.client,\n      size: props.size,\n      isLinking: props.isLinking\n    });\n  }\n  if (state?.passkeyLogin) {\n    return _jsx(PassKeyLogin, {\n      locale: props.connectLocale,\n      wallet: props.wallet,\n      done: done,\n      onBack: goBackToMain,\n      chain: props.chain,\n      client: props.client,\n      size: props.size,\n      isLinking: props.isLinking\n    });\n  }\n  if (state?.walletLogin) {\n    return _jsx(WalletAuth, {\n      meta: props.meta,\n      inAppLocale: locale,\n      walletConnect: props.walletConnect,\n      wallet: props.wallet,\n      client: props.client,\n      size: props.size,\n      done: done,\n      onBack: goBackToMain || (() => setSelectionData({})),\n      locale: props.connectLocale,\n      isLinking: state.walletLogin.linking\n    });\n  }\n  if (state?.socialLogin) {\n    return _jsx(SocialLogin, {\n      socialAuth: state.socialLogin.type,\n      locale: locale,\n      done: done,\n      goBack: goBackToMain,\n      wallet: props.wallet,\n      state: state,\n      chain: props.chain,\n      client: props.client,\n      size: props.size,\n      connectLocale: props.connectLocale,\n      isLinking: props.isLinking\n    });\n  }\n  if (state?.guestLogin) {\n    return _jsx(GuestLogin, {\n      locale: locale,\n      done: done,\n      goBack: goBackToMain,\n      wallet: props.wallet,\n      state: state,\n      client: props.client,\n      size: props.size,\n      connectLocale: props.connectLocale\n    });\n  }\n  return _jsx(InAppWalletFormUIScreen, {\n    select: () => {},\n    connectLocale: props.connectLocale,\n    inAppWalletLocale: locale,\n    done: done,\n    goBack: props.goBack,\n    wallet: props.wallet,\n    client: props.client,\n    meta: props.meta,\n    size: props.size,\n    chain: props.chain,\n    isLinking: props.isLinking\n  });\n}\nexport default InAppWalletConnectUI;\n//# sourceMappingURL=InAppWalletConnectUI.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}