{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { CheckCircledIcon } from \"@radix-ui/react-icons\";\nimport { useState } from \"react\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../../../contract/contract.js\";\nimport { transfer } from \"../../../../../../../extensions/erc20/write/transfer.js\";\nimport { getBuyWithCryptoTransfer } from \"../../../../../../../pay/buyWithCrypto/getTransfer.js\";\nimport { sendAndConfirmTransaction } from \"../../../../../../../transaction/actions/send-and-confirm-transaction.js\";\nimport { sendTransaction } from \"../../../../../../../transaction/actions/send-transaction.js\";\nimport { prepareTransaction } from \"../../../../../../../transaction/prepare-transaction.js\";\nimport { toWei } from \"../../../../../../../utils/units.js\";\nimport { iconSize } from \"../../../../../../core/design-system/index.js\";\nimport { useChainSymbol } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Spinner } from \"../../../../components/Spinner.js\";\nimport { StepBar } from \"../../../../components/StepBar.js\";\nimport { SwitchNetworkButton } from \"../../../../components/SwitchNetwork.js\";\nimport { Container, Line, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { isNativeToken } from \"../../nativeToken.js\";\nimport { Step } from \"../Stepper.js\";\nimport { WalletRow } from \"../WalletSelectorButton.js\";\nimport { TokenInfoRow } from \"../pay-transactions/TokenInfoRow.js\";\nimport { ConnectorLine } from \"./ConfirmationScreen.js\";\nexport function TransferConfirmationScreen(props) {\n  const {\n    title,\n    onBack,\n    receiverAddress,\n    client,\n    payer,\n    onDone,\n    chain,\n    token,\n    tokenAmount,\n    transactionMode,\n    setTransactionHash,\n    payOptions\n  } = props;\n  const [step, setStep] = useState(\"transfer\");\n  const [status, setStatus] = useState({\n    id: \"idle\"\n  });\n  const {\n    symbol\n  } = useChainSymbol(chain);\n  return _jsxs(Container, {\n    p: \"lg\",\n    children: [_jsx(ModalHeader, {\n      title: title,\n      onBack: onBack\n    }), _jsx(Spacer, {\n      y: \"xl\"\n    }), transactionMode && _jsxs(_Fragment, {\n      children: [_jsx(StepBar, {\n        steps: 2,\n        currentStep: step === \"transfer\" ? 1 : 2\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      }), _jsx(Text, {\n        size: \"sm\",\n        children: step === \"transfer\" ? \"Step 1 of 2 - Transfer funds\" : \"Step 2 of 2 - Finalize transaction\"\n      }), _jsx(Spacer, {\n        y: \"xl\"\n      })]\n    }), _jsxs(Container, {\n      flex: \"row\",\n      center: \"y\",\n      style: {\n        justifyContent: \"space-between\"\n      },\n      children: [_jsx(Text, {\n        size: \"sm\",\n        children: \"From\"\n      }), _jsx(WalletRow, {\n        address: payer.account.address,\n        client: client\n      })]\n    }), _jsx(Spacer, {\n      y: \"md\"\n    }), _jsx(Line, {}), _jsx(Spacer, {\n      y: \"md\"\n    }), _jsxs(Container, {\n      flex: \"row\",\n      center: \"y\",\n      style: {\n        justifyContent: \"space-between\"\n      },\n      children: [_jsx(Text, {\n        size: \"sm\",\n        children: \"To\"\n      }), _jsx(WalletRow, {\n        address: receiverAddress,\n        client: client\n      })]\n    }), _jsx(Spacer, {\n      y: \"md\"\n    }), _jsx(Line, {}), _jsx(Spacer, {\n      y: \"md\"\n    }), _jsx(TokenInfoRow, {\n      chainId: chain.id,\n      client: client,\n      label: \"Amount\",\n      tokenAmount: tokenAmount,\n      tokenSymbol: isNativeToken(token) ? symbol || \"\" : token.symbol,\n      tokenAddress: isNativeToken(token) ? NATIVE_TOKEN_ADDRESS : token.address\n    }), _jsx(Spacer, {\n      y: \"lg\"\n    }), transactionMode && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"sm\"\n      }), _jsxs(Container, {\n        gap: \"sm\",\n        flex: \"row\",\n        style: {\n          justifyContent: \"space-between\"\n        },\n        center: \"y\",\n        color: \"accentText\",\n        children: [_jsx(Step, {\n          isDone: step === \"execute\",\n          isActive: step === \"transfer\",\n          label: step === \"transfer\" ? \"Transfer\" : \"Done\"\n        }), _jsx(ConnectorLine, {}), _jsx(Step, {\n          isDone: false,\n          label: \"Finalize\",\n          isActive: step === \"execute\"\n        })]\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      })]\n    }), status.id === \"error\" && _jsxs(_Fragment, {\n      children: [_jsx(Container, {\n        flex: \"row\",\n        gap: \"xs\",\n        center: \"both\",\n        color: \"danger\",\n        children: _jsx(Text, {\n          color: \"danger\",\n          size: \"sm\",\n          style: {\n            textAlign: \"center\"\n          },\n          children: step === \"transfer\" ? `${status.error || \"Failed to Transfer\"}` : \"Failed to Execute\"\n        })\n      }), _jsx(Spacer, {\n        y: \"md\"\n      })]\n    }), !transactionMode && step === \"execute\" && status.id === \"done\" && _jsxs(_Fragment, {\n      children: [_jsxs(Container, {\n        flex: \"row\",\n        gap: \"xs\",\n        center: \"both\",\n        color: \"success\",\n        children: [_jsx(CheckCircledIcon, {\n          width: iconSize.sm,\n          height: iconSize.sm\n        }), _jsx(Text, {\n          color: \"success\",\n          size: \"sm\",\n          children: \"Payment completed\"\n        })]\n      }), _jsx(Spacer, {\n        y: \"md\"\n      })]\n    }), payer.chain.id !== chain.id ? _jsx(SwitchNetworkButton, {\n      fullWidth: true,\n      variant: \"accent\",\n      switchChain: async () => {\n        await props.payer.wallet.switchChain(chain);\n      }\n    }) : _jsxs(Button, {\n      variant: \"accent\",\n      fullWidth: true,\n      disabled: status.id === \"pending\",\n      onClick: async () => {\n        if (step === \"execute\") {\n          onDone();\n          return;\n        }\n        try {\n          setStatus({\n            id: \"pending\"\n          });\n          // TRANSACTION MODE = transfer funds to another one of your wallets before executing the tx\n          if (transactionMode) {\n            const transaction = isNativeToken(token) ? prepareTransaction({\n              client,\n              chain,\n              to: receiverAddress,\n              value: toWei(tokenAmount)\n            }) : transfer({\n              contract: getContract({\n                address: token.address,\n                chain: chain,\n                client: client\n              }),\n              to: receiverAddress,\n              amount: tokenAmount\n            });\n            await sendAndConfirmTransaction({\n              account: props.payer.account,\n              transaction\n            });\n            // switch to execute step\n            setStep(\"execute\");\n            setStatus({\n              id: \"idle\"\n            });\n          } else {\n            const transferResponse = await getBuyWithCryptoTransfer({\n              client,\n              fromAddress: payer.account.address,\n              toAddress: receiverAddress,\n              chainId: chain.id,\n              tokenAddress: isNativeToken(token) ? NATIVE_TOKEN_ADDRESS : token.address,\n              amount: tokenAmount,\n              purchaseData: payOptions?.purchaseData\n            });\n            if (transferResponse.approval) {\n              setStep(\"approve\");\n              // approve the transfer\n              await sendAndConfirmTransaction({\n                account: props.payer.account,\n                transaction: transferResponse.approval\n              });\n            }\n            setStep(\"transfer\");\n            // execute the transfer\n            const transaction = transferResponse.transactionRequest;\n            const tx = await sendTransaction({\n              account: props.payer.account,\n              transaction\n            });\n            // switches to the status polling screen\n            setTransactionHash(tx.transactionHash);\n            setStatus({\n              id: \"idle\"\n            });\n          }\n          // biome-ignore lint/suspicious/noExplicitAny: catch multiple errors\n        } catch (e) {\n          console.error(e);\n          setStatus({\n            id: \"error\",\n            error: \"error\" in e ? e.error?.message : e?.message\n          });\n        }\n      },\n      gap: \"xs\",\n      children: [step === \"execute\" && (status.id === \"done\" ? \"Done\" : \"Continue\"), step === \"transfer\" && (status.id === \"pending\" ? \"Confirming\" : \"Confirm\"), step === \"approve\" && (status.id === \"pending\" ? \"Approving\" : \"Approve\"), status.id === \"pending\" && _jsx(Spinner, {\n        size: \"sm\",\n        color: \"accentButtonText\"\n      })]\n    })]\n  });\n}\n//# sourceMappingURL=TransferConfirmationScreen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}