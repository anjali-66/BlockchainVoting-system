{"ast":null,"code":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect, useMemo } from \"react\";\nimport { eth_blockNumber } from \"../../../../rpc/actions/eth_blockNumber.js\";\nimport { getRpcClient } from \"../../../../rpc/rpc.js\";\nimport { watchBlockNumber } from \"../../../../rpc/watchBlockNumber.js\";\n/**\n * Hook that watches for changes in the block number on a given chain.\n * @param options - The options for the hook.\n * @returns The latest block number.\n * @example\n * ```ts\n * import { useBlockNumber } from \"thirdweb/react\";\n * const blockNumber = useBlockNumber({client, chain});\n * ```\n * @utils\n */\nexport function useBlockNumber(options) {\n  const {\n    client,\n    chain,\n    enabled = true,\n    watch = true\n  } = options;\n  const queryClient = useQueryClient();\n  const queryKey = useMemo(() => [chain.id, \"blockNumber\"], [chain]);\n  const query = useQuery({\n    // TODO: technically client should be part of the queryKey here...\n    queryKey: queryKey,\n    queryFn: async () => {\n      const rpcRequest = getRpcClient({\n        client,\n        chain\n      });\n      return await eth_blockNumber(rpcRequest);\n    },\n    enabled\n  });\n  useEffect(() => {\n    if (!enabled || !watch) {\n      // don't watch if not enabled or not watching\n      return;\n    }\n    return watchBlockNumber({\n      client,\n      chain,\n      onNewBlockNumber: newBlockNumber => {\n        queryClient.setQueryData(queryKey, newBlockNumber);\n      }\n    });\n  }, [client, chain, enabled, queryClient, queryKey, watch]);\n  return query.data;\n}\n//# sourceMappingURL=useBlockNumber.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}