{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext } from \"react\";\nconst AccountProviderContext = /* @__PURE__ */createContext(undefined);\n/**\n * A React context provider component that supplies Account-related data to its child components.\n *\n * This component serves as a wrapper around the `AccountProviderContext.Provider` and passes\n * the provided account data down to all of its child components through the context API.\n *\n * @example\n * ```tsx\n * import { AccountProvider, AccountAvatar, AccountName, AccountAddress  } from \"thirdweb/react\";\n *\n * <AccountProvider>\n *   <AccountAvatar />\n *   <AccountName />\n *   <AccountAddress />\n * </AccountProvider>\n * ```\n *\n * @component\n * @wallet\n * @beta\n */\nexport function AccountProvider(props) {\n  if (!props.address) {\n    throw new Error(\"AccountProvider: No address passed. Ensure an address is always provided to the AccountProvider\");\n  }\n  return _jsx(AccountProviderContext.Provider, {\n    value: props,\n    children: props.children\n  });\n}\n/**\n * @internal\n */\nexport function useAccountContext() {\n  const ctx = useContext(AccountProviderContext);\n  if (!ctx) {\n    throw new Error(\"AccountProviderContext not found. Make sure you are using AccountName, AccountAvatar, etc. inside an <AccountProvider /> component\");\n  }\n  return ctx;\n}\n//# sourceMappingURL=provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}