{"ast":null,"code":"import { useMutation } from \"@tanstack/react-query\";\nimport { sendAndConfirmTransaction } from \"../../../../transaction/actions/send-and-confirm-transaction.js\";\nimport { useActiveAccount } from \"../wallets/useActiveAccount.js\";\n/**\n * A hook to send a transaction.\n * @returns A mutation object to send a transaction.\n * @example\n * ```jsx\n * import { useSendAndConfirmTransaction } from \"thirdweb/react\";\n * const { mutate: sendAndConfirmTx, data: transactionReceipt } = useSendAndConfirmTransaction();\n *\n * // later\n * sendAndConfirmTx(tx);\n * ```\n *\n *\n * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)\n * ```tsx\n * import { useSendAndConfirmTransaction } from \"thirdweb/react\";\n * const mutation = useSendAndConfirmTransaction({\n *   gasless: {\n *     provider: \"engine\",\n *     relayerUrl: \"https://thirdweb.engine-***.thirdweb.com/relayer/***\",\n *     relayerForwarderAddress: \"0x...\",\n *   }\n * });\n * ```\n *\n * ### Gasless usage with OpenZeppelin\n * ```tsx\n * import { useSendAndConfirmTransaction } from \"thirdweb/react\";\n * const mutation = useSendAndConfirmTransaction({\n *   gasless: {\n *     provider: \"openzeppelin\",\n *     relayerUrl: \"https://...\",\n *     relayerForwarderAddress: \"0x...\",\n *   }\n * });\n * ```\n * @transaction\n */\nexport function useSendAndConfirmTransaction(config = {}) {\n  const account = useActiveAccount();\n  const {\n    gasless\n  } = config;\n  return useMutation({\n    mutationFn: async transaction => {\n      if (!account) {\n        throw new Error(\"No active account\");\n      }\n      return await sendAndConfirmTransaction({\n        transaction,\n        account,\n        gasless\n      });\n    }\n  });\n}\n//# sourceMappingURL=useSendAndConfirmTransaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}