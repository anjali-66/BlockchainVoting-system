{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Filter, Wrap } from '../../three-components/gltf-instance/gltf-2.0.js';\nimport { $correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement } from './three-dom-element.js';\nconst isMinFilter = (() => {\n  const minFilterValues = [Filter.Nearest, Filter.Linear, Filter.NearestMipmapNearest, Filter.LinearMipmapLinear, Filter.NearestMipmapLinear, Filter.LinearMipmapLinear];\n  return value => minFilterValues.indexOf(value) > -1;\n})();\nconst isMagFilter = (() => {\n  const magFilterValues = [Filter.Nearest, Filter.Linear];\n  return value => magFilterValues.indexOf(value) > -1;\n})();\nconst isWrapMode = (() => {\n  const wrapModes = [Wrap.ClampToEdge, Wrap.MirroredRepeat, Wrap.Repeat];\n  return value => wrapModes.indexOf(value) > -1;\n})();\nconst isValidSamplerValue = (property, value) => {\n  switch (property) {\n    case 'minFilter':\n      return isMinFilter(value);\n    case 'magFilter':\n      return isMagFilter(value);\n    case 'wrapS':\n    case 'wrapT':\n      return isWrapMode(value);\n    default:\n      throw new Error(`Cannot configure property \"${property}\" on Sampler`);\n  }\n};\nconst $threeTextures = Symbol('threeTextures');\nconst $setProperty = Symbol('setProperty');\nconst $sourceSampler = Symbol('sourceSampler');\n/**\n * Sampler facade implementation for Three.js textures\n */\nexport class Sampler extends ThreeDOMElement {\n  get [$threeTextures]() {\n    console.assert(this[$correlatedObjects] != null && this[$correlatedObjects].size > 0, 'Sampler correlated object is undefined');\n    return this[$correlatedObjects];\n  }\n  get [$sourceSampler]() {\n    console.assert(this[$sourceObject] != null, 'Sampler source is undefined');\n    return this[$sourceObject];\n  }\n  constructor(onUpdate, texture, gltfSampler) {\n    gltfSampler = gltfSampler !== null && gltfSampler !== void 0 ? gltfSampler : {};\n    // These defaults represent a convergence of glTF defaults for wrap mode and\n    // Three.js defaults for filters. Per glTF 2.0 spec, a renderer may choose\n    // its own defaults for filters.\n    // @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-sampler\n    // @see https://threejs.org/docs/#api/en/textures/Texture\n    if (gltfSampler.minFilter == null) {\n      gltfSampler.minFilter = texture ? texture.minFilter : Filter.LinearMipmapLinear;\n    }\n    if (gltfSampler.magFilter == null) {\n      gltfSampler.magFilter = texture ? texture.magFilter : Filter.Linear;\n    }\n    if (gltfSampler.wrapS == null) {\n      gltfSampler.wrapS = texture ? texture.wrapS : Wrap.Repeat;\n    }\n    if (gltfSampler.wrapT == null) {\n      gltfSampler.wrapT = texture ? texture.wrapT : Wrap.Repeat;\n    }\n    super(onUpdate, gltfSampler, new Set(texture ? [texture] : []));\n  }\n  get name() {\n    return this[$sourceObject].name || '';\n  }\n  get minFilter() {\n    return this[$sourceSampler].minFilter;\n  }\n  get magFilter() {\n    return this[$sourceSampler].magFilter;\n  }\n  get wrapS() {\n    return this[$sourceSampler].wrapS;\n  }\n  get wrapT() {\n    return this[$sourceSampler].wrapT;\n  }\n  setMinFilter(filter) {\n    this[$setProperty]('minFilter', filter);\n  }\n  setMagFilter(filter) {\n    this[$setProperty]('magFilter', filter);\n  }\n  setWrapS(mode) {\n    this[$setProperty]('wrapS', mode);\n  }\n  setWrapT(mode) {\n    this[$setProperty]('wrapT', mode);\n  }\n  [$setProperty](property, value) {\n    const sampler = this[$sourceSampler];\n    if (sampler != null) {\n      if (isValidSamplerValue(property, value)) {\n        sampler[property] = value;\n        for (const texture of this[$threeTextures]) {\n          texture[property] = value;\n          texture.needsUpdate = true;\n        }\n      }\n      this[$onUpdate]();\n    }\n  }\n}\n//# sourceMappingURL=sampler.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}