{"ast":null,"code":"import { getOrCreateInAppWalletConnector } from \"../../../core/wallet/in-app-core.js\";\n// ---- KEEP IN SYNC WITH /wallets/in-app/native/auth/index.ts ---- //\n// duplication needed for separate exports between web and native\n/**\n * @internal\n */\nasync function getInAppWalletConnector(client, ecosystem) {\n  return getOrCreateInAppWalletConnector(client, async client => {\n    const {\n      InAppWebConnector\n    } = await import(\"../web-connector.js\");\n    return new InAppWebConnector({\n      client: client,\n      ecosystem: ecosystem\n    });\n  }, ecosystem);\n}\n/**\n * Retrieves the authenticated user for the active in-app wallet.\n * @param options - The arguments for retrieving the authenticated user.\n * @returns The authenticated user if logged in and wallet initialized, otherwise undefined.\n * @example\n * ```ts\n * import { getAuthenticatedUser } from \"thirdweb/wallets/in-app\";\n *\n * const user = await getAuthenticatedUser({ client });\n * if (user) {\n *  console.log(user.walletAddress);\n * }\n * ```\n * @wallet\n */\nasync function getAuthenticatedUser(options) {\n  const {\n    client,\n    ecosystem\n  } = options;\n  const connector = await getInAppWalletConnector(client, ecosystem);\n  const user = await connector.getUser();\n  switch (user.status) {\n    case \"Logged In, Wallet Initialized\":\n      {\n        return user;\n      }\n  }\n  return undefined;\n}\n/**\n * Retrieves the authenticated user email for the active in-app wallet.\n * @param options - The arguments for retrieving the authenticated user.\n * @returns The authenticated user email if logged in and wallet initialized, otherwise undefined.\n * @example\n * ```ts\n * import { getUserEmail } from \"thirdweb/wallets/in-app\";\n *\n * const email = await getUserEmail({ client });\n * console.log(email);\n * ```\n * @wallet\n */\nexport async function getUserEmail(options) {\n  const user = await getAuthenticatedUser(options);\n  if (user && \"email\" in user.authDetails) {\n    return user.authDetails.email;\n  }\n  return undefined;\n}\n/**\n * Retrieves the authenticated user phone number for the active embedded wallet.\n * @param options - The arguments for retrieving the authenticated user.\n * @returns The authenticated user phone number if authenticated with phone number, otherwise undefined.\n * @example\n * ```ts\n * import { getUserPhoneNumber } from \"thirdweb/wallets/embedded\";\n *\n * const phoneNumber = await getUserPhoneNumber({ client });\n * console.log(phoneNumber);\n * ```\n * @wallet\n */\nexport async function getUserPhoneNumber(options) {\n  const user = await getAuthenticatedUser(options);\n  if (user && \"phoneNumber\" in user.authDetails) {\n    return user.authDetails.phoneNumber;\n  }\n  return undefined;\n}\n/**\n * Pre-authenticates the user based on the provided authentication strategy.\n * Use this function to send a verification code to the user's email or phone number.\n * @param args - The arguments required for pre-authentication.\n * @returns A promise that resolves to the pre-authentication result.\n * @throws An error if the provided authentication strategy doesn't require pre-authentication.\n * @example\n * ```ts\n * import { preAuthenticate } from \"thirdweb/wallets/in-app\";\n *\n * const result = await preAuthenticate({\n *  client,\n *  strategy: \"email\",\n *  email: \"example@example.org\",\n * });\n * ```\n * @wallet\n */\nexport async function preAuthenticate(args) {\n  const connector = await getInAppWalletConnector(args.client, args.ecosystem);\n  return connector.preAuthenticate(args);\n}\n/**\n * Authenticates the user based on the provided authentication arguments.\n * @param args - The authentication arguments.\n * @returns A promise that resolves to the authentication result.\n * @example\n * ```ts\n * import { authenticate } from \"thirdweb/wallets/in-app\";\n *\n * const result = await authenticate({\n *  client,\n *  strategy: \"email\",\n *  email: \"example@example.org\",\n *  verificationCode: \"123456\",\n * });\n * ```\n * @wallet\n */\nexport async function authenticate(args) {\n  const connector = await getInAppWalletConnector(args.client, args.ecosystem);\n  return connector.authenticate(args);\n}\n/**\n * Authenticates the user based on the provided authentication arguments using a redirect.\n * @param args - The authentication arguments.\n * @returns A promise that resolves to the authentication result.\n * @example\n * ```ts\n * import { authenticateWithRedirect } from \"thirdweb/wallets/in-app\";\n *\n * const result = await authenticateWithRedirect({\n *  client,\n *  strategy: \"google\",\n *  mode: \"redirect\",\n *  redirectUrl: \"https://example.org\",\n * });\n * ```\n * @wallet\n */\nexport async function authenticateWithRedirect(args) {\n  const connector = await getInAppWalletConnector(args.client, args.ecosystem);\n  if (!connector.authenticateWithRedirect) {\n    throw new Error(\"authenticateWithRedirect is not supported on this platform\");\n  }\n  return connector.authenticateWithRedirect(args.strategy, args.mode, args.redirectUrl);\n}\n/**\n * Connects a new profile (and new authentication method) to the current user.\n *\n * Requires a connected in-app or ecosystem account.\n *\n * **When a profile is linked to the account, that profile can then be used to sign into the same account.**\n *\n * @param auth - The authentications options to add the new profile.\n * @returns A promise that resolves to the currently linked profiles when the connection is successful.\n * @throws If the connection fails, if the profile is already linked to the account, or if the profile is already associated with another account.\n *\n * @example\n * ```ts\n * import { linkProfile } from \"thirdweb/wallets\";\n *\n * // optionally specify the ecosystem if you're linking an ecosystem wallet\n * await linkProfile({ client, strategy: \"discord\" });\n * ```\n * @wallet\n */\nexport async function linkProfile(args) {\n  const connector = await getInAppWalletConnector(args.client, args.ecosystem);\n  return await connector.linkProfile(args);\n}\n/**\n * Disconnects an existing profile (authentication method) from the current user. Once disconnected, that profile can no longer be used to sign into the account.\n *\n * @param args - The object containing the profile that we want to unlink.\n * @returns A promise that resolves to the updated linked profiles.\n * @throws If the unlinking fails. This can happen if the account has no other associated profiles or if the profile that is being unlinked doesn't exists for the current logged in user.\n *\n * @example\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n *\n * const wallet = inAppWallet();\n * wallet.connect({ strategy: \"google\" });\n *\n * const profiles = await getProfiles({\n *  client,\n * });\n *\n * const updatedProfiles = await unlinkProfile({\n *  client,\n *  profileToUnlink: profiles[0],\n * });\n * ```\n * @wallet\n */\nexport async function unlinkProfile(args) {\n  const connector = await getInAppWalletConnector(args.client, args.ecosystem);\n  return await connector.unlinkProfile(args.profileToUnlink);\n}\n/**\n * Gets the linked profiles for the connected in-app or ecosystem wallet.\n *\n * @returns An array of accounts user profiles linked to the connected wallet.\n *\n * @example\n * ```ts\n * import { getProfiles } from \"thirdweb/wallets\";\n *\n * const profiles = await getProfiles({\n *  client,\n * });\n *\n * console.log(profiles[0].type); // will be \"email\", \"phone\", \"google\", \"discord\", etc\n * console.log(profiles[0].details.email);\n * console.log(profiles[0].details.phone);\n * ```\n *\n * ### Getting profiles for a ecosystem user\n *\n * ```ts\n * import { getProfiles } from \"thirdweb/wallets/in-app\";\n *\n * const profiles = await getProfiles({\n *  client,\n *  ecosystem: {\n *    id: \"ecosystem.your-ecosystem-id\",\n *  },\n * });\n * ```\n * @wallet\n */\nexport async function getProfiles(args) {\n  const connector = await getInAppWalletConnector(args.client, args.ecosystem);\n  return connector.getProfiles();\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}