{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport styled from \"@emotion/styled\";\nimport { ChevronRightIcon, ExitIcon, PaperPlaneIcon, PinBottomIcon, PlusIcon, TextAlignJustifyIcon } from \"@radix-ui/react-icons\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { trackPayEvent } from \"../../../../analytics/track/pay.js\";\nimport { getContract } from \"../../../../contract/contract.js\";\nimport { getLastAuthProvider } from \"../../../../react/core/utils/storage.js\";\nimport { shortenAddress } from \"../../../../utils/address.js\";\nimport { isContractDeployed } from \"../../../../utils/bytecode/is-contract-deployed.js\";\nimport { webLocalStorage } from \"../../../../utils/storage/webStorage.js\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { socialAuthOptions } from \"../../../../wallets/types.js\";\nimport { CustomThemeProvider, parseTheme, useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { fontSize, iconSize, radius, spacing } from \"../../../core/design-system/index.js\";\nimport { useChainFaucets, useChainIconUrl, useChainName } from \"../../../core/hooks/others/useChainQuery.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useActiveWalletChain } from \"../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport { useAdminWallet } from \"../../../core/hooks/wallets/useAdminWallet.js\";\nimport { useDisconnect } from \"../../../core/hooks/wallets/useDisconnect.js\";\nimport { useSwitchActiveWalletChain } from \"../../../core/hooks/wallets/useSwitchActiveWalletChain.js\";\nimport { SetRootElementContext } from \"../../../core/providers/RootElementContext.js\";\nimport { hasSmartAccount } from \"../../../core/utils/isSmartWallet.js\";\nimport { useWalletInfo } from \"../../../core/utils/wallet.js\";\nimport { WalletUIStatesProvider } from \"../../providers/wallet-ui-states-provider.js\";\nimport { ChainIcon } from \"../components/ChainIcon.js\";\nimport { CopyIcon } from \"../components/CopyIcon.js\";\nimport { IconContainer } from \"../components/IconContainer.js\";\nimport { Modal } from \"../components/Modal.js\";\nimport { Skeleton } from \"../components/Skeleton.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport { ToolTip } from \"../components/Tooltip.js\";\nimport { WalletImage } from \"../components/WalletImage.js\";\nimport { Container, Line } from \"../components/basic.js\";\nimport { Button, IconButton } from \"../components/buttons.js\";\nimport { Link, Text } from \"../components/text.js\";\nimport { fadeInAnimation } from \"../design-system/animations.js\";\nimport { StyledButton } from \"../design-system/elements.js\";\nimport { AccountAddress } from \"../prebuilt/Account/address.js\";\nimport { AccountAvatar } from \"../prebuilt/Account/avatar.js\";\nimport { AccountBalance, formatAccountFiatBalance, formatAccountTokenBalance } from \"../prebuilt/Account/balance.js\";\nimport { AccountBlobbie } from \"../prebuilt/Account/blobbie.js\";\nimport { AccountName } from \"../prebuilt/Account/name.js\";\nimport { AccountProvider } from \"../prebuilt/Account/provider.js\";\nimport { MenuButton, MenuLink } from \"./MenuButton.js\";\nimport { ScreenSetupContext, useSetupScreen } from \"./Modal/screen.js\";\nimport { NetworkSelectorContent } from \"./NetworkSelector.js\";\nimport { TransactionsScreen } from \"./TransactionsScreen.js\";\nimport { onModalUnmount } from \"./constants.js\";\nimport { CoinsIcon } from \"./icons/CoinsIcon.js\";\nimport { FundsIcon } from \"./icons/FundsIcon.js\";\nimport { OutlineWalletIcon } from \"./icons/OutlineWalletIcon.js\";\nimport { getConnectLocale } from \"./locale/getConnectLocale.js\";\nimport { LazyBuyScreen } from \"./screens/Buy/LazyBuyScreen.js\";\nimport { WalletManagerScreen } from \"./screens/Details/WalletManagerScreen.js\";\nimport { LinkProfileScreen } from \"./screens/LinkProfileScreen.js\";\nimport { LinkedProfilesScreen } from \"./screens/LinkedProfilesScreen.js\";\nimport { ManageWalletScreen } from \"./screens/ManageWalletScreen.js\";\nimport { PrivateKey } from \"./screens/PrivateKey.js\";\nimport { ReceiveFunds } from \"./screens/ReceiveFunds.js\";\nimport { SendFunds } from \"./screens/SendFunds.js\";\nimport { ViewAssets } from \"./screens/ViewAssets.js\";\nimport { ViewNFTs } from \"./screens/ViewNFTs.js\";\nimport { ViewTokens } from \"./screens/ViewTokens.js\";\nimport { WalletConnectReceiverScreen } from \"./screens/WalletConnectReceiverScreen.js\";\nconst TW_CONNECTED_WALLET = \"tw-connected-wallet\";\nconst LocalhostChainId = 1337;\n/**\n * @internal\n */\nexport const ConnectedWalletDetails = props => {\n  const {\n    connectLocale: locale,\n    client\n  } = props;\n  const setRootEl = useContext(SetRootElementContext);\n  const walletChain = useActiveWalletChain();\n  function closeModal() {\n    setRootEl(null);\n  }\n  function openModal() {\n    setRootEl(_jsx(DetailsModal, {\n      client: client,\n      locale: locale,\n      detailsModal: props.detailsModal,\n      theme: props.theme,\n      supportedTokens: props.supportedTokens,\n      supportedNFTs: props.supportedNFTs,\n      closeModal: closeModal,\n      onDisconnect: props.onDisconnect,\n      chains: props.chains,\n      displayBalanceToken: props.detailsButton?.displayBalanceToken,\n      connectOptions: props.connectOptions,\n      assetTabs: props.detailsModal?.assetTabs\n    }));\n  }\n  const isNetworkMismatch = props.chain && walletChain && walletChain.id !== props.chain.id;\n  if (props.detailsButton?.render) {\n    return (\n      // biome-ignore lint/a11y/useKeyWithClickEvents: ok\n      _jsx(\"div\", {\n        onClick: openModal,\n        children: _jsx(props.detailsButton.render, {})\n      })\n    );\n  }\n  if (props.chain && isNetworkMismatch) {\n    return _jsx(SwitchNetworkButton, {\n      style: props.switchButton?.style,\n      className: props.switchButton?.className,\n      switchNetworkBtnTitle: props.switchButton?.label,\n      targetChain: props.chain,\n      connectLocale: locale\n    });\n  }\n  const combinedClassName = `${TW_CONNECTED_WALLET} ${props.detailsButton?.className || \"\"}`;\n  const tokenAddress = props.detailsButton?.displayBalanceToken?.[Number(walletChain?.id)];\n  return _jsxs(WalletInfoButton, {\n    type: \"button\",\n    className: combinedClassName,\n    style: props.detailsButton?.style,\n    \"data-test\": \"connected-wallet-details\",\n    onClick: openModal,\n    children: [_jsx(Container, {\n      style: {\n        borderRadius: \"100%\",\n        overflow: \"hidden\",\n        width: \"35px\",\n        height: \"35px\"\n      },\n      children: props.detailsButton?.connectedAccountAvatarUrl ? _jsx(\"img\", {\n        alt: \"\",\n        src: props.detailsButton.connectedAccountAvatarUrl,\n        style: {\n          height: \"100%\",\n          width: \"100%\",\n          objectFit: \"cover\"\n        }\n      }) : _jsx(AccountAvatar, {\n        className: `${TW_CONNECTED_WALLET}__account_avatar`,\n        loadingComponent: _jsx(AccountBlobbie, {\n          size: 35,\n          className: `${TW_CONNECTED_WALLET}__account_avatar`\n        }),\n        fallbackComponent: _jsx(AccountBlobbie, {\n          size: 35,\n          className: `${TW_CONNECTED_WALLET}__account_avatar`\n        }),\n        queryOptions: {\n          refetchOnWindowFocus: false,\n          refetchOnMount: false\n        },\n        style: {\n          height: \"100%\",\n          width: \"100%\",\n          objectFit: \"cover\"\n        }\n      })\n    }), _jsxs(Container, {\n      flex: \"column\",\n      gap: \"4xs\",\n      style: {\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\",\n        borderRadius: `0 ${radius.md} ${radius.md} 0`\n      },\n      children: [props.detailsButton?.connectedAccountName ? _jsx(Text, {\n        size: \"xs\",\n        color: \"primaryText\",\n        weight: 500,\n        className: `${TW_CONNECTED_WALLET}__address`,\n        children: props.detailsButton.connectedAccountName\n      }) : _jsx(Text, {\n        size: \"xs\",\n        color: \"primaryText\",\n        weight: 500,\n        className: `${TW_CONNECTED_WALLET}__address`,\n        children: _jsx(AccountName, {\n          loadingComponent: _jsx(AccountAddress, {\n            formatFn: shortenAddress\n          }),\n          fallbackComponent: _jsx(AccountAddress, {\n            formatFn: shortenAddress\n          })\n        })\n      }), _jsx(Text, {\n        className: `${TW_CONNECTED_WALLET}__balance`,\n        size: \"xs\",\n        color: \"secondaryText\",\n        weight: 400,\n        style: {\n          display: \"flex\",\n          gap: \"2px\",\n          alignItems: \"center\"\n        },\n        children: props.detailsButton?.showBalanceInFiat ? _jsxs(_Fragment, {\n          children: [_jsx(AccountBalance, {\n            chain: walletChain,\n            loadingComponent: _jsx(Skeleton, {\n              height: fontSize.xs,\n              width: \"50px\"\n            }),\n            fallbackComponent: _jsx(Skeleton, {\n              height: fontSize.xs,\n              width: \"50px\"\n            }),\n            tokenAddress: tokenAddress\n          }), _jsx(AccountBalance, {\n            chain: walletChain,\n            tokenAddress: tokenAddress,\n            showBalanceInFiat: \"USD\",\n            formatFn: detailsBtn_formatFiatBalanceForButton,\n            loadingComponent: _jsx(Skeleton, {\n              height: fontSize.xs,\n              width: \"20px\"\n            })\n          })]\n        }) : _jsx(AccountBalance, {\n          chain: walletChain,\n          loadingComponent: _jsx(Skeleton, {\n            height: fontSize.xs,\n            width: \"70px\"\n          }),\n          fallbackComponent: _jsx(Skeleton, {\n            height: fontSize.xs,\n            width: \"70px\"\n          }),\n          formatFn: detailsBtn_formatTokenBalanceForButton,\n          tokenAddress: tokenAddress\n        })\n      })]\n    })]\n  });\n};\n/**\n * @internal Exported for tests\n */\nexport function detailsBtn_formatFiatBalanceForButton(props) {\n  return ` (${formatAccountFiatBalance({\n    ...props,\n    decimals: 0\n  })})`;\n}\n/**\n * @internal Exported for test\n */\nexport function detailsBtn_formatTokenBalanceForButton(props) {\n  return `${formatAccountTokenBalance({\n    ...props,\n    decimals: props.balance < 1 ? 5 : 4\n  })}`;\n}\n/**\n * @internal Exported for tests only\n */\nexport function DetailsModal(props) {\n  const [screen, setScreen] = useState(\"main\");\n  const {\n    disconnect\n  } = useDisconnect();\n  const [isOpen, setIsOpen] = useState(true);\n  const {\n    client,\n    locale\n  } = props;\n  const walletChain = useActiveWalletChain();\n  const activeAccount = useActiveAccount();\n  const theme = parseTheme(props.theme);\n  const activeWallet = useActiveWallet();\n  const chainIconQuery = useChainIconUrl(walletChain);\n  const chainNameQuery = useChainName(walletChain);\n  const chainFaucetsQuery = useChainFaucets(walletChain);\n  const disableSwitchChain = !activeWallet?.switchChain;\n  const screenSetup = useSetupScreen({\n    size: \"compact\",\n    welcomeScreen: undefined,\n    wallets: activeWallet ? [activeWallet] : []\n  });\n  const closeModal = useCallback(() => {\n    setIsOpen(false);\n    onModalUnmount(() => {\n      props.closeModal();\n    });\n  }, [props.closeModal]);\n  function handleDisconnect(info) {\n    setIsOpen(false);\n    props.closeModal();\n    props.onDisconnect(info);\n  }\n  useEffect(() => {\n    if (!activeAccount) {\n      closeModal();\n    }\n  }, [activeAccount, closeModal]);\n  const networkSwitcherButton = _jsxs(MenuButton, {\n    type: \"button\",\n    disabled: disableSwitchChain,\n    onClick: () => {\n      setScreen(\"network-switcher\");\n    },\n    \"data-variant\": \"primary\",\n    children: [_jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        position: \"relative\"\n      },\n      children: !chainIconQuery.isLoading ? _jsx(ChainIcon, {\n        chainIconUrl: chainIconQuery.url,\n        size: iconSize.md,\n        active: true,\n        client: client\n      }) : _jsx(Skeleton, {\n        height: `${iconSize.md}px`,\n        width: `${iconSize.md}px`\n      })\n    }), chainNameQuery.isLoading ? _jsx(Skeleton, {\n      height: \"16px\",\n      width: \"150px\"\n    }) : _jsxs(Text, {\n      color: \"primaryText\",\n      size: \"md\",\n      multiline: true,\n      children: [chainNameQuery.name || `Unknown chain #${walletChain?.id}`, _jsx(Text, {\n        color: \"secondaryText\",\n        size: \"xs\",\n        children: props.showBalanceInFiat ? _jsxs(_Fragment, {\n          children: [_jsx(AccountBalance, {\n            fallbackComponent: _jsx(Skeleton, {\n              height: \"1em\",\n              width: \"70px\"\n            }),\n            loadingComponent: _jsx(Skeleton, {\n              height: \"1em\",\n              width: \"70px\"\n            }),\n            chain: walletChain,\n            tokenAddress: props.displayBalanceToken?.[Number(walletChain?.id)],\n            formatFn: props => formatAccountTokenBalance({\n              ...props,\n              decimals: 7\n            })\n          }), \" \", _jsx(AccountBalance, {\n            loadingComponent: _jsx(Skeleton, {\n              height: \"1em\",\n              width: \"30px\"\n            }),\n            chain: walletChain,\n            tokenAddress: props.displayBalanceToken?.[Number(walletChain?.id)],\n            formatFn: props => ` (${formatAccountFiatBalance({\n              ...props,\n              decimals: 3\n            })})`,\n            showBalanceInFiat: \"USD\"\n          })]\n        }) : _jsx(AccountBalance, {\n          fallbackComponent: _jsx(Skeleton, {\n            height: \"1em\",\n            width: \"100px\"\n          }),\n          loadingComponent: _jsx(Skeleton, {\n            height: \"1em\",\n            width: \"100px\"\n          }),\n          formatFn: props => formatAccountTokenBalance({\n            ...props,\n            decimals: 7\n          }),\n          chain: walletChain,\n          tokenAddress: props.displayBalanceToken?.[Number(walletChain?.id)]\n        })\n      })]\n    }), _jsx(StyledChevronRightIcon, {\n      width: iconSize.sm,\n      height: iconSize.sm,\n      style: {\n        flexShrink: 0,\n        marginLeft: \"auto\"\n      }\n    })]\n  });\n  const {\n    hideSendFunds,\n    hideReceiveFunds,\n    hideBuyFunds\n  } = props.detailsModal || {};\n  const hideAllButtons = hideSendFunds && hideReceiveFunds && hideBuyFunds;\n  const avatarContent = _jsxs(Container, {\n    style: {\n      position: \"relative\",\n      height: `${iconSize.xl}px`,\n      width: `${iconSize.xl}px`\n    },\n    children: [_jsx(Container, {\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        borderRadius: \"100%\",\n        overflow: \"hidden\"\n      },\n      children: props.detailsModal?.connectedAccountAvatarUrl ? _jsx(\"img\", {\n        src: props.detailsModal.connectedAccountAvatarUrl,\n        style: {\n          height: \"100%\",\n          width: \"100%\",\n          objectFit: \"cover\"\n        },\n        alt: \"\"\n      }) : activeAccount && _jsx(AccountAvatar, {\n        loadingComponent: _jsx(AccountBlobbie, {\n          size: Number(iconSize.xxl)\n        }),\n        fallbackComponent: _jsx(AccountBlobbie, {\n          size: Number(iconSize.xxl)\n        }),\n        style: {\n          height: \"100%\",\n          width: \"100%\",\n          objectFit: \"cover\"\n        }\n      })\n    }), !props.detailsModal?.hideSwitchWallet ? _jsx(Container, {\n      style: {\n        position: \"absolute\",\n        bottom: -2,\n        right: -2\n      },\n      children: _jsx(IconContainer, {\n        style: {\n          background: theme.colors.modalBg\n        },\n        padding: \"4px\",\n        children: activeWallet && _jsx(WalletImage, {\n          style: {\n            borderRadius: 0\n          },\n          id: activeWallet.id,\n          client: client,\n          size: \"12\"\n        })\n      })\n    }) : null]\n  });\n  let content = _jsxs(\"div\", {\n    className: `${TW_CONNECTED_WALLET}__default_modal_screen`,\n    children: [_jsx(Spacer, {\n      y: \"xs\"\n    }), _jsxs(Container, {\n      px: \"lg\",\n      gap: \"sm\",\n      flex: \"row\",\n      center: \"y\",\n      style: {\n        paddingTop: spacing.lg,\n        paddingBottom: hideAllButtons ? spacing.md : spacing.lg\n      },\n      children: [props.detailsModal?.hideSwitchWallet ? avatarContent : _jsx(ToolTip, {\n        tip: \"Switch wallet\",\n        children: _jsx(\"div\", {\n          style: {\n            cursor: \"pointer\"\n          },\n          onKeyDown: e => {\n            if (e.key === \"w\") {\n              setScreen(\"wallet-manager\");\n            }\n          },\n          onClick: () => {\n            setScreen(\"wallet-manager\");\n          },\n          children: avatarContent\n        })\n      }), _jsxs(Container, {\n        flex: \"column\",\n        gap: \"3xs\",\n        children: [_jsxs(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: spacing.xxs,\n            alignItems: \"center\"\n          },\n          children: [props.detailsModal?.connectedAccountName ? _jsx(Text, {\n            color: \"primaryText\",\n            weight: 500,\n            size: \"md\",\n            children: props.detailsModal.connectedAccountName\n          }) : _jsx(Text, {\n            color: \"primaryText\",\n            weight: 500,\n            size: \"md\",\n            children: _jsx(AccountName, {\n              loadingComponent: _jsx(AccountAddress, {\n                formatFn: shortenAddress\n              }),\n              fallbackComponent: _jsx(AccountAddress, {\n                formatFn: shortenAddress\n              })\n            })\n          }), _jsx(IconButton, {\n            children: _jsx(CopyIcon, {\n              text: activeAccount?.address || \"\",\n              tip: locale.copyAddress\n            })\n          })]\n        }), _jsx(InAppWalletUserInfo, {\n          client: client,\n          locale: locale\n        })]\n      })]\n    }), !hideAllButtons && _jsxs(_Fragment, {\n      children: [_jsx(Container, {\n        px: \"lg\",\n        children: _jsxs(Container, {\n          style: {\n            display: \"flex\",\n            gap: spacing.xs\n          },\n          children: [!hideSendFunds && _jsxs(Button, {\n            variant: \"outline\",\n            style: {\n              fontSize: fontSize.sm,\n              display: \"flex\",\n              gap: spacing.xs,\n              alignItems: \"center\",\n              padding: spacing.sm,\n              flex: 1\n            },\n            onClick: () => {\n              setScreen(\"send\");\n            },\n            children: [_jsx(Container, {\n              color: \"secondaryText\",\n              flex: \"row\",\n              center: \"both\",\n              children: _jsx(PaperPlaneIcon, {\n                width: iconSize.sm,\n                height: iconSize.sm,\n                style: {\n                  transform: \"translateY(-10%) rotate(-45deg) \"\n                }\n              })\n            }), locale.send]\n          }), !hideReceiveFunds && _jsxs(Button, {\n            variant: \"outline\",\n            style: {\n              fontSize: fontSize.sm,\n              display: \"flex\",\n              gap: spacing.xs,\n              alignItems: \"center\",\n              padding: spacing.sm,\n              flex: 1\n            },\n            onClick: () => {\n              setScreen(\"receive\");\n            },\n            children: [_jsx(Container, {\n              color: \"secondaryText\",\n              flex: \"row\",\n              center: \"both\",\n              children: _jsx(PinBottomIcon, {\n                width: iconSize.sm,\n                height: iconSize.sm\n              })\n            }), locale.receive]\n          }), !hideBuyFunds && _jsxs(Button, {\n            variant: \"outline\",\n            style: {\n              fontSize: fontSize.sm,\n              display: \"flex\",\n              gap: spacing.xs,\n              alignItems: \"center\",\n              padding: spacing.sm,\n              flex: 1\n            },\n            onClick: () => {\n              trackPayEvent({\n                event: \"details_modal_buy_click\",\n                client: client,\n                walletAddress: activeAccount?.address,\n                walletType: activeWallet?.id\n              });\n              setScreen(\"buy\");\n            },\n            children: [_jsx(Container, {\n              color: \"secondaryText\",\n              flex: \"row\",\n              center: \"both\",\n              children: _jsx(PlusIcon, {\n                width: iconSize.sm,\n                height: iconSize.sm\n              })\n            }), locale.buy]\n          })]\n        })\n      }), _jsx(Spacer, {\n        y: \"md\"\n      })]\n    }), _jsxs(Container, {\n      px: \"md\",\n      children: [_jsxs(Container, {\n        flex: \"column\",\n        style: {\n          gap: \"1px\"\n        },\n        children: [networkSwitcherButton, _jsxs(MenuButton, {\n          onClick: () => {\n            setScreen(\"transactions\");\n          },\n          style: {\n            fontSize: fontSize.sm\n          },\n          children: [_jsx(TextAlignJustifyIcon, {\n            width: iconSize.md,\n            height: iconSize.md\n          }), _jsx(Container, {\n            flex: \"row\",\n            gap: \"xs\",\n            center: \"y\",\n            children: _jsx(Text, {\n              color: \"primaryText\",\n              children: locale.transactions\n            })\n          })]\n        }), (props.assetTabs === undefined || props.assetTabs.length > 0) && _jsxs(MenuButton, {\n          onClick: () => {\n            setScreen(\"view-assets\");\n          },\n          style: {\n            fontSize: fontSize.sm\n          },\n          children: [_jsx(CoinsIcon, {\n            size: iconSize.md\n          }), _jsx(Text, {\n            color: \"primaryText\",\n            children: props.supportedNFTs ? locale.viewFunds.viewAssets : locale.viewFunds.title\n          })]\n        }), _jsxs(MenuButton, {\n          onClick: () => {\n            setScreen(\"manage-wallet\");\n          },\n          style: {\n            fontSize: fontSize.sm\n          },\n          children: [_jsx(OutlineWalletIcon, {\n            size: iconSize.md\n          }), _jsx(Text, {\n            color: \"primaryText\",\n            children: props.locale.manageWallet.title\n          })]\n        }), (props.detailsModal?.showTestnetFaucet ?? false) && (chainFaucetsQuery.faucets.length > 0 || walletChain?.id === LocalhostChainId) && _jsxs(MenuLink, {\n          href: chainFaucetsQuery.faucets ? chainFaucetsQuery.faucets[0] : \"#\",\n          target: \"_blank\",\n          as: \"a\",\n          style: {\n            textDecoration: \"none\",\n            color: \"inherit\"\n          },\n          children: [_jsx(Container, {\n            flex: \"row\",\n            center: \"both\",\n            color: \"secondaryText\",\n            children: _jsx(FundsIcon, {\n              size: iconSize.md\n            })\n          }), locale.requestTestnetFunds]\n        }), props.detailsModal?.footer && _jsx(props.detailsModal.footer, {\n          close: closeModal\n        })]\n      }), _jsx(Spacer, {\n        y: \"md\"\n      })]\n    }), props.detailsModal?.hideDisconnect !== true && _jsxs(Container, {\n      children: [_jsx(Line, {}), _jsx(Spacer, {\n        y: \"sm\"\n      }), _jsx(Container, {\n        px: \"md\",\n        children: _jsxs(MenuButton, {\n          \"data-variant\": \"danger\",\n          type: \"button\",\n          onClick: () => {\n            if (activeWallet && activeAccount) {\n              disconnect(activeWallet);\n              handleDisconnect({\n                account: activeAccount,\n                wallet: activeWallet\n              });\n            }\n          },\n          children: [_jsx(ExitIcon, {\n            width: iconSize.md,\n            height: iconSize.md\n          }), _jsx(Text, {\n            color: \"primaryText\",\n            children: locale.disconnectWallet\n          })]\n        })\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      })]\n    })]\n  });\n  if (screen === \"transactions\") {\n    content = _jsx(TransactionsScreen, {\n      title: locale.buy,\n      onBack: () => setScreen(\"main\"),\n      closeModal: closeModal,\n      locale: locale,\n      setScreen: setScreen,\n      client: client\n    });\n  }\n  if (screen === \"wallet-manager\" && activeAccount && walletChain && activeWallet) {\n    content = _jsx(WalletManagerScreen, {\n      onBack: () => setScreen(\"main\"),\n      accountAbstraction: props.connectOptions?.accountAbstraction,\n      appMetadata: props.connectOptions?.appMetadata,\n      chain: props.connectOptions?.chain,\n      chains: props.connectOptions?.chains,\n      client: client,\n      hiddenWallets: props.connectOptions?.hiddenWallets,\n      connectLocale: locale,\n      recommendedWallets: props.connectOptions?.recommendedWallets,\n      showAllWallets: !!props.connectOptions?.showAllWallets,\n      walletConnect: props.connectOptions?.walletConnect,\n      wallets: props.connectOptions?.wallets,\n      activeAccount: activeAccount,\n      activeChain: walletChain,\n      activeWallet: activeWallet\n    });\n  }\n  if (screen === \"network-switcher\") {\n    content = _jsx(NetworkSelectorContent\n    // add currently connected chain to the list of chains if it's not already in the list\n    , {\n      // add currently connected chain to the list of chains if it's not already in the list\n      chains: walletChain && props.chains.find(c => c.id === walletChain.id) === undefined ? [walletChain, ...props.chains] : props.chains,\n      closeModal: closeModal,\n      networkSelector: props.detailsModal?.networkSelector,\n      onBack: () => {\n        setScreen(\"main\");\n      },\n      connectLocale: locale,\n      client: client\n    });\n  } else if (screen === \"view-assets\") {\n    if (props.supportedNFTs) {\n      content = _jsx(ViewAssets, {\n        supportedTokens: props.supportedTokens,\n        supportedNFTs: props.supportedNFTs,\n        onBack: () => {\n          setScreen(\"main\");\n        },\n        theme: props.theme,\n        setScreen: setScreen,\n        client: client,\n        connectLocale: locale,\n        assetTabs: props.detailsModal?.assetTabs\n      });\n    } else {\n      // Always show tokens (has the native token at least)\n      content = _jsx(ViewTokens, {\n        supportedTokens: props.supportedTokens,\n        onBack: () => {\n          setScreen(\"main\");\n        },\n        client: client,\n        connectLocale: locale\n      });\n    }\n  } else if (screen === \"view-nfts\") {\n    content = _jsx(ViewNFTs, {\n      theme: props.theme,\n      supportedNFTs: props.supportedNFTs,\n      onBack: () => {\n        setScreen(\"main\");\n      },\n      client: client,\n      connectLocale: locale\n    });\n  } else if (screen === \"view-tokens\") {\n    content = _jsx(ViewTokens, {\n      supportedTokens: props.supportedTokens,\n      onBack: () => {\n        setScreen(\"main\");\n      },\n      client: client,\n      connectLocale: locale\n    });\n  } else if (screen === \"private-key\") {\n    content = _jsx(PrivateKey, {\n      theme: props.theme,\n      onBack: () => {\n        setScreen(\"manage-wallet\");\n      },\n      wallet: activeWallet,\n      client: client,\n      connectLocale: locale\n    });\n  } else if (screen === \"manage-wallet\") {\n    content = _jsx(ManageWalletScreen, {\n      onBack: () => {\n        setScreen(\"main\");\n      },\n      locale: locale,\n      closeModal: closeModal,\n      client: client,\n      setScreen: setScreen\n    });\n  } else if (screen === \"wallet-connect-receiver\") {\n    content = _jsx(WalletConnectReceiverScreen, {\n      onBack: () => {\n        setScreen(\"manage-wallet\");\n      },\n      chains: props.chains,\n      client: client\n    });\n  } else if (screen === \"linked-profiles\") {\n    content = _jsx(LinkedProfilesScreen, {\n      onBack: () => setScreen(\"manage-wallet\"),\n      client: client,\n      locale: locale,\n      setScreen: setScreen\n    });\n  } else if (screen === \"link-profile\") {\n    content = _jsx(LinkProfileScreen, {\n      onBack: () => {\n        setScreen(\"linked-profiles\");\n      },\n      client: client,\n      locale: locale,\n      walletConnect: props.connectOptions?.walletConnect\n    });\n  }\n  // send funds\n  else if (screen === \"send\") {\n    content = _jsx(SendFunds, {\n      supportedTokens: props.supportedTokens,\n      onBack: () => {\n        setScreen(\"main\");\n      },\n      client: client,\n      connectLocale: locale\n    });\n  }\n  // receive funds\n  else if (screen === \"receive\") {\n    content = _jsx(ReceiveFunds, {\n      walletId: activeWallet?.id,\n      onBack: () => {\n        setScreen(\"main\");\n      },\n      client: client,\n      connectLocale: locale\n    });\n  }\n  // thirdweb pay\n  else if (screen === \"buy\") {\n    content = _jsx(LazyBuyScreen, {\n      title: locale.buy,\n      isEmbed: false,\n      client: client,\n      onBack: () => setScreen(\"main\"),\n      supportedTokens: props.supportedTokens,\n      connectLocale: locale,\n      payOptions: props.detailsModal?.payOptions || {\n        mode: \"fund_wallet\"\n      },\n      hiddenWallets: props.detailsModal?.hiddenWallets,\n      theme: typeof props.theme === \"string\" ? props.theme : props.theme.type,\n      onDone: closeModal,\n      connectOptions: undefined\n    });\n  }\n  return _jsx(CustomThemeProvider, {\n    theme: props.theme,\n    children: _jsx(WalletUIStatesProvider, {\n      theme: props.theme,\n      isOpen: false,\n      children: _jsx(ScreenSetupContext.Provider, {\n        value: screenSetup,\n        children: _jsx(Modal, {\n          size: \"compact\",\n          open: isOpen,\n          setOpen: _open => {\n            if (!_open) {\n              closeModal();\n            }\n          },\n          children: activeAccount?.address && _jsx(AccountProvider, {\n            address: activeAccount.address,\n            client: client,\n            children: content\n          })\n        })\n      })\n    })\n  });\n}\nconst WalletInfoButton = /* @__PURE__ */StyledButton(_ => {\n  const theme = useCustomTheme();\n  return {\n    all: \"unset\",\n    background: theme.colors.connectedButtonBg,\n    overflow: \"hidden\",\n    borderRadius: radius.md,\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    gap: spacing.xs,\n    padding: spacing.xs,\n    alignItems: \"center\",\n    minWidth: \"165px\",\n    height: \"50px\",\n    boxSizing: \"border-box\",\n    border: `1px solid ${theme.colors.borderColor}`,\n    WebkitTapHighlightColor: \"transparent\",\n    lineHeight: \"normal\",\n    animation: `${fadeInAnimation} 300ms ease`,\n    \"&:hover\": {\n      transition: \"background 250ms ease\",\n      background: theme.colors.connectedButtonBgHover\n    }\n  };\n});\nconst StyledChevronRightIcon = /* @__PURE__ */styled(/* @__PURE__ */ChevronRightIcon)(() => {\n  const theme = useCustomTheme();\n  return {\n    color: theme.colors.secondaryText\n  };\n});\n/**\n * @internal Exported for test\n */\nexport function ConnectedToSmartWallet(props) {\n  const activeAccount = useActiveAccount();\n  const activeWallet = useActiveWallet();\n  const isSmartWallet = hasSmartAccount(activeWallet);\n  const chain = useActiveWalletChain();\n  const {\n    client,\n    connectLocale: locale\n  } = props;\n  const [isSmartWalletDeployed, setIsSmartWalletDeployed] = useState(false);\n  useEffect(() => {\n    if (activeAccount && isSmartWallet && activeAccount.address && chain) {\n      const contract = getContract({\n        address: activeAccount.address,\n        chain,\n        client\n      });\n      isContractDeployed(contract).then(isDeployed => {\n        setIsSmartWalletDeployed(isDeployed);\n      });\n    } else {\n      setIsSmartWalletDeployed(false);\n    }\n  }, [activeAccount, chain, client, isSmartWallet]);\n  const content = _jsx(Container, {\n    flex: \"row\",\n    gap: \"3xs\",\n    center: \"y\",\n    children: _jsx(Text, {\n      size: \"xs\",\n      weight: 400,\n      color: \"secondaryText\",\n      children: locale.connectedToSmartWallet\n    })\n  });\n  if (chain && activeAccount && isSmartWallet) {\n    return _jsx(_Fragment, {\n      children: isSmartWalletDeployed ? _jsx(Link, {\n        color: \"secondaryText\",\n        hoverColor: \"primaryText\",\n        href: `https://thirdweb.com/${chain.id}/${activeAccount.address}/account`,\n        target: \"_blank\",\n        size: \"sm\",\n        children: content\n      }) : _jsxs(Text, {\n        size: \"sm\",\n        children: [\" \", content]\n      })\n    });\n  }\n  return null;\n}\n/**\n * @internal Exported for tests\n */\nexport function InAppWalletUserInfo(props) {\n  const {\n    client,\n    locale\n  } = props;\n  const account = useActiveAccount();\n  const activeWallet = useActiveWallet();\n  const adminWallet = useAdminWallet();\n  const {\n    data: walletInfo\n  } = useWalletInfo(activeWallet?.id);\n  const isSmartWallet = hasSmartAccount(activeWallet);\n  const {\n    data: walletName\n  } = useQuery({\n    queryKey: [\"wallet-name\", {\n      walletId: activeWallet?.id,\n      walletAddress: account?.address\n    }],\n    queryFn: async () => {\n      const lastAuthProvider = await getLastAuthProvider(webLocalStorage);\n      if (lastAuthProvider === \"guest\") {\n        return \"Guest\";\n      }\n      if (lastAuthProvider && (activeWallet?.id === \"inApp\" || activeWallet?.id === \"smart\") && socialAuthOptions.includes(lastAuthProvider)) {\n        return lastAuthProvider.slice(0, 1).toUpperCase() + lastAuthProvider.slice(1);\n      }\n      return walletInfo?.name;\n    },\n    enabled: !!activeWallet?.id && !!walletInfo\n  });\n  const userInfoQuery = useQuery({\n    queryKey: [\"in-app-wallet-user\", client, account?.address],\n    queryFn: async () => {\n      const isInAppWallet = adminWallet && (adminWallet.id === \"inApp\" || adminWallet.id.startsWith(\"ecosystem.\"));\n      if (!isInAppWallet) {\n        return null;\n      }\n      let ecosystem;\n      if (isEcosystemWallet(adminWallet)) {\n        const ecosystemWallet = adminWallet;\n        const partnerId = ecosystemWallet.getConfig()?.partnerId;\n        ecosystem = {\n          id: ecosystemWallet.id,\n          partnerId\n        };\n      }\n      const {\n        getUserEmail,\n        getUserPhoneNumber\n      } = await import(\"../../../../wallets/in-app/web/lib/auth/index.js\");\n      const [email, phone] = await Promise.all([getUserEmail({\n        client: client,\n        ecosystem\n      }), getUserPhoneNumber({\n        client: client,\n        ecosystem\n      })]);\n      return email || phone || null;\n    },\n    enabled: !!adminWallet\n  });\n  if (!userInfoQuery.data && isSmartWallet) {\n    return _jsx(ConnectedToSmartWallet, {\n      client: client,\n      connectLocale: locale\n    });\n  }\n  if (userInfoQuery.data || walletName) {\n    return _jsx(Text, {\n      size: \"xs\",\n      weight: 400,\n      children: userInfoQuery.data || walletName\n    });\n  }\n  return _jsx(Skeleton, {\n    width: \"50px\",\n    height: \"10px\",\n    className: \"InAppWalletUserInfo__skeleton\"\n  });\n}\n/**\n * @internal Exported for tests\n */\nexport function SwitchNetworkButton(props) {\n  const switchChain = useSwitchActiveWalletChain();\n  const [switching, setSwitching] = useState(false);\n  const locale = props.connectLocale;\n  const switchNetworkBtnTitle = props.switchNetworkBtnTitle ?? locale.switchNetwork;\n  return _jsx(Button, {\n    className: `tw-connect-wallet--switch-network ${props.className || \"\"}`,\n    variant: \"primary\",\n    type: \"button\",\n    \"data-is-loading\": switching,\n    \"data-test\": \"switch-network-button\",\n    disabled: switching,\n    onClick: async () => {\n      setSwitching(true);\n      try {\n        await switchChain(props.targetChain);\n      } catch (e) {\n        console.error(e);\n      }\n      setSwitching(false);\n    },\n    style: {\n      minWidth: \"140px\",\n      ...props.style\n    },\n    \"aria-label\": switching ? locale.switchingNetwork : undefined,\n    children: switching ? _jsx(Spinner, {\n      size: \"sm\",\n      color: \"primaryButtonText\"\n    }) : switchNetworkBtnTitle\n  });\n}\n/**\n * Hook to open the Wallet Details Modal that shows various information about the connected wallet and allows users to perform various actions like sending funds, receiving funds, switching networks, Buying tokens, etc.\n *\n * @example\n * ```tsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { useWalletDetailsModal } from \"thirdweb/react\";\n *\n * const client = createThirdwebClient({\n *  clientId: \"<your_client_id>\",\n * });\n *\n * function Example() {\n *   const detailsModal = useWalletDetailsModal();\n *\n *   function handleClick() {\n *      detailsModal.open({ client, theme: 'light' });\n *   }\n *\n *   return <button onClick={handleClick}> Show Wallet Details </button>\n * }\n * ```\n * @wallet\n */\nexport function useWalletDetailsModal() {\n  const account = useActiveAccount();\n  const setRootEl = useContext(SetRootElementContext);\n  function closeModal() {\n    setRootEl(null);\n  }\n  function openModal(props) {\n    if (!account) {\n      throw new Error(\"Wallet is not connected.\");\n    }\n    getConnectLocale(props.locale || \"en_US\").then(locale => {\n      setRootEl(_jsx(DetailsModal, {\n        client: props.client,\n        locale: locale,\n        detailsModal: {\n          footer: props.footer,\n          hideDisconnect: props.hideDisconnect,\n          hideSwitchWallet: props.hideSwitchWallet,\n          networkSelector: props.networkSelector,\n          payOptions: props.payOptions,\n          showTestnetFaucet: props.showTestnetFaucet,\n          connectedAccountName: props.connectedAccountName,\n          connectedAccountAvatarUrl: props.connectedAccountAvatarUrl,\n          hideBuyFunds: props.hideBuyFunds,\n          hideReceiveFunds: props.hideReceiveFunds,\n          hideSendFunds: props.hideSendFunds,\n          assetTabs: props.assetTabs\n        },\n        displayBalanceToken: props.displayBalanceToken,\n        theme: props.theme || \"dark\",\n        supportedTokens: props.supportedTokens,\n        supportedNFTs: props.supportedNFTs,\n        closeModal: closeModal,\n        onDisconnect: info => {\n          props.onDisconnect?.(info);\n          closeModal();\n        },\n        chains: props.chains || [],\n        connectOptions: props.connectOptions\n      }));\n    }).catch(() => {\n      closeModal();\n    });\n  }\n  return {\n    open: openModal\n  };\n}\n//# sourceMappingURL=Details.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}