{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getLastAuthProvider } from \"../../../react/core/utils/storage.js\";\nimport { webLocalStorage } from \"../../../utils/storage/webStorage.js\";\nimport { isEcosystemWallet } from \"../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { ClientScopedStorage } from \"../../../wallets/in-app/core/authentication/client-scoped-storage.js\";\nimport { useActiveWallet } from \"../../core/hooks/wallets/useActiveWallet.js\";\n/**\n * Creates a link to another thirdweb-supported site with wallet connection parameters.\n *\n *  The target site must support the connected wallet (ecosystem or in-app).\n *\n * @param {Object} props - The props to pass to the anchor tag\n * @param {String} props.href - The URL of the site to link to\n * @param {ThirdwebClient} props.client - The current site's thirdweb client\n * @param {Ecosystem} [props.ecosystem] - The ecosystem to use for the wallet connection in the target site\n * @param {React.ReactNode} props.children - The content to render inside the link\n *\n * @example\n * ```tsx\n * import { SiteLink } from \"thirdweb/react\";\n *\n * <SiteLink href=\"https://thirdweb.com\" client={thirdwebClient} ecosystem={{ id: \"ecosystem.thirdweb\" }}>\n *   Visit Site\n * </SiteLink>\n * ```\n * @walletConnection\n */\nexport function SiteLink({\n  href,\n  client,\n  ecosystem,\n  children,\n  ...props\n}) {\n  if (!client.clientId) {\n    throw new Error(\"The SiteLink client must have a clientId\");\n  }\n  const activeWallet = useActiveWallet();\n  const walletId = activeWallet?.id;\n  const {\n    data: {\n      authProvider,\n      authCookie\n    } = {}\n  } = useQuery({\n    queryKey: [\"site-link\", walletId, href, client.clientId, ecosystem],\n    enabled: activeWallet && (isEcosystemWallet(activeWallet) || walletId === \"inApp\"),\n    queryFn: async () => {\n      const storage = new ClientScopedStorage({\n        storage: webLocalStorage,\n        clientId: client.clientId,\n        ecosystem\n      });\n      const authProvider = await getLastAuthProvider(webLocalStorage);\n      const authCookie = await storage.getAuthCookie();\n      return {\n        authProvider,\n        authCookie\n      };\n    }\n  });\n  const url = new URL(href);\n  if (walletId) {\n    url.searchParams.set(\"walletId\", walletId);\n  }\n  if (authProvider) {\n    url.searchParams.set(\"authProvider\", authProvider);\n  }\n  if (authCookie) {\n    url.searchParams.set(\"authCookie\", authCookie);\n  }\n  return _jsx(\"a\", {\n    href: encodeURI(url.toString()),\n    ...props,\n    children: children\n  });\n}\n//# sourceMappingURL=SiteLink.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}