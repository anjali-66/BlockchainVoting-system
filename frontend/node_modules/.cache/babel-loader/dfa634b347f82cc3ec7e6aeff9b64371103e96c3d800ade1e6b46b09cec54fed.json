{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useMemo } from \"react\";\nimport { CustomThemeProvider, useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { radius } from \"../../../../core/design-system/index.js\";\nimport { useSiweAuth } from \"../../../../core/hooks/auth/useSiweAuth.js\";\nimport { useActiveAccount } from \"../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useIsAutoConnecting } from \"../../../../core/hooks/wallets/useIsAutoConnecting.js\";\nimport { useConnectionManager } from \"../../../../core/providers/connection-manager.js\";\nimport { WalletUIStatesProvider } from \"../../../providers/wallet-ui-states-provider.js\";\nimport { canFitWideModal } from \"../../../utils/canFitWideModal.js\";\nimport { usePreloadWalletProviders } from \"../../../utils/usePreloadWalletProviders.js\";\nimport { getDefaultWallets } from \"../../../wallets/defaultWallets.js\";\nimport { LoadingScreen } from \"../../../wallets/shared/LoadingScreen.js\";\nimport { AutoConnect } from \"../../AutoConnect/AutoConnect.js\";\nimport { DynamicHeight } from \"../../components/DynamicHeight.js\";\nimport { StyledDiv } from \"../../design-system/elements.js\";\nimport { modalMaxWidthCompact, modalMaxWidthWide, reservedScreens, wideModalMaxHeight } from \"../constants.js\";\nimport { useConnectLocale } from \"../locale/getConnectLocale.js\";\nimport { ConnectModalContent } from \"./ConnectModalContent.js\";\nimport { useSetupScreen } from \"./screen.js\";\n/**\n * An inline wallet connection component that allows to:\n *\n * - Connect to 500+ external wallets\n * - Connect with email, phone, passkey or socials\n * - Convert any wallet to a ERC4337 smart wallet for gasless transactions\n * - Sign in with ethereum (Auth)\n *\n * It renders the same UI as the [`ConnectButton`](https://portal.thirdweb.com/react/v5/ConnectButton) component's modal - but directly inline in the page instead of being in a modal.\n *\n * Once connected, the component does not render any UI. It only renders UI if wallet is not connected.\n *\n * @example\n *\n * ## Default setup\n *\n * ```tsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { ConnectEmbed } from \"thirdweb/react\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * <ConnectEmbed\n *    client={client}\n * />\n * ```\n *\n * [View all available config options](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps)\n *\n *  ## Customization options\n *\n * ### Customizing wallet options\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    wallets={[\n *      createWallet(\"io.metamask\"),\n *      createWallet(\"com.coinbase.wallet\"),\n *      createWallet(\"me.rainbow\"),\n *    ]}\n * />\n * ```\n *\n * [View all available wallets](https://portal.thirdweb.com/typescript/v5/supported-wallets)\n *\n *  ### Customizing the default chain to connect to\n *\n * ```tsx\n * import { base } from \"thirdweb/chains\";\n *\n * <ConnectEmbed\n *   client={client}\n *   chain={base}\n * />\n * ```\n *\n * ### Enabling Account Abstraction\n *\n * By passing the `accountAbstraction` prop, ALL connected wallets will be converted to smart accounts.\n * And by setting `sponsorGas` to `true`, all transactions done with those smart accounts will be sponsored.\n *\n * ```tsx\n * <ConnectEmbed\n * client={client}\n * accountAbstraction={{\n *   chain: sepolia,\n *   sponsorGas: true,\n * }}\n * />;\n * ```\n *\n * ### Enabling sign in with ethereum (Auth)\n *\n * ```tsx\n * <ConnectEmbed\n * client={client}\n * auth={{\n *   isLoggedIn: async (address) => {\n *     console.log(\"checking if logged in!\", { address });\n *     return await isLoggedIn();\n *   },\n *   doLogin: async (params) => {\n *     console.log(\"logging in!\");\n *     await login(params);\n *   },\n *   getLoginPayload: async ({ address }) =>\n *     generatePayload({ address }),\n *   doLogout: async () => {\n *     console.log(\"logging out!\");\n *     await logout();\n *   },\n * }}\n * />;\n * ```\n *\n * ### Customizing the theme\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    theme=\"light\"\n * />\n * ```\n *\n * For more granular control, you can also pass a custom theme object:\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    theme={lightTheme({\n *      colors: {\n *        modalBg: \"red\",\n *      },\n *    })}\n * />\n * ```\n *\n * [View all available themes properties](https://portal.thirdweb.com/references/typescript/v5/Theme)\n *\n * ### Changing the display language\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    locale=\"ja_JP\"\n * />\n * ```\n *\n * [View all available locales](https://portal.thirdweb.com/references/typescript/v5/LocaleId)\n *\n * @param props -\n * The props for the `ConnectEmbed` component.\n *\n * Refer to the [`ConnectEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps) type for more details\n *\n * @returns A JSX element that renders the <ConnectEmbed> component.\n * @component\n * @walletConnection\n */\nexport function ConnectEmbed(props) {\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  const siweAuth = useSiweAuth(activeWallet, activeAccount, props.auth);\n  const show = !activeAccount || siweAuth.requiresAuth && !siweAuth.isLoggedIn;\n  const connectionManager = useConnectionManager();\n  // Add props.chain and props.chains to defined chains store\n  useEffect(() => {\n    if (props.chain) {\n      connectionManager.defineChains([props.chain]);\n    }\n  }, [props.chain, connectionManager]);\n  useEffect(() => {\n    if (props.chains) {\n      connectionManager.defineChains(props.chains);\n    }\n  }, [props.chains, connectionManager]);\n  const wallets = useMemo(() => props.wallets || getDefaultWallets({\n    appMetadata: props.appMetadata,\n    chains: props.chains\n  }), [props.wallets, props.appMetadata, props.chains]);\n  const localeId = props.locale || \"en_US\";\n  const localeQuery = useConnectLocale(localeId);\n  usePreloadWalletProviders({\n    wallets,\n    client: props.client\n  });\n  const modalSize = useMemo(() => {\n    return !canFitWideModal() || wallets.length === 1 ? \"compact\" : props.modalSize || \"compact\";\n  }, [wallets.length, props.modalSize]);\n  const meta = useMemo(() => {\n    return {\n      privacyPolicyUrl: props.privacyPolicyUrl,\n      showThirdwebBranding: props.showThirdwebBranding !== false,\n      termsOfServiceUrl: props.termsOfServiceUrl,\n      title: undefined,\n      titleIconUrl: undefined,\n      requireApproval: props.requireApproval\n    };\n  }, [props.privacyPolicyUrl, props.showThirdwebBranding, props.termsOfServiceUrl, props.requireApproval]);\n  const preferredChain = props.accountAbstraction?.chain || props.chain || props.chains?.[0];\n  const autoConnectComp = props.autoConnect !== false && _jsx(AutoConnect, {\n    chain: preferredChain,\n    appMetadata: props.appMetadata,\n    client: props.client,\n    wallets: wallets,\n    accountAbstraction: props.accountAbstraction,\n    timeout: typeof props.autoConnect === \"boolean\" ? undefined : props.autoConnect?.timeout,\n    onConnect: props.onConnect\n  });\n  if (show) {\n    if (!localeQuery.data) {\n      return _jsxs(_Fragment, {\n        children: [autoConnectComp, _jsx(CustomThemeProvider, {\n          theme: props.theme,\n          children: _jsx(EmbedContainer, {\n            modalSize: modalSize,\n            children: _jsx(LoadingScreen, {})\n          })\n        })]\n      });\n    }\n    return _jsxs(WalletUIStatesProvider, {\n      theme: props.theme,\n      isOpen: true,\n      children: [_jsx(ConnectEmbedContent, {\n        auth: props.auth,\n        accountAbstraction: props.accountAbstraction,\n        chain: preferredChain,\n        chains: props.chains,\n        client: props.client,\n        connectLocale: localeQuery.data,\n        size: modalSize,\n        meta: meta,\n        header: props.header,\n        localeId: props.locale || \"en_US\",\n        onConnect: props.onConnect,\n        recommendedWallets: props.recommendedWallets,\n        showAllWallets: props.showAllWallets,\n        walletConnect: props.walletConnect,\n        wallets: wallets,\n        className: props.className,\n        modalSize: modalSize,\n        style: props.style,\n        welcomeScreen: props.welcomeScreen\n      }), autoConnectComp]\n    });\n  }\n  return _jsx(\"div\", {\n    children: autoConnectComp\n  });\n}\n/**\n * @internal\n */\nconst ConnectEmbedContent = props => {\n  // const requiresSignIn = false;\n  const screenSetup = useSetupScreen({\n    size: props.size,\n    welcomeScreen: undefined,\n    wallets: props.wallets\n  });\n  const {\n    setScreen,\n    initialScreen,\n    screen\n  } = screenSetup;\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  const siweAuth = useSiweAuth(activeWallet, activeAccount, props.auth);\n  const isAutoConnecting = useIsAutoConnecting();\n  let content = null;\n  // if sign in is required but connect embed is showing the initial screen - change to sign in screen\n  useEffect(() => {\n    if (siweAuth.requiresAuth && !siweAuth.isLoggedIn && activeAccount && screen === initialScreen) {\n      setScreen(reservedScreens.signIn);\n    }\n  }, [siweAuth, setScreen, activeAccount, screen, initialScreen]);\n  const modalSize = !canFitWideModal() ? \"compact\" : props.modalSize || \"compact\";\n  // show spinner on page load and during auto connecting a wallet\n  if (isAutoConnecting) {\n    content = _jsx(LoadingScreen, {});\n  } else {\n    content = _jsx(ConnectModalContent, {\n      shouldSetActive: true,\n      screenSetup: screenSetup,\n      isOpen: true,\n      onClose: () => {\n        setScreen(initialScreen);\n      },\n      setModalVisibility: () => {\n        // no op\n      },\n      accountAbstraction: props.accountAbstraction,\n      auth: props.auth,\n      chain: props.chain,\n      chains: props.chains,\n      client: props.client,\n      connectLocale: props.connectLocale,\n      meta: {\n        ...props.meta,\n        title: typeof props.header === \"object\" ? props.header.title : undefined,\n        titleIconUrl: typeof props.header === \"object\" ? props.header.titleIcon : undefined\n      },\n      size: props.size,\n      welcomeScreen: props.welcomeScreen,\n      hideHeader: !props.header,\n      onConnect: props.onConnect,\n      recommendedWallets: props.recommendedWallets,\n      showAllWallets: props.showAllWallets,\n      walletConnect: props.walletConnect,\n      wallets: props.wallets,\n      modalHeader: undefined,\n      walletIdsToHide: undefined\n    });\n  }\n  return _jsx(EmbedContainer, {\n    modalSize: modalSize,\n    className: props.className,\n    style: props.style,\n    children: modalSize === \"wide\" ? content : _jsxs(DynamicHeight, {\n      children: [\" \", content, \" \"]\n    })\n  });\n};\nexport const EmbedContainer = /* @__PURE__ */StyledDiv(props => {\n  const {\n    modalSize\n  } = props;\n  const theme = useCustomTheme();\n  return {\n    color: theme.colors.primaryText,\n    background: theme.colors.modalBg,\n    height: modalSize === \"compact\" ? \"auto\" : wideModalMaxHeight,\n    width: modalSize === \"compact\" ? modalMaxWidthCompact : modalMaxWidthWide,\n    boxSizing: \"border-box\",\n    position: \"relative\",\n    lineHeight: \"normal\",\n    borderRadius: radius.xl,\n    border: `1px solid ${theme.colors.borderColor}`,\n    overflow: \"hidden\",\n    fontFamily: theme.fontFamily,\n    \"& *::selection\": {\n      backgroundColor: theme.colors.selectedTextBg,\n      color: theme.colors.selectedTextColor\n    },\n    \"& *\": {\n      boxSizing: \"border-box\"\n    }\n  };\n});\n//# sourceMappingURL=ConnectEmbed.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}