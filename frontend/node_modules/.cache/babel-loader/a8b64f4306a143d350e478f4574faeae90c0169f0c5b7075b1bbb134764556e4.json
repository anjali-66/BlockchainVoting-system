{"ast":null,"code":"import { stringify } from \"../json.js\";\nconst CONNECT_PARAMS_MAP_KEY = \"tw:connected-wallet-params\";\n/**\n * Save the connection params to storage for given wallet id\n * It saves an object with wallet id as key and params as value to storage on CONNECT_PARAMS_MAP_KEY\n * CONNECT_PARAMS_MAP_KEY: { walletId1: walletId1Params, walletId2: walletId2Params, ... }\n *\n * @param walletId\n * @param params\n * @internal\n */\nexport async function saveConnectParamsToStorage(storage, walletId, params) {\n  // params must be stringifiable\n  if (!isStringifiable(params)) {\n    throw new Error(\"given params are not stringifiable\");\n  }\n  const currentValueStr = await storage.getItem(CONNECT_PARAMS_MAP_KEY);\n  let value;\n  if (currentValueStr) {\n    try {\n      value = JSON.parse(currentValueStr);\n    } catch {\n      value = {};\n    }\n    value[walletId] = params;\n  } else {\n    value = {\n      [walletId]: params\n    };\n  }\n  storage.setItem(CONNECT_PARAMS_MAP_KEY, stringify(value));\n}\n/**\n * Save the connection params to storage for given wallet id\n * It saves an object with wallet id as key and params as value to storage on CONNECT_PARAMS_MAP_KEY\n * CONNECT_PARAMS_MAP_KEY: { walletId1: walletId1Params, walletId2: walletId2Params, ... }\n *\n * @param walletId\n * @param params\n * @internal\n */\nexport async function deleteConnectParamsFromStorage(storage, walletId) {\n  const currentValueStr = await storage.getItem(CONNECT_PARAMS_MAP_KEY);\n  let value;\n  if (currentValueStr) {\n    try {\n      value = JSON.parse(currentValueStr);\n    } catch {\n      value = {};\n    }\n    delete value[walletId];\n    storage.setItem(CONNECT_PARAMS_MAP_KEY, stringify(value));\n  }\n}\n/**\n * Get the saved connection params from storage for given wallet id\n * @internal\n */\nexport async function getSavedConnectParamsFromStorage(storage, walletId) {\n  const valueStr = await storage.getItem(CONNECT_PARAMS_MAP_KEY);\n  if (!valueStr) {\n    return null;\n  }\n  try {\n    const value = JSON.parse(valueStr);\n    if (value?.[walletId]) {\n      return value[walletId];\n    }\n    return null;\n  } catch {\n    return null;\n  }\n}\nfunction isStringifiable(value) {\n  try {\n    stringify(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n//# sourceMappingURL=walletStorage.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}