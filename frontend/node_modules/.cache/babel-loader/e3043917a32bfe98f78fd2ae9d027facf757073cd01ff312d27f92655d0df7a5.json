{"ast":null,"code":"import { useQuery } from \"@tanstack/react-query\";\nimport { defineChain } from \"../../../../../../../chains/utils.js\";\nimport { getPaySupportedDestinations, getPaySupportedSources } from \"../../../../../../../pay/utils/definitions.js\";\nimport { getClientFetch } from \"../../../../../../../utils/fetch.js\";\nimport { withCache } from \"../../../../../../../utils/promise/withCache.js\";\nexport async function fetchBuySupportedDestinations(client, isTestMode) {\n  return withCache(async () => {\n    const fetchWithHeaders = getClientFetch(client);\n    const res = await fetchWithHeaders(`${getPaySupportedDestinations()}${isTestMode ? \"?isTestMode=true\" : \"\"}`);\n    const data = await res.json();\n    return data.result.map(item => ({\n      chain: defineChain({\n        id: item.chainId\n      }),\n      tokens: item.tokens\n    }));\n  }, {\n    cacheKey: \"destination-tokens\",\n    cacheTime: 5 * 60 * 1000\n  });\n}\n/**\n * @internal\n */\nexport function useBuySupportedDestinations(client, isTestMode) {\n  return useQuery({\n    queryKey: [\"destination-tokens\", client],\n    queryFn: async () => {\n      return fetchBuySupportedDestinations(client, isTestMode);\n    }\n  });\n}\nexport function useBuySupportedSources(options) {\n  return useQuery({\n    queryKey: [\"source-tokens\", options],\n    queryFn: async () => {\n      const fetchWithHeaders = getClientFetch(options.client);\n      const baseUrl = getPaySupportedSources();\n      const url = new URL(baseUrl);\n      url.searchParams.append(\"destinationChainId\", options.destinationChainId.toString());\n      url.searchParams.append(\"destinationTokenAddress\", options.destinationTokenAddress);\n      const res = await fetchWithHeaders(url.toString());\n      const data = await res.json();\n      return data.result.map(item => ({\n        chain: defineChain({\n          id: item.chainId\n        }),\n        tokens: item.tokens\n      }));\n    }\n  });\n}\n//# sourceMappingURL=useSwapSupportedChains.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}