{"ast":null,"code":"import { errorValues, standardErrorCodes } from './constants.js';\nconst FALLBACK_MESSAGE = 'Unspecified error message.';\nexport const JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n */\nexport function getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n  if (code && Number.isInteger(code)) {\n    const codeString = code.toString();\n    if (hasKey(errorValues, codeString)) {\n      return errorValues[codeString].message;\n    }\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n */\nexport function isValidCode(code) {\n  if (!Number.isInteger(code)) {\n    return false;\n  }\n  const codeString = code.toString();\n  if (errorValues[codeString]) {\n    return true;\n  }\n  if (isJsonRpcServerError(code)) {\n    return true;\n  }\n  return false;\n}\n/**\n * Returns the error code from an error object.\n */\nexport function getErrorCode(error) {\n  var _a;\n  if (typeof error === 'number') {\n    return error;\n  } else if (isErrorWithCode(error)) {\n    return (_a = error.code) !== null && _a !== void 0 ? _a : error.errorCode;\n  }\n  return undefined;\n}\nfunction isErrorWithCode(error) {\n  return typeof error === 'object' && error !== null && (typeof error.code === 'number' || typeof error.errorCode === 'number');\n}\nexport function serialize(error, {\n  shouldIncludeStack = false\n} = {}) {\n  const serialized = {};\n  if (error && typeof error === 'object' && !Array.isArray(error) && hasKey(error, 'code') && isValidCode(error.code)) {\n    const _error = error;\n    serialized.code = _error.code;\n    if (_error.message && typeof _error.message === 'string') {\n      serialized.message = _error.message;\n      if (hasKey(_error, 'data')) {\n        serialized.data = _error.data;\n      }\n    } else {\n      serialized.message = getMessageFromCode(serialized.code);\n      serialized.data = {\n        originalError: assignOriginalError(error)\n      };\n    }\n  } else {\n    serialized.code = standardErrorCodes.rpc.internal;\n    serialized.message = hasStringProperty(error, 'message') ? error.message : FALLBACK_MESSAGE;\n    serialized.data = {\n      originalError: assignOriginalError(error)\n    };\n  }\n  if (shouldIncludeStack) {\n    serialized.stack = hasStringProperty(error, 'stack') ? error.stack : undefined;\n  }\n  return serialized;\n}\n// Internal\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\nfunction assignOriginalError(error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error);\n  }\n  return error;\n}\nfunction hasKey(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction hasStringProperty(obj, prop) {\n  return typeof obj === 'object' && obj !== null && prop in obj && typeof obj[prop] === 'string';\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}