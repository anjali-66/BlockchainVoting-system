{"ast":null,"code":"import { isNativeTokenAddress } from \"../../../constants/addresses.js\";\nimport { name } from \"../../common/read/name.js\";\nimport { symbol } from \"../../common/read/symbol.js\";\nimport { decimals } from \"../__generated__/IERC20/read/decimals.js\";\n/**\n * Retrieves the metadata of a currency.\n * @param options - The options for the transaction.\n * @returns A promise that resolves to an object containing the currency metadata.\n * @extension ERC20\n * @example\n * ```ts\n * import { getCurrencyMetadata } from \"thirdweb/extensions/erc20\";\n *\n * const currencyMetadata = await getCurrencyMetadata({ contract });\n * ```\n */\nexport async function getCurrencyMetadata(options) {\n  // if the contract is the native token, return the native currency metadata\n  if (isNativeTokenAddress(options.contract.address)) {\n    return {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      // overwrite with native currency of the chain if available\n      ...options.contract.chain.nativeCurrency\n    };\n  }\n  try {\n    const [name_, symbol_, decimals_] = await Promise.all([name(options).catch(() => \"\"), symbol(options), decimals(options)]);\n    return {\n      name: name_,\n      symbol: symbol_,\n      decimals: decimals_\n    };\n  } catch {\n    throw new Error(\"Invalid currency token\");\n  }\n}\n//# sourceMappingURL=getCurrencyMetadata.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}