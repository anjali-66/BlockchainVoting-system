{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { keyframes } from \"@emotion/react\";\nimport { Cross2Icon } from \"@radix-ui/react-icons\";\nimport { forwardRef, useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, radius } from \"../../../core/design-system/index.js\";\nimport { fadeInAnimation } from \"../design-system/animations.js\";\nimport { StyledDiv } from \"../design-system/elements.js\";\nimport { DynamicHeight } from \"./DynamicHeight.js\";\nimport { CrossContainer } from \"./Modal.js\";\nimport { Container } from \"./basic.js\";\nimport { IconButton } from \"./buttons.js\";\n/**\n *\n * @internal\n */\nexport const Drawer = /* @__PURE__ */forwardRef(function Drawer_(props, ref) {\n  return _jsx(DrawerContainer, {\n    ref: ref,\n    children: _jsx(DynamicHeight, {\n      children: _jsxs(Container, {\n        p: \"lg\",\n        children: [_jsx(CrossContainer, {\n          children: _jsx(IconButton, {\n            type: \"button\",\n            \"aria-label\": \"Close\",\n            onClick: props.close,\n            children: _jsx(Cross2Icon, {\n              width: iconSize.md,\n              height: iconSize.md,\n              style: {\n                color: \"inherit\"\n              }\n            })\n          })\n        }), props.children]\n      })\n    })\n  });\n});\nconst DrawerContainer = /* @__PURE__ */StyledDiv(_ => {\n  const theme = useCustomTheme();\n  return {\n    zIndex: 10000,\n    borderTopLeftRadius: radius.xl,\n    borderTopRightRadius: radius.xl,\n    background: theme.colors.modalBg,\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    animation: `${drawerOpenAnimation} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.1)`,\n    borderTop: `1px solid ${theme.colors.borderColor}`\n  };\n});\nconst drawerOpenAnimation = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(100px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\nexport const DrawerOverlay = /* @__PURE__ */StyledDiv(_ => {\n  const theme = useCustomTheme();\n  return {\n    backgroundColor: theme.colors.modalOverlayBg,\n    zIndex: 9999,\n    position: \"absolute\",\n    inset: 0,\n    animation: `${fadeInAnimation} 400ms cubic-bezier(0.16, 1, 0.3, 1)`\n  };\n});\n/**\n *\n * @internal\n */\nexport function useDrawer() {\n  const [isOpen, _setIsOpen] = useState(false);\n  const drawerRef = useRef(null);\n  const drawerOverlayRef = useRef(null);\n  const closeDrawerAnimation = useCallback(() => {\n    return new Promise(resolve => {\n      if (drawerRef.current) {\n        const animOptions = {\n          easing: \"cubic-bezier(0.175, 0.885, 0.32, 1.1)\",\n          fill: \"forwards\",\n          duration: 300\n        };\n        const closeAnimation = drawerRef.current.animate([{\n          transform: \"translateY(100%)\",\n          opacity: 0\n        }], animOptions);\n        drawerOverlayRef.current?.animate([{\n          opacity: 0\n        }], animOptions);\n        closeAnimation.onfinish = () => resolve();\n      } else {\n        resolve();\n      }\n    });\n  }, []);\n  const setIsOpen = useCallback(async value => {\n    if (value) {\n      _setIsOpen(true);\n    } else {\n      await closeDrawerAnimation();\n      _setIsOpen(false);\n    }\n  }, [closeDrawerAnimation]);\n  // close on outside click\n  useLayoutEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n    const handleClick = event => {\n      if (drawerRef.current && event.target instanceof Node && !drawerRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    // avoid listening to the click event that opened the drawer by adding a frame delay\n    requestAnimationFrame(() => {\n      document.addEventListener(\"click\", handleClick);\n    });\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [isOpen, setIsOpen]);\n  return {\n    drawerRef,\n    drawerOverlayRef,\n    setIsOpen,\n    isOpen\n  };\n}\n//# sourceMappingURL=Drawer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}