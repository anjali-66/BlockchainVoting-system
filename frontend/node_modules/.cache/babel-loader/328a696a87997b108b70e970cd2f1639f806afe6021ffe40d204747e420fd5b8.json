{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { webLocalStorage } from \"../../../../utils/storage/webStorage.js\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { linkProfile, preAuthenticate } from \"../../../../wallets/in-app/web/lib/auth/index.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { fontSize } from \"../../../core/design-system/index.js\";\nimport { setLastAuthProvider } from \"../../../core/utils/storage.js\";\nimport { FadeIn } from \"../../ui/components/FadeIn.js\";\nimport { OTPInput } from \"../../ui/components/OTPInput.js\";\nimport { Spacer } from \"../../ui/components/Spacer.js\";\nimport { Spinner } from \"../../ui/components/Spinner.js\";\nimport { Container, Line, ModalHeader } from \"../../ui/components/basic.js\";\nimport { Button } from \"../../ui/components/buttons.js\";\nimport { Text } from \"../../ui/components/text.js\";\nimport { StyledButton } from \"../../ui/design-system/elements.js\";\n/**\n * @internal\n */\nexport function OTPLoginUI(props) {\n  const {\n    wallet,\n    done,\n    goBack,\n    userInfo\n  } = props;\n  const isWideModal = props.size === \"wide\";\n  const locale = props.locale;\n  const [otpInput, setOtpInput] = useState(\"\");\n  const [verifyStatus, setVerifyStatus] = useState(\"idle\");\n  const [error, setError] = useState();\n  const [accountStatus, setAccountStatus] = useState(\"sending\");\n  const ecosystem = isEcosystemWallet(wallet) ? {\n    id: wallet.id,\n    partnerId: wallet.getConfig()?.partnerId\n  } : undefined;\n  const [screen] = useState(\"base\");\n  const sendEmailOrSms = useCallback(async () => {\n    setOtpInput(\"\");\n    setVerifyStatus(\"idle\");\n    setAccountStatus(\"sending\");\n    try {\n      if (\"email\" in userInfo) {\n        await preAuthenticate({\n          ecosystem,\n          email: userInfo.email,\n          strategy: \"email\",\n          client: props.client\n        });\n        setAccountStatus(\"sent\");\n      } else if (\"phone\" in userInfo) {\n        await preAuthenticate({\n          ecosystem,\n          phoneNumber: userInfo.phone,\n          strategy: \"phone\",\n          client: props.client\n        });\n        setAccountStatus(\"sent\");\n      } else {\n        throw new Error(\"Invalid userInfo\");\n      }\n    } catch (e) {\n      console.error(e);\n      setVerifyStatus(\"idle\");\n      setAccountStatus(\"error\");\n    }\n  }, [props.client, userInfo, ecosystem]);\n  async function connect(otp) {\n    if (\"email\" in userInfo) {\n      await wallet.connect({\n        chain: props.chain,\n        strategy: \"email\",\n        email: userInfo.email,\n        verificationCode: otp,\n        client: props.client\n      });\n      await setLastAuthProvider(\"email\", webLocalStorage);\n    } else if (\"phone\" in userInfo) {\n      await wallet.connect({\n        chain: props.chain,\n        strategy: \"phone\",\n        phoneNumber: userInfo.phone,\n        verificationCode: otp,\n        client: props.client\n      });\n      await setLastAuthProvider(\"phone\", webLocalStorage);\n    } else {\n      throw new Error(\"Invalid userInfo\");\n    }\n  }\n  async function link(otp) {\n    if (\"email\" in userInfo) {\n      await linkProfile({\n        client: props.client,\n        strategy: \"email\",\n        email: userInfo.email,\n        verificationCode: otp,\n        ecosystem\n      });\n    } else if (\"phone\" in userInfo) {\n      await linkProfile({\n        client: props.client,\n        strategy: \"phone\",\n        phoneNumber: userInfo.phone,\n        verificationCode: otp,\n        ecosystem\n      });\n    }\n  }\n  const verify = async otp => {\n    if (otp.length !== 6) {\n      return;\n    }\n    setVerifyStatus(\"verifying\");\n    try {\n      // verifies otp for UI feedback\n      if (props.isLinking) {\n        await link(otp);\n      } else {\n        await connect(otp);\n      }\n      done();\n      setVerifyStatus(\"valid\");\n    } catch (e) {\n      // TODO: More robust error handling\n      if (e instanceof Error && e?.message?.includes(\"PAYMENT_METHOD_REQUIRED\")) {\n        setVerifyStatus(\"payment_required\");\n      } else if (e instanceof Error && (e.message.toLowerCase().includes(\"link\") || e.message.toLowerCase().includes(\"profile\"))) {\n        setVerifyStatus(\"linking_error\");\n        setError(e.message);\n      } else {\n        setVerifyStatus(\"invalid\");\n      }\n      console.error(\"Authentication Error\", e);\n    }\n  };\n  // send email on mount\n  const emailSentOnMount = useRef(false);\n  useEffect(() => {\n    if (!emailSentOnMount.current) {\n      emailSentOnMount.current = true;\n      sendEmailOrSms();\n    }\n  }, [sendEmailOrSms]);\n  if (screen === \"base\") {\n    return _jsxs(Container, {\n      fullHeight: true,\n      flex: \"column\",\n      animate: \"fadein\",\n      children: [_jsx(Container, {\n        p: \"lg\",\n        children: _jsx(ModalHeader, {\n          title: locale.signIn,\n          onBack: goBack\n        })\n      }), _jsx(Container, {\n        expand: true,\n        flex: \"column\",\n        center: \"y\",\n        children: _jsxs(\"form\", {\n          onSubmit: e => {\n            e.preventDefault();\n          },\n          children: [_jsxs(Container, {\n            flex: \"column\",\n            center: \"x\",\n            px: \"lg\",\n            children: [!isWideModal && _jsx(Spacer, {\n              y: \"xl\"\n            }), _jsx(Text, {\n              children: locale.emailLoginScreen.enterCodeSendTo\n            }), _jsx(Spacer, {\n              y: \"sm\"\n            }), _jsx(Text, {\n              color: \"primaryText\",\n              children: \"email\" in userInfo ? userInfo.email : userInfo.phone\n            }), _jsx(Spacer, {\n              y: \"xl\"\n            })]\n          }), _jsx(OTPInput, {\n            isInvalid: verifyStatus === \"invalid\",\n            digits: 6,\n            value: otpInput,\n            setValue: value => {\n              setOtpInput(value);\n              setVerifyStatus(\"idle\"); // reset error\n            },\n            onEnter: () => {\n              verify(otpInput);\n            }\n          }), verifyStatus === \"invalid\" && _jsxs(FadeIn, {\n            children: [_jsx(Spacer, {\n              y: \"md\"\n            }), _jsx(Text, {\n              size: \"sm\",\n              color: \"danger\",\n              center: true,\n              children: locale.emailLoginScreen.invalidCode\n            })]\n          }), verifyStatus === \"linking_error\" && _jsxs(FadeIn, {\n            children: [_jsx(Spacer, {\n              y: \"md\"\n            }), _jsx(Text, {\n              size: \"sm\",\n              color: \"danger\",\n              center: true,\n              children: error || \"Failed to verify code\"\n            })]\n          }), verifyStatus === \"payment_required\" && _jsxs(FadeIn, {\n            children: [_jsx(Spacer, {\n              y: \"md\"\n            }), _jsx(Text, {\n              size: \"sm\",\n              color: \"danger\",\n              center: true,\n              children: locale.maxAccountsExceeded\n            })]\n          }), _jsx(Spacer, {\n            y: \"xl\"\n          }), _jsx(Container, {\n            px: isWideModal ? \"xxl\" : \"lg\",\n            children: verifyStatus === \"verifying\" ? _jsx(_Fragment, {\n              children: _jsx(Container, {\n                flex: \"row\",\n                center: \"x\",\n                animate: \"fadein\",\n                children: _jsx(Spinner, {\n                  size: \"lg\",\n                  color: \"accentText\"\n                })\n              })\n            }) : _jsx(Container, {\n              animate: \"fadein\",\n              children: _jsx(Button, {\n                onClick: () => verify(otpInput),\n                variant: \"accent\",\n                type: \"submit\",\n                style: {\n                  width: \"100%\"\n                },\n                children: locale.emailLoginScreen.verify\n              })\n            }, \"btn-container\")\n          }), _jsx(Spacer, {\n            y: \"xl\"\n          }), !isWideModal && _jsx(Line, {}), _jsxs(Container, {\n            p: isWideModal ? undefined : \"lg\",\n            children: [accountStatus === \"error\" && _jsx(Text, {\n              size: \"sm\",\n              center: true,\n              color: \"danger\",\n              children: locale.emailLoginScreen.failedToSendCode\n            }), accountStatus === \"sending\" && _jsxs(Container, {\n              flex: \"row\",\n              center: \"both\",\n              gap: \"xs\",\n              style: {\n                textAlign: \"center\"\n              },\n              children: [_jsx(Text, {\n                size: \"sm\",\n                children: locale.emailLoginScreen.sendingCode\n              }), _jsx(Spinner, {\n                size: \"xs\",\n                color: \"secondaryText\"\n              })]\n            }), accountStatus === \"sent\" && _jsx(LinkButton, {\n              onClick: sendEmailOrSms,\n              type: \"button\",\n              children: locale.emailLoginScreen.resendCode\n            })]\n          })]\n        })\n      })]\n    });\n  }\n  return null;\n}\nconst LinkButton = /* @__PURE__ */StyledButton(_ => {\n  const theme = useCustomTheme();\n  return {\n    all: \"unset\",\n    color: theme.colors.accentText,\n    fontSize: fontSize.sm,\n    cursor: \"pointer\",\n    textAlign: \"center\",\n    fontWeight: 500,\n    width: \"100%\",\n    \"&:hover\": {\n      color: theme.colors.primaryText\n    }\n  };\n});\n//# sourceMappingURL=OTPLoginUI.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}