{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getFunctionId } from \"../../../../../utils/function-id.js\";\nimport { MediaRenderer } from \"../../MediaRenderer/MediaRenderer.js\";\nimport { useNFTContext } from \"./provider.js\";\nimport { getNFTInfo } from \"./utils.js\";\n/**\n * This component fetches and displays an NFT's media. It uses thirdweb [`MediaRenderer`](https://portal.thirdweb.com/refernces/typescript/v5/MediaRenderer) under the hood\n * so you can style it just like how you would style a MediaRenderer.\n * @returns A MediaRenderer component\n *\n * @component\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { NFTProvider, NFTMedia } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTMedia />\n * </NFTProvider>\n * ```\n *\n * ### Show a loading sign while the media is being fetched\n * ```tsx\n * import { NFTProvider, NFTMedia } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTMedia loadingComponent={<YourLoadingSign />} />\n * </NFTProvider>\n * ```\n *\n * ### Show something in case the media failed to resolve\n * ```tsx\n * import { NFTProvider, NFTMedia } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTMedia fallbackComponent={<span>Failed to load media</span>} />\n * </NFTProvider>\n * ```\n *\n * ### Custom query options for useQuery (tanstack-query)\n * ```tsx\n * import { NFTProvider, NFTMedia } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTMedia queryOptions={{ retry: 3, enabled: false, }} />\n * </NFTProvider>\n * ```\n *\n * ### Basic stylings\n *\n * You can style NFTMedia with the `style` and `className` props.\n *\n * ```tsx\n * <NFTMedia style={{ borderRadius: \"8px\" }} className=\"mx-auto\" />\n * ```\n *\n * ### Override the media with the `mediaResolver` prop\n * If you already have the url, you can skip the network requests and pass it directly to the NFTMedia\n * ```tsx\n * <NFTMedia mediaResolver={{\n *   src: \"/cat_video.mp4\",\n *   // Poster is applicable to medias that are videos and audios\n *   poster: \"/cat-image.png\",\n * }} />\n * ```\n *\n * You can also pass in your own custom (async) function that retrieves the media url\n * ```tsx\n * const getMedia = async () => {\n *   const url = getNFTMedia(props);\n *   return url;\n * };\n *\n * <NFTMedia mediaResolver={getMedia} />\n * ```\n * @nft\n * @beta\n */\nexport function NFTMedia({\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  mediaResolver,\n  ...mediaRendererProps\n}) {\n  const {\n    contract,\n    tokenId\n  } = useNFTContext();\n  const mediaQuery = useQuery({\n    queryKey: [\"_internal_nft_media_\", contract.chain.id, tokenId.toString(), {\n      resolver: typeof mediaResolver === \"object\" ? mediaResolver : typeof mediaResolver === \"function\" ? getFunctionId(mediaResolver) : undefined\n    }],\n    queryFn: async () => fetchNftMedia({\n      mediaResolver,\n      contract,\n      tokenId\n    }),\n    ...queryOptions\n  });\n  if (mediaQuery.isLoading) {\n    return loadingComponent || null;\n  }\n  if (!mediaQuery.data) {\n    return fallbackComponent || null;\n  }\n  return _jsx(MediaRenderer, {\n    client: contract.client,\n    src: mediaQuery.data.src,\n    poster: mediaQuery.data.poster,\n    ...mediaRendererProps\n  });\n}\n/**\n * @internal Exported for tests only\n */\nexport async function fetchNftMedia(props) {\n  const {\n    mediaResolver,\n    contract,\n    tokenId\n  } = props;\n  if (typeof mediaResolver === \"object\") {\n    return mediaResolver;\n  }\n  if (typeof mediaResolver === \"function\") {\n    return mediaResolver();\n  }\n  const nft = await getNFTInfo({\n    contract,\n    tokenId\n  }).catch(() => undefined);\n  if (!nft) {\n    throw new Error(\"Failed to resolve NFT info\");\n  }\n  const animation_url = nft.metadata.animation_url;\n  const image = nft.metadata.image || nft.metadata.image_url;\n  if (animation_url) {\n    return {\n      src: animation_url,\n      poster: image || undefined\n    };\n  }\n  if (image) {\n    return {\n      src: image,\n      poster: undefined\n    };\n  }\n  throw new Error(\"Failed to resolve NFT media\");\n}\n//# sourceMappingURL=media.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}