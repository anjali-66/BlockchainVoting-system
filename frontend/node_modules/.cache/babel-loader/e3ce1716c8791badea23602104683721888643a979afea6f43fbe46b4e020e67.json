{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { CrossCircledIcon } from \"@radix-ui/react-icons\";\nimport { useState } from \"react\";\nimport { trackPayEvent } from \"../../../../../../../analytics/track/pay.js\";\nimport { sendTransaction } from \"../../../../../../../transaction/actions/send-transaction.js\";\nimport { waitForReceipt } from \"../../../../../../../transaction/actions/wait-for-tx-receipt.js\";\nimport { shortenAddress } from \"../../../../../../../utils/address.js\";\nimport { formatNumber } from \"../../../../../../../utils/formatNumber.js\";\nimport { useCustomTheme } from \"../../../../../../core/design-system/CustomThemeProvider.js\";\nimport { fontSize, iconSize } from \"../../../../../../core/design-system/index.js\";\nimport { useChainName } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { useEnsName } from \"../../../../../../core/utils/wallet.js\";\nimport { Skeleton } from \"../../../../components/Skeleton.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Spinner } from \"../../../../components/Spinner.js\";\nimport { StepBar } from \"../../../../components/StepBar.js\";\nimport { SwitchNetworkButton } from \"../../../../components/SwitchNetwork.js\";\nimport { Container, Line, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { StyledDiv } from \"../../../../design-system/elements.js\";\nimport { PayTokenIcon } from \"../PayTokenIcon.js\";\nimport { Step } from \"../Stepper.js\";\nimport { formatSeconds } from \"./formatSeconds.js\";\nimport { addPendingTx } from \"./pendingSwapTx.js\";\n/**\n * @internal\n */\nexport function SwapConfirmationScreen(props) {\n  const isApprovalRequired = props.quote.approval !== undefined;\n  const initialStep = isApprovalRequired ? \"approval\" : \"swap\";\n  const [step, setStep] = useState(initialStep);\n  const [status, setStatus] = useState(\"idle\");\n  const receiver = props.quote.swapDetails.toAddress;\n  const sender = props.quote.swapDetails.fromAddress;\n  const isDifferentRecipient = receiver.toLowerCase() !== sender.toLowerCase();\n  const ensName = useEnsName({\n    client: props.client,\n    address: receiver\n  });\n  return _jsxs(Container, {\n    p: \"lg\",\n    children: [_jsx(ModalHeader, {\n      title: props.title,\n      onBack: props.onBack\n    }), props.isFiatFlow ? _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"lg\"\n      }), _jsx(StepBar, {\n        steps: 2,\n        currentStep: 2\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      }), _jsxs(Text, {\n        size: \"xs\",\n        children: [\"Step 2 of 2 - Converting \", props.fromTokenSymbol, \" to\", \" \", props.toTokenSymbol]\n      }), _jsx(Spacer, {\n        y: \"md\"\n      })]\n    }) : _jsx(Spacer, {\n      y: \"lg\"\n    }), _jsx(ConfirmItem, {\n      label: \"Pay\",\n      children: _jsx(RenderTokenInfo, {\n        chain: props.fromChain,\n        amount: String(formatNumber(Number(props.fromAmount), 6)),\n        symbol: props.fromTokenSymbol || \"\",\n        token: props.fromToken,\n        client: props.client\n      })\n    }), !isDifferentRecipient && _jsx(ConfirmItem, {\n      label: \"Receive\",\n      children: _jsx(RenderTokenInfo, {\n        chain: props.toChain,\n        amount: String(formatNumber(Number(props.toAmount), 6)),\n        symbol: props.toTokenSymbol,\n        token: props.toToken,\n        client: props.client\n      })\n    }), _jsx(ConfirmItem, {\n      label: \"Fees\",\n      children: _jsx(SwapFeesRightAligned, {\n        quote: props.quote\n      })\n    }), _jsx(ConfirmItem, {\n      label: \"Time\",\n      children: _jsxs(Text, {\n        size: \"sm\",\n        color: \"primaryText\",\n        children: [\"~\", formatSeconds(props.quote.swapDetails.estimated.durationSeconds || 0)]\n      })\n    }), isDifferentRecipient && _jsx(ConfirmItem, {\n      label: \"Receiver\",\n      children: _jsx(Text, {\n        color: \"primaryText\",\n        size: \"sm\",\n        children: ensName.data || shortenAddress(receiver)\n      })\n    }), _jsx(Spacer, {\n      y: \"xl\"\n    }), isApprovalRequired && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"sm\"\n      }), _jsxs(Container, {\n        gap: \"sm\",\n        flex: \"row\",\n        style: {\n          justifyContent: \"space-between\"\n        },\n        center: \"y\",\n        color: \"accentText\",\n        children: [_jsx(Step, {\n          isDone: step === \"swap\",\n          isActive: step === \"approval\",\n          label: step === \"approval\" ? \"Approve\" : \"Approved\"\n        }), _jsx(ConnectorLine, {}), _jsx(Step, {\n          isDone: false,\n          label: \"Confirm\",\n          isActive: step === \"swap\"\n        })]\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      })]\n    }), status === \"error\" && _jsxs(_Fragment, {\n      children: [_jsxs(Container, {\n        flex: \"row\",\n        gap: \"xs\",\n        center: \"both\",\n        color: \"danger\",\n        children: [_jsx(CrossCircledIcon, {\n          width: iconSize.sm,\n          height: iconSize.sm\n        }), _jsx(Text, {\n          color: \"danger\",\n          size: \"sm\",\n          children: step === \"approval\" ? \"Failed to Approve\" : \"Failed to Confirm\"\n        })]\n      }), _jsx(Spacer, {\n        y: \"md\"\n      })]\n    }), props.payer.chain.id !== props.fromChain.id ? _jsx(SwitchNetworkButton, {\n      fullWidth: true,\n      variant: \"accent\",\n      switchChain: async () => {\n        await props.payer.wallet.switchChain(props.fromChain);\n      }\n    }) : _jsxs(Button, {\n      variant: \"accent\",\n      fullWidth: true,\n      disabled: status === \"pending\",\n      onClick: async () => {\n        if (step === \"approval\" && props.quote.approval) {\n          try {\n            setStatus(\"pending\");\n            trackPayEvent({\n              event: \"prompt_swap_approval\",\n              client: props.client,\n              walletAddress: props.payer.account.address,\n              walletType: props.payer.wallet.id,\n              fromToken: props.quote.swapDetails.fromToken.tokenAddress,\n              fromAmount: props.quote.swapDetails.fromAmountWei,\n              toToken: props.quote.swapDetails.toToken.tokenAddress,\n              toAmount: props.quote.swapDetails.toAmountWei,\n              chainId: props.quote.swapDetails.fromToken.chainId,\n              dstChainId: props.quote.swapDetails.toToken.chainId\n            });\n            const tx = await sendTransaction({\n              account: props.payer.account,\n              transaction: props.quote.approval\n            });\n            await waitForReceipt({\n              ...tx,\n              maxBlocksWaitTime: 50\n            });\n            // props.onQuoteFinalized(props.quote);\n            trackPayEvent({\n              event: \"swap_approval_success\",\n              client: props.client,\n              walletAddress: props.payer.account.address,\n              walletType: props.payer.wallet.id,\n              fromToken: props.quote.swapDetails.fromToken.tokenAddress,\n              fromAmount: props.quote.swapDetails.fromAmountWei,\n              toToken: props.quote.swapDetails.toToken.tokenAddress,\n              toAmount: props.quote.swapDetails.toAmountWei,\n              chainId: props.quote.swapDetails.fromToken.chainId,\n              dstChainId: props.quote.swapDetails.toToken.chainId\n            });\n            setStep(\"swap\");\n            setStatus(\"idle\");\n          } catch (e) {\n            console.error(e);\n            setStatus(\"error\");\n          }\n        }\n        if (step === \"swap\") {\n          setStatus(\"pending\");\n          try {\n            let tx = props.quote.transactionRequest;\n            // Fix for inApp wallet\n            // Ideally - the pay server sends a non-legacy transaction to avoid this issue\n            if (props.payer.wallet.id === \"inApp\" || props.payer.wallet.id === \"embedded\") {\n              tx = {\n                ...props.quote.transactionRequest,\n                gasPrice: undefined\n              };\n            }\n            trackPayEvent({\n              event: \"prompt_swap_execution\",\n              client: props.client,\n              walletAddress: props.payer.account.address,\n              walletType: props.payer.wallet.id,\n              fromToken: props.quote.swapDetails.fromToken.tokenAddress,\n              fromAmount: props.quote.swapDetails.fromAmountWei,\n              toToken: props.quote.swapDetails.toToken.tokenAddress,\n              toAmount: props.quote.swapDetails.toAmountWei,\n              chainId: props.quote.swapDetails.fromToken.chainId,\n              dstChainId: props.quote.swapDetails.toToken.chainId\n            });\n            const _swapTx = await sendTransaction({\n              account: props.payer.account,\n              transaction: tx\n            });\n            await waitForReceipt({\n              ..._swapTx,\n              maxBlocksWaitTime: 50\n            });\n            trackPayEvent({\n              event: \"swap_execution_success\",\n              client: props.client,\n              walletAddress: props.payer.account.address,\n              walletType: props.payer.wallet.id,\n              fromToken: props.quote.swapDetails.fromToken.tokenAddress,\n              fromAmount: props.quote.swapDetails.fromAmountWei,\n              toToken: props.quote.swapDetails.toToken.tokenAddress,\n              toAmount: props.quote.swapDetails.toAmountWei,\n              chainId: props.quote.swapDetails.fromToken.chainId,\n              dstChainId: props.quote.swapDetails.toToken.chainId\n            });\n            // do not add pending tx if the swap is part of fiat flow\n            if (!props.isFiatFlow) {\n              addPendingTx({\n                type: \"swap\",\n                txHash: _swapTx.transactionHash\n              });\n            }\n            props.setSwapTxHash(_swapTx.transactionHash);\n          } catch (e) {\n            console.error(e);\n            setStatus(\"error\");\n          }\n        }\n      },\n      gap: \"xs\",\n      children: [step === \"approval\" && (status === \"pending\" ? \"Approving\" : \"Approve\"), step === \"swap\" && (status === \"pending\" ? \"Confirming\" : \"Confirm\"), status === \"pending\" && _jsx(Spinner, {\n        size: \"sm\",\n        color: \"accentButtonText\"\n      })]\n    })]\n  });\n}\nexport const ConnectorLine = /* @__PURE__ */StyledDiv(() => {\n  const theme = useCustomTheme();\n  return {\n    height: \"4px\",\n    background: theme.colors.borderColor,\n    flex: 1\n  };\n});\nfunction RenderTokenInfo(props) {\n  const {\n    name\n  } = useChainName(props.chain);\n  return _jsxs(Container, {\n    flex: \"column\",\n    gap: \"xxs\",\n    style: {\n      alignItems: \"flex-end\"\n    },\n    children: [_jsxs(Container, {\n      flex: \"row\",\n      center: \"y\",\n      gap: \"xs\",\n      children: [_jsxs(Text, {\n        color: \"primaryText\",\n        size: \"sm\",\n        children: [props.amount, \" \", props.symbol]\n      }), _jsx(PayTokenIcon, {\n        token: props.token,\n        chain: props.chain,\n        size: \"xs\",\n        client: props.client\n      })]\n    }), name ? _jsx(Text, {\n      size: \"xs\",\n      children: name\n    }) : _jsx(Skeleton, {\n      width: \"100px\",\n      height: fontSize.xs\n    })]\n  });\n}\nfunction ConfirmItem(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Container, {\n      flex: \"row\",\n      gap: \"md\",\n      py: \"md\",\n      style: {\n        justifyContent: \"space-between\"\n      },\n      children: [_jsx(Text, {\n        size: \"sm\",\n        color: \"secondaryText\",\n        children: props.label\n      }), props.children]\n    }), _jsx(Line, {})]\n  });\n}\n/**\n * @internal\n */\nfunction SwapFeesRightAligned(props) {\n  return _jsx(Container, {\n    flex: \"column\",\n    gap: \"xs\",\n    style: {\n      alignItems: \"flex-end\"\n    },\n    children: props.quote.processingFees.map(fee => {\n      const feeAmount = formatNumber(Number(fee.amount), 6);\n      return _jsxs(Container, {\n        flex: \"row\",\n        gap: \"xxs\",\n        children: [_jsxs(Text, {\n          color: \"primaryText\",\n          size: \"sm\",\n          children: [feeAmount === 0 ? \"~\" : \"\", feeAmount, \" \", fee.token.symbol]\n        }), _jsxs(Text, {\n          color: \"secondaryText\",\n          size: \"sm\",\n          children: [\"($\", (fee.amountUSDCents / 100).toFixed(2), \")\"]\n        })]\n      }, `${fee.token.chainId}_${fee.token.tokenAddress}_${feeAmount}`);\n    })\n  });\n}\n//# sourceMappingURL=ConfirmationScreen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}