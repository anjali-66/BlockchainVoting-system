{"ast":null,"code":"// Copyright (c) 2018-2023 Coinbase, Inc. <https://www.coinbase.com/>\nimport { hexStringToUint8Array, uint8ArrayToHex } from '../../../../core/type/util.js';\nexport class WalletLinkCipher {\n  // @param secret hex representation of 32-byte secret\n  constructor(secret) {\n    this.secret = secret;\n  }\n  /**\n   *\n   * @param plainText string to be encrypted\n   * returns hex string representation of bytes in the order: initialization vector (iv),\n   * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n   * encrypted plainText.\n   */\n  async encrypt(plainText) {\n    const secret = this.secret;\n    if (secret.length !== 64) throw Error(`secret must be 256 bits`);\n    const ivBytes = crypto.getRandomValues(new Uint8Array(12));\n    const secretKey = await crypto.subtle.importKey('raw', hexStringToUint8Array(secret), {\n      name: 'aes-gcm'\n    }, false, ['encrypt', 'decrypt']);\n    const enc = new TextEncoder();\n    // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n    const encryptedResult = await window.crypto.subtle.encrypt({\n      name: 'AES-GCM',\n      iv: ivBytes\n    }, secretKey, enc.encode(plainText));\n    const tagLength = 16;\n    const authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n    const encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n    const authTagBytes = new Uint8Array(authTag);\n    const encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n    const concatted = new Uint8Array([...ivBytes, ...authTagBytes, ...encryptedPlaintextBytes]);\n    return uint8ArrayToHex(concatted);\n  }\n  /**\n   *\n   * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n   * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n   */\n  async decrypt(cipherText) {\n    const secret = this.secret;\n    if (secret.length !== 64) throw Error(`secret must be 256 bits`);\n    return new Promise((resolve, reject) => {\n      void async function () {\n        const secretKey = await crypto.subtle.importKey('raw', hexStringToUint8Array(secret), {\n          name: 'aes-gcm'\n        }, false, ['encrypt', 'decrypt']);\n        const encrypted = hexStringToUint8Array(cipherText);\n        const ivBytes = encrypted.slice(0, 12);\n        const authTagBytes = encrypted.slice(12, 28);\n        const encryptedPlaintextBytes = encrypted.slice(28);\n        const concattedBytes = new Uint8Array([...encryptedPlaintextBytes, ...authTagBytes]);\n        const algo = {\n          name: 'AES-GCM',\n          iv: new Uint8Array(ivBytes)\n        };\n        try {\n          const decrypted = await window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n          const decoder = new TextDecoder();\n          resolve(decoder.decode(decrypted));\n        } catch (err) {\n          reject(err);\n        }\n      }();\n    });\n  }\n}\n//# sourceMappingURL=WalletLinkCipher.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}