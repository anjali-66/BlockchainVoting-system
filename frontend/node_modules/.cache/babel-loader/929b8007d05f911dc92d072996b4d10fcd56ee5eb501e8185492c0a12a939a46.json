{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport styled from \"@emotion/styled\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { iconSize } from \"../../../core/design-system/index.js\";\nimport { useSiweAuth } from \"../../../core/hooks/auth/useSiweAuth.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useActiveWalletConnectionStatus } from \"../../../core/hooks/wallets/useActiveWalletConnectionStatus.js\";\nimport { useConnectionManager } from \"../../../core/providers/connection-manager.js\";\nimport { defaultTokens } from \"../../../core/utils/defaultTokens.js\";\nimport { WalletUIStatesProvider, useSetIsWalletModalOpen } from \"../../providers/wallet-ui-states-provider.js\";\nimport { canFitWideModal } from \"../../utils/canFitWideModal.js\";\nimport { usePreloadWalletProviders } from \"../../utils/usePreloadWalletProviders.js\";\nimport { getDefaultWallets } from \"../../wallets/defaultWallets.js\";\nimport { AutoConnect } from \"../AutoConnect/AutoConnect.js\";\nimport { Modal } from \"../components/Modal.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport { Container } from \"../components/basic.js\";\nimport { Button } from \"../components/buttons.js\";\nimport { fadeInAnimation } from \"../design-system/animations.js\";\nimport { AccountProvider } from \"../prebuilt/Account/provider.js\";\nimport { ConnectedWalletDetails } from \"./Details.js\";\nimport ConnectModal from \"./Modal/ConnectModal.js\";\nimport { LockIcon } from \"./icons/LockIcon.js\";\nimport { useConnectLocale } from \"./locale/getConnectLocale.js\";\nimport { SignatureScreen } from \"./screens/SignatureScreen.js\";\nconst TW_CONNECT_WALLET = \"tw-connect-wallet\";\n/**\n * A fully featured wallet connection component that allows to:\n *\n * - Connect to 500+ external wallets\n * - Connect with email, phone, passkey or socials\n * - Convert any wallet to a ERC4337 smart wallet for gasless transactions\n * - Sign in with ethereum (Auth)\n *\n * Once connected, the component allows to:\n *\n * - Reolve ENS names and avatars\n * - Manage multipple connected wallets\n * - Send and receive native tokens and ERC20 tokens\n * - View ERC20 tokens and NFTs\n * - Onramp, bridge and swap tokens\n * - Switch chains\n * - Connect to another app with WalletConnect\n *\n * @example\n *\n * ## Default setup\n *\n * ```tsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { ConnectButton } from \"thirdweb/react\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * <ConnectButton\n *    client={client}\n * />\n * ```\n *\n * [View all available config options](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps)\n *\n * ## Customization options\n *\n * ### Customizing wallet options\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    wallets={[\n *      createWallet(\"io.metamask\"),\n *      createWallet(\"com.coinbase.wallet\"),\n *      createWallet(\"me.rainbow\"),\n *    ]}\n * />\n * ```\n *\n * [View all available wallets](https://portal.thirdweb.com/typescript/v5/supported-wallets)\n *\n * ### Customizing the default chain to connect to\n *\n * ```tsx\n * import { sepolia } from \"thirdweb/chains\";\n *\n * <ConnectButton\n *   client={client}\n *   chain={sepolia}\n * />\n * ```\n *\n * ### Enabling Account Abstraction\n *\n * By passing the `accountAbstraction` prop, ALL connected wallets will be converted to smart accounts.\n * And by setting `sponsorGas` to `true`, all transactions done with those smart accounts will be sponsored.\n *\n * ```tsx\n * <ConnectButton\n * client={client}\n * accountAbstraction={{\n *   chain: sepolia,\n *   sponsorGas: true,\n * }}\n * />;\n * ```\n *\n * ### Enabling sign in with ethereum (Auth)\n *\n * ```tsx\n * <ConnectButton\n * client={client}\n * auth={{\n *   isLoggedIn: async (address) => {\n *     console.log(\"checking if logged in!\", { address });\n *     return await isLoggedIn();\n *   },\n *   doLogin: async (params) => {\n *     console.log(\"logging in!\");\n *     await login(params);\n *   },\n *   getLoginPayload: async ({ address }) =>\n *     generatePayload({ address }),\n *   doLogout: async () => {\n *     console.log(\"logging out!\");\n *     await logout();\n *   },\n * }}\n * />;\n * ```\n *\n * ### Customizing the theme\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    theme=\"light\"\n * />\n * ```\n *\n * For more granular control, you can also pass a custom theme object:\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    theme={lightTheme({\n *      colors: {\n *        modalBg: \"red\",\n *      },\n *    })}\n * />\n * ```\n *\n * [View all available themes properties](https://portal.thirdweb.com/references/typescript/v5/Theme)\n *\n * ### Changing the display language\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    locale=\"ja_JP\"\n * />\n * ```\n *\n * [View all available locales](https://portal.thirdweb.com/references/typescript/v5/LocaleId)\n *\n * ### Customizing the connect button UI\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    connectButton={{\n *      label: \"Sign in to MyApp\",\n *    }}\n * />\n * ```\n *\n * ### Customizing the modal UI\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    connectModal={{\n *      title: \"Sign in to MyApp\",\n *      titleIcon: \"https://example.com/logo.png\",\n *      size: \"compact\",\n *    }}\n * />\n * ```\n *\n * ### Customizing details button UI (after connecting)\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    detailsButton={{\n *      displayBalanceToken: {\n *        [sepolia.id]: \"0x...\", // token address to display balance for\n *        [ethereum.id]: \"0x...\", // token address to display balance for\n *      },\n *    }}\n * />\n * ```\n *\n * [View all available auth helper functions](https://portal.thirdweb.com/references/typescript/v5/createAuth)\n *\n * ### Customizing the Auth sign in button (after connecting, but before authenticating)\n *\n * ```tsx\n * <ConnectButton\n *   client={client}\n *   auth={{ ... }}\n *   signInButton: {\n *     label: \"Authenticate with MyApp\",\n *   },\n * }}\n * />;\n * ```\n *\n * ### Customizing supported Tokens and NFTs\n *\n * These tokens and NFTs will be shown in the modal when the user clicks \"View Assets\", as well as the send token screen.\n *\n * ```tsx\n * <ConnectButton\n *   client={client}\n *   supportedTokens={{\n *     [ethereum.id]: [\n *       {\n *         address: \"0x...\",\n *         name: \"MyToken\",\n *         symbol: \"MT\",\n *         icon: \"https://example.com/icon.png\",\n *       },\n *     ],\n *   }}\n *   supportedNFTs={{\n *     [ethereum.id]: [\n *       \"0x...\", // nft contract address\n *     ],\n *   }}\n * />\n * ```\n *\n * ### Customizing the orders of the tabs in the [View Funds] screen\n * When you click on \"View Assets\", by default the \"Tokens\" tab is shown first.\n * If you want to show the \"NFTs\" tab first, change the order of the asset tabs to: [\"nft\", \"token\"]\n * Note: If an empty array is passed, the [View Funds] button will be hidden\n *\n * ```tsx\n * <ConnectButton\n *   client={client}\n *   detailsModal={{\n *     assetTabs: [\"nft\", \"token\"],\n *   }}\n * />\n * ```\n *\n * @param props\n * Props for the `ConnectButton` component\n *\n * Refer to [ConnectButtonProps](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps) to see the available props.\n *\n * @returns A JSX element that renders the <ConnectButton> component.\n *\n * @component\n * @walletConnection\n */\nexport function ConnectButton(props) {\n  const wallets = useMemo(() => props.wallets || getDefaultWallets({\n    appMetadata: props.appMetadata,\n    chains: props.chains\n  }), [props.wallets, props.appMetadata, props.chains]);\n  const localeQuery = useConnectLocale(props.locale || \"en_US\");\n  const connectionManager = useConnectionManager();\n  usePreloadWalletProviders({\n    wallets,\n    client: props.client\n  });\n  // Add props.chain and props.chains to defined chains store\n  useEffect(() => {\n    if (props.chain) {\n      connectionManager.defineChains([props.chain]);\n    }\n  }, [props.chain, connectionManager]);\n  useEffect(() => {\n    if (props.chains) {\n      connectionManager.defineChains(props.chains);\n    }\n  }, [props.chains, connectionManager]);\n  const size = useMemo(() => {\n    return !canFitWideModal() || wallets.length === 1 ? \"compact\" : props.connectModal?.size || \"compact\";\n  }, [wallets.length, props.connectModal?.size]);\n  const preferredChain = props.accountAbstraction?.chain || props.chain || props.chains?.[0];\n  const autoConnectComp = props.autoConnect !== false && _jsx(AutoConnect, {\n    chain: preferredChain,\n    appMetadata: props.appMetadata,\n    client: props.client,\n    wallets: wallets,\n    timeout: typeof props.autoConnect === \"boolean\" ? undefined : props.autoConnect?.timeout,\n    accountAbstraction: props.accountAbstraction,\n    onConnect: props.onConnect\n  });\n  if (!localeQuery.data) {\n    const combinedClassName = `${props.connectButton?.className || \"\"} ${TW_CONNECT_WALLET}`;\n    return _jsxs(AnimatedButton, {\n      disabled: true,\n      className: combinedClassName,\n      variant: \"primary\",\n      type: \"button\",\n      style: {\n        minWidth: \"165px\",\n        height: \"50px\",\n        ...props.connectButton?.style\n      },\n      children: [autoConnectComp, _jsx(Spinner, {\n        size: \"sm\",\n        color: \"primaryButtonText\"\n      })]\n    });\n  }\n  return _jsxs(WalletUIStatesProvider, {\n    theme: props.theme,\n    isOpen: false,\n    children: [_jsx(ConnectButtonInner, {\n      ...props,\n      connectLocale: localeQuery.data\n    }), _jsx(ConnectModal, {\n      shouldSetActive: true,\n      accountAbstraction: props.accountAbstraction,\n      auth: props.auth,\n      chain: preferredChain,\n      chains: props.chains,\n      client: props.client,\n      connectLocale: localeQuery.data,\n      meta: {\n        title: props.connectModal?.title,\n        titleIconUrl: props.connectModal?.titleIcon,\n        showThirdwebBranding: props.connectModal?.showThirdwebBranding,\n        termsOfServiceUrl: props.connectModal?.termsOfServiceUrl,\n        privacyPolicyUrl: props.connectModal?.privacyPolicyUrl,\n        requireApproval: props.connectModal?.requireApproval\n      },\n      welcomeScreen: props.connectModal?.welcomeScreen,\n      size: size,\n      localeId: props.locale || \"en_US\",\n      onConnect: props.onConnect,\n      recommendedWallets: props.recommendedWallets,\n      showAllWallets: props.showAllWallets,\n      walletConnect: props.walletConnect,\n      wallets: wallets\n    }), autoConnectComp]\n  });\n}\nfunction ConnectButtonInner(props) {\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  const siweAuth = useSiweAuth(activeWallet, activeAccount, props.auth);\n  const [showSignatureModal, setShowSignatureModal] = useState(false);\n  // if wallet gets disconnected suddently, close the signature modal if it's open\n  useEffect(() => {\n    if (!activeAccount) {\n      setShowSignatureModal(false);\n    }\n  }, [activeAccount]);\n  const theme = props.theme || \"dark\";\n  const connectionStatus = useActiveWalletConnectionStatus();\n  const locale = props.connectLocale;\n  const isLoading = connectionStatus === \"connecting\";\n  const connectButtonLabel = props.connectButton?.label || locale.defaultButtonTitle;\n  const setIsWalletModalOpen = useSetIsWalletModalOpen();\n  const supportedTokens = useMemo(() => {\n    if (!props.supportedTokens) {\n      return undefined;\n    }\n    const tokens = {\n      ...defaultTokens\n    };\n    for (const k in props.supportedTokens) {\n      const key = Number(k);\n      const tokenList = props.supportedTokens[key];\n      if (tokenList) {\n        tokens[key] = tokenList;\n      }\n    }\n    return tokens;\n  }, [props.supportedTokens]);\n  if (!activeAccount) {\n    // Connect Wallet button\n    const combinedClassName = `${props.connectButton?.className || \"\"} ${TW_CONNECT_WALLET}`;\n    return _jsx(AnimatedButton, {\n      disabled: isLoading,\n      className: combinedClassName,\n      \"data-theme\": theme,\n      \"data-is-loading\": isLoading,\n      variant: \"primary\",\n      type: \"button\",\n      style: {\n        minWidth: \"165px\",\n        height: \"50px\",\n        fontSize: \"16px\",\n        ...props.connectButton?.style\n      },\n      \"aria-label\": connectionStatus === \"connecting\" ? locale.connecting : typeof connectButtonLabel === \"string\" ? connectButtonLabel : locale.defaultButtonTitle,\n      onClick: () => {\n        setIsWalletModalOpen(true);\n      },\n      \"data-test\": \"connect-wallet-button\",\n      children: isLoading ? _jsx(Spinner, {\n        size: \"sm\",\n        color: \"primaryButtonText\"\n      }) : connectButtonLabel\n    });\n  }\n  if (siweAuth.requiresAuth) {\n    // loading state if loading\n    // TODO: figure out a way to consolidate the loading states with the ones from locale loading\n    if (siweAuth.isLoading || siweAuth.isLoggingIn || siweAuth.isLoggingOut) {\n      const combinedClassName = `${props.connectButton?.className || \"\"} ${TW_CONNECT_WALLET}`;\n      return _jsx(AnimatedButton, {\n        disabled: true,\n        className: combinedClassName,\n        variant: \"primary\",\n        type: \"button\",\n        style: {\n          minWidth: \"165px\",\n          height: \"50px\",\n          ...props.connectButton?.style\n        },\n        children: _jsx(Spinner, {\n          size: \"sm\",\n          color: \"primaryButtonText\"\n        })\n      });\n    }\n    // sign in button + modal if *not* loading and *not* logged in\n    if (!siweAuth.isLoggedIn) {\n      return _jsxs(_Fragment, {\n        children: [_jsx(Button, {\n          variant: \"primary\",\n          type: \"button\",\n          onClick: () => {\n            setShowSignatureModal(true);\n          },\n          className: props.signInButton?.className,\n          style: {\n            minWidth: \"165px\",\n            minHeight: \"50px\",\n            ...props.signInButton?.style\n          },\n          children: siweAuth.isLoggingIn ? _jsx(Spinner, {\n            size: \"sm\",\n            color: \"primaryButtonText\"\n          }) : _jsxs(Container, {\n            flex: \"row\",\n            center: \"y\",\n            gap: \"sm\",\n            children: [_jsx(LockIcon, {\n              size: iconSize.sm\n            }), _jsxs(\"span\", {\n              children: [\" \", props.signInButton?.label || locale.signIn, \" \"]\n            })]\n          })\n        }), _jsx(Modal, {\n          size: \"compact\",\n          open: showSignatureModal,\n          setOpen: setShowSignatureModal,\n          children: _jsx(SignatureScreen, {\n            client: props.client,\n            connectLocale: locale,\n            modalSize: \"compact\",\n            termsOfServiceUrl: props.connectModal?.termsOfServiceUrl,\n            privacyPolicyUrl: props.connectModal?.privacyPolicyUrl,\n            onDone: () => setShowSignatureModal(false),\n            auth: props.auth\n          })\n        })]\n      });\n    }\n    // otherwise, show the details button\n  }\n  return _jsx(AccountProvider, {\n    address: activeAccount.address,\n    client: props.client,\n    children: _jsx(ConnectedWalletDetails, {\n      theme: theme,\n      detailsButton: props.detailsButton,\n      detailsModal: props.detailsModal,\n      supportedTokens: supportedTokens,\n      supportedNFTs: props.supportedNFTs,\n      onDisconnect: info => {\n        // logout on explicit disconnect!\n        if (siweAuth.requiresAuth) {\n          siweAuth.doLogout();\n        }\n        props.onDisconnect?.(info);\n      },\n      chains: props?.chains || [],\n      chain: props.chain,\n      switchButton: props.switchButton,\n      client: props.client,\n      connectLocale: locale,\n      connectOptions: {\n        accountAbstraction: props.accountAbstraction,\n        appMetadata: props.appMetadata,\n        chain: props.chain,\n        chains: props.chains,\n        connectModal: props.connectModal,\n        recommendedWallets: props.recommendedWallets,\n        showAllWallets: props.showAllWallets,\n        walletConnect: props.walletConnect,\n        wallets: props.wallets,\n        hiddenWallets: props.detailsModal?.hiddenWallets\n      }\n    })\n  });\n}\nconst AnimatedButton = /* @__PURE__ */styled(Button)({\n  animation: `${fadeInAnimation} 300ms ease`\n});\n//# sourceMappingURL=ConnectButton.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}