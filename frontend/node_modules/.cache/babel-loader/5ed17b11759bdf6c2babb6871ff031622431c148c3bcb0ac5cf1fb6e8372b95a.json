{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport styled from \"@emotion/styled\";\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport { useCustomTheme } from \"../../../../../../core/design-system/CustomThemeProvider.js\";\nimport { fontSize, iconSize, spacing } from \"../../../../../../core/design-system/index.js\";\nimport { useChainName } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { Skeleton } from \"../../../../components/Skeleton.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { TokenIcon } from \"../../../../components/TokenIcon.js\";\nimport { Container } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Input } from \"../../../../components/formElements.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { TokenSymbol } from \"../../../../components/token/TokenSymbol.js\";\nimport { getBuyTokenAmountFontSize } from \"../utils.js\";\n/**\n * @internal\n */\nexport function BuyTokenInput(props) {\n  const {\n    name\n  } = useChainName(props.chain);\n  const getWidth = () => {\n    let chars = props.value.replace(\".\", \"\").length;\n    const hasDot = props.value.includes(\".\");\n    if (hasDot) {\n      chars += 0.3;\n    }\n    return `calc(${`${Math.max(1, chars)}ch`} + 6px)`;\n  };\n  return _jsxs(Container, {\n    children: [_jsx(\"div\", {\n      onClick: e => {\n        e.currentTarget.querySelector(\"input\")?.focus();\n      },\n      children: _jsxs(Container, {\n        flex: \"row\",\n        center: \"both\",\n        gap: \"xs\",\n        style: {\n          flexWrap: \"nowrap\"\n        },\n        children: [_jsx(Input, {\n          variant: \"outline\",\n          pattern: \"^[0-9]*[.,]?[0-9]*$\",\n          inputMode: \"decimal\",\n          tabIndex: -1,\n          placeholder: \"0\",\n          type: \"text\",\n          \"data-placeholder\": props.value === \"\",\n          value: props.value || \"0\",\n          disabled: props.freezeAmount,\n          onClick: e => {\n            // put cursor at the end of the input\n            if (props.value === \"\") {\n              e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);\n            }\n          },\n          onChange: e => {\n            let value = e.target.value;\n            if (value.startsWith(\".\")) {\n              value = `0${value}`;\n            }\n            const numValue = Number(value);\n            if (Number.isNaN(numValue)) {\n              return;\n            }\n            if (value.startsWith(\"0\") && !value.startsWith(\"0.\")) {\n              props.onChange(value.slice(1));\n            } else {\n              props.onChange(value);\n            }\n          },\n          style: {\n            border: \"none\",\n            fontSize: getBuyTokenAmountFontSize(props.value),\n            boxShadow: \"none\",\n            borderRadius: \"0\",\n            padding: \"0\",\n            paddingBlock: \"2px\",\n            fontWeight: 600,\n            textAlign: \"right\",\n            width: getWidth(),\n            maxWidth: \"calc(100% - 100px)\"\n          }\n        }), _jsx(TokenSymbol, {\n          token: props.token,\n          chain: props.chain,\n          size: \"lg\",\n          color: \"secondaryText\"\n        })]\n      })\n    }), !props.hideTokenSelector && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"sm\"\n      }), _jsx(Container, {\n        flex: \"row\",\n        center: \"x\",\n        children: _jsxs(TokenButton, {\n          variant: \"secondary\",\n          fullWidth: true,\n          style: {\n            fontSize: fontSize.sm\n          },\n          gap: \"xxs\",\n          onClick: props.onSelectToken,\n          disabled: props.freezeChainAndToken,\n          children: [_jsxs(Container, {\n            flex: \"row\",\n            center: \"y\",\n            gap: \"sm\",\n            children: [_jsx(TokenIcon, {\n              token: props.token,\n              chain: props.chain,\n              size: \"md\",\n              client: props.client\n            }), _jsxs(Container, {\n              flex: \"column\",\n              style: {\n                gap: \"4px\"\n              },\n              children: [_jsx(TokenSymbol, {\n                token: props.token,\n                chain: props.chain,\n                size: \"sm\"\n              }), name ? _jsx(Text, {\n                size: \"xs\",\n                color: \"secondaryText\",\n                children: name\n              }) : _jsx(Skeleton, {\n                width: \"90px\",\n                height: fontSize.xs\n              })]\n            })]\n          }), _jsx(ChevronDownIcon, {\n            width: iconSize.sm,\n            height: iconSize.sm,\n            style: {\n              marginLeft: \"auto\"\n            }\n          })]\n        })\n      })]\n    })]\n  });\n}\nconst TokenButton = /* @__PURE__ */styled(Button)(() => {\n  const theme = useCustomTheme();\n  return {\n    background: theme.colors.tertiaryBg,\n    border: `1px solid ${theme.colors.borderColor}`,\n    justifyContent: \"flex-start\",\n    transition: \"background 0.3s\",\n    padding: spacing.sm\n  };\n});\n//# sourceMappingURL=BuyTokenInput.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}