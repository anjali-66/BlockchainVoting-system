{"ast":null,"code":"import { SCWSigner } from './scw/SCWSigner.js';\nimport { WalletLinkSigner } from './walletlink/WalletLinkSigner.js';\nimport { ScopedLocalStorage } from '../core/storage/ScopedLocalStorage.js';\nconst SIGNER_TYPE_KEY = 'SignerType';\nconst storage = new ScopedLocalStorage('CBWSDK', 'SignerConfigurator');\nexport function loadSignerType() {\n  return storage.getItem(SIGNER_TYPE_KEY);\n}\nexport function storeSignerType(signerType) {\n  storage.setItem(SIGNER_TYPE_KEY, signerType);\n}\nexport async function fetchSignerType(params) {\n  const {\n    communicator,\n    metadata,\n    handshakeRequest,\n    callback\n  } = params;\n  listenForWalletLinkSessionRequest(communicator, metadata, callback).catch(() => {});\n  const request = {\n    id: crypto.randomUUID(),\n    event: 'selectSignerType',\n    data: Object.assign(Object.assign({}, params.preference), {\n      handshakeRequest\n    })\n  };\n  const {\n    data\n  } = await communicator.postRequestAndWaitForResponse(request);\n  return data;\n}\nexport function createSigner(params) {\n  const {\n    signerType,\n    metadata,\n    communicator,\n    callback\n  } = params;\n  switch (signerType) {\n    case 'scw':\n      {\n        return new SCWSigner({\n          metadata,\n          callback,\n          communicator\n        });\n      }\n    case 'walletlink':\n      {\n        return new WalletLinkSigner({\n          metadata,\n          callback\n        });\n      }\n  }\n}\nasync function listenForWalletLinkSessionRequest(communicator, metadata, callback) {\n  await communicator.onMessage(({\n    event\n  }) => event === 'WalletLinkSessionRequest');\n  // temporary walletlink signer instance to handle WalletLinkSessionRequest\n  // will revisit this when refactoring the walletlink signer\n  const walletlink = new WalletLinkSigner({\n    metadata,\n    callback\n  });\n  // send wallet link session to popup\n  communicator.postMessage({\n    event: 'WalletLinkUpdate',\n    data: {\n      session: walletlink.getSession()\n    }\n  });\n  // wait for handshake to complete\n  await walletlink.handshake();\n  // send connected status to popup\n  communicator.postMessage({\n    event: 'WalletLinkUpdate',\n    data: {\n      connected: true\n    }\n  });\n}\n//# sourceMappingURL=util.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}