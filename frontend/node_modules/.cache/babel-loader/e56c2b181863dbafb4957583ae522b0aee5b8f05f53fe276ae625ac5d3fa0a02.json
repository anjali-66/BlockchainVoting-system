{"ast":null,"code":"import { balanceOf } from \"../__generated__/IERC721A/read/balanceOf.js\";\nimport { tokensOfOwner } from \"../__generated__/IERC721AQueryable/read/tokensOfOwner.js\";\nimport { tokenOfOwnerByIndex } from \"../__generated__/IERC721Enumerable/read/tokenOfOwnerByIndex.js\";\n/**\n * Retrieves the token IDs owned by a specific address.\n * @param options - The options for retrieving the owned token IDs.\n * @returns A promise that resolves to an array of bigint representing the owned token IDs.\n * @extension ERC721\n * @example\n * ```ts\n * import { getOwnedTokenIds } from \"thirdweb/extensions/erc721\";\n *\n * const ownedTokenIds = await getOwnedTokenIds({\n *  contract,\n *  owner: \"0x1234...\",\n * });\n * ```\n */\nexport async function getOwnedTokenIds(options) {\n  // try both paths, we take whichever one resolves first\n  const result = await Promise.any([\n  // get all the tokens owned by the owner\n  tokensOfOwner({\n    ...options\n  }),\n  // get the balance of the owner and then fetch each token ID\n  // this is the \"fallback\" path really\n  (async () => {\n    const balanceOfResult = await balanceOf(options);\n    const promises = [];\n    for (let i = 0n; i < balanceOfResult; i++) {\n      promises.push(tokenOfOwnerByIndex({\n        ...options,\n        index: i\n      }));\n    }\n    return Promise.all(promises);\n  })()]).catch(() => null);\n  if (result) {\n    return result;\n  }\n  throw new Error(`The contract at ${options.contract.address} on chain ${options.contract.chain.id} does not support the tokenOfOwnerByIndex or tokensOfOwner interface`);\n}\n//# sourceMappingURL=getOwnedTokenIds.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}