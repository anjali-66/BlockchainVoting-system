{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState } from \"react\";\nimport { CustomThemeProvider } from \"../../core/design-system/CustomThemeProvider.js\";\nimport { useConnectionManager } from \"../../core/providers/connection-manager.js\";\nimport { EmbedContainer } from \"./ConnectWallet/Modal/ConnectEmbed.js\";\nimport { useConnectLocale } from \"./ConnectWallet/locale/getConnectLocale.js\";\nimport BuyScreen from \"./ConnectWallet/screens/Buy/BuyScreen.js\";\nimport { ExecutingTxScreen } from \"./TransactionButton/ExecutingScreen.js\";\nimport { DynamicHeight } from \"./components/DynamicHeight.js\";\nimport { Spinner } from \"./components/Spinner.js\";\n/**\n * Embed a prebuilt UI for funding wallets, purchases or transactions with crypto or fiat.\n *\n * @param props - Props of type [`PayEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/PayEmbedProps) to configure the PayEmbed component.\n *\n * @example\n * ### Default configuration\n *\n * By default, the `PayEmbed` component will allows users to fund their wallets with crypto or fiat on any of the supported chains..\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *  />\n * ```\n *\n * ### Top up wallets\n *\n * You can set the `mode` option to `\"fund_wallet\"` to allow users to top up their wallets with crypto or fiat.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   payOptions={{\n *     mode: \"fund_wallet\",\n *     metadata: {\n *       name: \"Get funds\", // title of the payment modal\n *     },\n *     prefillBuy: {\n *       chain: base, // chain to prefill the buy screen with\n *       amount: \"0.01\", // amount to prefill the buy screen with\n *     },\n *   }}\n *  />\n * ```\n *\n * ### Direct Payments\n *\n * You can set the `mode` option to `\"direct_payment\"` to allow users to make a direct payment to a wallet address.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   theme={\"light\"}\n *   payOptions={{\n *     mode: \"direct_payment\",\n *     paymentInfo: {\n *       amount: \"35\",\n *       chain: base,\n *       token: getDefaultToken(base, \"USDC\"),\n *       sellerAddress: \"0x...\", // the wallet address of the seller\n *     },\n *     metadata: {\n *       name: \"Black Hoodie (Size L)\",\n *       image: \"/drip-hoodie.png\",\n *     },\n *   }}\n *  />\n * ```\n *\n * ### Transactions\n *\n * You can set the `mode` option to `\"transaction\"` to allow users to execute a transaction with a different wallet, chain or token.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   payOptions={{\n *     mode: \"transaction\",\n *     // can be any transaction\n *     transaction: claimTo({\n *       contract: nftContract,\n *       quantity: 1n,\n *       tokenId: 0n,\n *       to: \"0x...\",\n *     }),\n *     // this could be any metadata, including NFT metadata\n *     metadata: {\n *       name: \"VIP Ticket\",\n *       image: \"https://...\",\n *     },\n *   }}\n *  />\n * ```\n *\n * You can also handle ERC20 payments by passing `erc20value` to your transaction:\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   payOptions={{\n *     mode: \"transaction\",\n *     transaction: prepareContractCall({\n *       contract: yourContract,\n *       functionName: \"purchase\",\n *       args: [arg1, arg2, ...],\n *       erc20value: {\n *         token: USDC_TOKEN_ADDRESS, // the erc20 token required to purchase\n *         amount: toUnits(\"100\", 6), // the amount of erc20 token required to purchase\n *       },\n *     }),\n *   }}\n *  />\n * ```\n *\n * ### Enable/Disable payment methods\n *\n * You can disable the use of crypto or fiat by setting the `buyWithCrypto` or `buyWithFiat` options to `false`.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   payOptions={{\n *     buyWithFiat: false,\n *   }}\n *  />\n *\n * ### Customize the UI\n *\n * You can customize the UI of the `PayEmbed` component by passing a custom theme object to the `theme` prop.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   theme={darkTheme({\n *     colors: {\n *       modalBg: \"red\",\n *     },\n *   })}\n * />\n * ```\n *\n * Refer to the [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) type for more details.\n *\n * ### Configure the wallet connection\n *\n * You can customize the wallet connection flow by passing a `connectOptions` object to the `PayEmbed` component.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   connectOptions={{\n *     connectModal: {\n *       size: 'compact',\n *       title: \"Sign in\",\n *     }\n *   }}\n * />\n * ```\n *\n * Refer to the [`PayEmbedConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/PayEmbedConnectOptions) type for more details.\n *\n * @buyCrypto\n */\nexport function PayEmbed(props) {\n  const localeQuery = useConnectLocale(props.locale || \"en_US\");\n  const [screen, setScreen] = useState(\"buy\");\n  const theme = props.theme || \"dark\";\n  const connectionManager = useConnectionManager();\n  // Add props.chain and props.chains to defined chains store\n  useEffect(() => {\n    if (props.connectOptions?.chain) {\n      connectionManager.defineChains([props.connectOptions?.chain]);\n    }\n  }, [props.connectOptions?.chain, connectionManager]);\n  useEffect(() => {\n    if (props.connectOptions?.chains) {\n      connectionManager.defineChains(props.connectOptions?.chains);\n    }\n  }, [props.connectOptions?.chains, connectionManager]);\n  let content = null;\n  const metadata = props.payOptions && \"metadata\" in props.payOptions ? props.payOptions.metadata : null;\n  if (!localeQuery.data) {\n    content = _jsx(\"div\", {\n      style: {\n        minHeight: \"350px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: _jsx(Spinner, {\n        size: \"xl\",\n        color: \"secondaryText\"\n      })\n    });\n  } else {\n    content = _jsxs(_Fragment, {\n      children: [screen === \"buy\" && _jsx(BuyScreen, {\n        title: metadata?.name || \"Buy\",\n        isEmbed: true,\n        supportedTokens: props.supportedTokens,\n        theme: theme,\n        client: props.client,\n        connectLocale: localeQuery.data,\n        hiddenWallets: props.hiddenWallets,\n        payOptions: props.payOptions || {\n          mode: \"fund_wallet\"\n        },\n        onDone: () => {\n          if (props.payOptions?.mode === \"transaction\") {\n            setScreen(\"execute-tx\");\n          }\n        },\n        connectOptions: props.connectOptions,\n        onBack: undefined\n      }), screen === \"execute-tx\" && props.payOptions?.mode === \"transaction\" && props.payOptions.transaction && _jsx(ExecutingTxScreen, {\n        tx: props.payOptions.transaction,\n        closeModal: () => {\n          setScreen(\"buy\");\n        },\n        onBack: () => {\n          setScreen(\"buy\");\n        },\n        onTxSent: () => {}\n      })]\n    });\n  }\n  return _jsx(CustomThemeProvider, {\n    theme: theme,\n    children: _jsx(EmbedContainer, {\n      modalSize: \"compact\",\n      style: props.style,\n      className: props.className,\n      children: _jsx(DynamicHeight, {\n        children: content\n      })\n    })\n  });\n}\n//# sourceMappingURL=PayEmbed.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}