{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Vector3 } from 'three';\n/**\n * Moves Three.js objects from one parent to another\n */\nexport const moveChildren = (from, to) => {\n  while (from.children.length) {\n    to.add(from.children.shift());\n  }\n};\n/**\n * Performs a reduction across all the vertices of the input model and all its\n * children. The supplied function takes the reduced value and a vertex and\n * returns the newly reduced value. The value is initialized as zero.\n *\n * Adapted from Three.js, @see https://github.com/mrdoob/three.js/blob/7e0a78beb9317e580d7fa4da9b5b12be051c6feb/src/math/Box3.js#L241\n */\nexport const reduceVertices = (model, func, initialValue) => {\n  let value = initialValue;\n  const vertex = new Vector3();\n  model.traverseVisible(object => {\n    let i, l;\n    object.updateWorldMatrix(false, false);\n    const geometry = object.geometry;\n    if (geometry !== undefined) {\n      if (geometry.isGeometry) {\n        const vertices = geometry.vertices;\n        for (i = 0, l = vertices.length; i < l; i++) {\n          vertex.copy(vertices[i]);\n          if (object.isSkinnedMesh) {\n            object.boneTransform(i, vertex);\n          } else {\n            vertex.applyMatrix4(object.matrixWorld);\n          }\n          value = func(value, vertex);\n        }\n      } else if (geometry.isBufferGeometry) {\n        const {\n          position\n        } = geometry.attributes;\n        if (position !== undefined) {\n          for (i = 0, l = position.count; i < l; i++) {\n            vertex.fromBufferAttribute(position, i);\n            if (object.isSkinnedMesh) {\n              object.boneTransform(i, vertex);\n            } else {\n              vertex.applyMatrix4(object.matrixWorld);\n            }\n            value = func(value, vertex);\n          }\n        }\n      }\n    }\n  });\n  return value;\n};\n//# sourceMappingURL=ModelUtils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}