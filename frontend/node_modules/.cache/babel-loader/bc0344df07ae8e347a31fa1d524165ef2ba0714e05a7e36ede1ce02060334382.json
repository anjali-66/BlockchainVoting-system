{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Suspense, lazy, useState } from \"react\";\nimport { isMobile } from \"../../../../../utils/web/isMobile.js\";\nimport { isEcosystemWallet } from \"../../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { getInstalledWalletProviders } from \"../../../../../wallets/injected/mipdStore.js\";\nimport { iconSize } from \"../../../../core/design-system/index.js\";\nimport { useWalletInfo } from \"../../../../core/utils/wallet.js\";\nimport { getInjectedWalletLocale } from \"../../../wallets/injected/locale/getInjectedWalletLocale.js\";\nimport { GetStartedScreen } from \"../../../wallets/shared/GetStartedScreen.js\";\nimport { LoadingScreen } from \"../../../wallets/shared/LoadingScreen.js\";\nimport { WalletConnectConnection, WalletConnectStandaloneConnection } from \"../../../wallets/shared/WalletConnectConnection.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Container, ModalHeader } from \"../../components/basic.js\";\nimport { Text } from \"../../components/text.js\";\nimport { AccentFailIcon } from \"../icons/AccentFailIcon.js\";\nimport { DeepLinkConnectUI } from \"./DeepLinkConnectUI.js\";\nimport { InjectedConnectUI } from \"./InjectedConnectUI.js\";\nconst CoinbaseSDKWalletConnectUI = /* @__PURE__ */lazy(() => import(\"../../../wallets/shared/CoinbaseSDKConnection.js\"));\nconst InAppWalletConnectUI = /* @__PURE__ */lazy(() => import(\"../../../wallets/in-app/InAppWalletConnectUI.js\"));\nconst EcosystemWalletConnectUI = /* @__PURE__ */lazy(() => import(\"../../../wallets/ecosystem/EcosystemWalletConnectUI.js\"));\n/**\n * @internal\n */\nexport function AnyWalletConnectUI(props) {\n  const [screen, setScreen] = useState(\"main\");\n  const {\n    wallet\n  } = props;\n  const walletInfo = useWalletInfo(props.wallet.id);\n  const localeId = props.connectLocale.id;\n  const localeFnQuery = useQuery({\n    queryKey: [\"injectedWalletLocale\", localeId, walletInfo.data?.name],\n    queryFn: async () => {\n      return getInjectedWalletLocale(localeId);\n    },\n    refetchOnWindowFocus: false,\n    refetchOnMount: false\n  });\n  if (walletInfo.isLoading || !localeFnQuery.data) {\n    return _jsx(LoadingScreen, {});\n  }\n  const localeFn = localeFnQuery.data;\n  if (!walletInfo.data) {\n    const injectedProvider = getInstalledWalletProviders().find(w => w.info.rdns === wallet.id);\n    // Unknown wallet id but it's injected\n    if (injectedProvider) {\n      return _jsx(InjectedConnectUI, {\n        wallet: props.wallet,\n        walletName: injectedProvider.info.name,\n        done: props.done,\n        locale: localeFn(injectedProvider.info.name),\n        onBack: props.onBack,\n        chain: props.chain,\n        client: props.client,\n        size: props.size\n      });\n    }\n    // This will only happen if developer passes a wallet with unknown id and it's not injected\n    // Adding a fallback UI just in case\n    return _jsxs(Container, {\n      animate: \"fadein\",\n      fullHeight: true,\n      flex: \"column\",\n      children: [_jsx(Container, {\n        p: \"lg\",\n        children: _jsx(ModalHeader, {\n          title: \"Not Supported\",\n          onBack: props.onBack\n        })\n      }), _jsxs(Container, {\n        flex: \"column\",\n        expand: true,\n        center: \"both\",\n        p: \"lg\",\n        style: {\n          minHeight: \"300px\"\n        },\n        children: [_jsx(AccentFailIcon, {\n          size: iconSize[\"3xl\"]\n        }), _jsx(Spacer, {\n          y: \"lg\"\n        }), _jsx(Text, {\n          color: \"primaryText\",\n          center: true,\n          children: \"Wallet is not supported\"\n        }), _jsx(Spacer, {\n          y: \"xxl\"\n        })]\n      })]\n    });\n  }\n  const locale = localeFn(walletInfo.data.name);\n  // if wallet can connect to injected wallet + wallet is injected\n  const isInstalled = getInstalledWalletProviders().find(w => w.info.rdns === walletInfo.data.rdns);\n  if (screen === \"get-started\") {\n    return _jsx(GetStartedScreen, {\n      locale: locale,\n      wallet: props.wallet,\n      walletInfo: walletInfo.data,\n      onBack: () => {\n        setScreen(\"main\");\n      },\n      client: props.client\n    });\n  }\n  if (walletInfo.data.deepLink && !isInstalled && wallet.getConfig()?.preferDeepLink && isMobile()) {\n    return _jsx(DeepLinkConnectUI, {\n      wallet: props.wallet,\n      walletInfo: walletInfo.data,\n      deepLinkPrefix: walletInfo.data.deepLink.mobile,\n      locale: locale,\n      onGetStarted: () => {\n        setScreen(\"get-started\");\n      },\n      onBack: props.onBack,\n      client: props.client\n    });\n  }\n  if (walletInfo.data.rdns && isInstalled) {\n    return _jsx(InjectedConnectUI, {\n      wallet: props.wallet,\n      walletName: walletInfo.data.name,\n      done: props.done,\n      locale: locale,\n      onGetStarted: () => {\n        setScreen(\"get-started\");\n      },\n      onBack: props.onBack,\n      chain: props.chain,\n      client: props.client,\n      size: props.size\n    });\n  }\n  // wallet connect\n  if (walletInfo.data.mobile.native || walletInfo.data.mobile.universal) {\n    return _jsx(WalletConnectConnection, {\n      locale: locale,\n      onGetStarted: () => {\n        setScreen(\"get-started\");\n      },\n      onBack: props.onBack,\n      done: props.done,\n      wallet: props.wallet,\n      walletInfo: walletInfo.data,\n      chain: props.chain,\n      chains: props.chains,\n      client: props.client,\n      size: props.size,\n      walletConnect: props.walletConnect\n    });\n  }\n  // wallet connect\n  if (props.wallet.id === \"walletConnect\") {\n    return _jsx(WalletConnectStandaloneConnection, {\n      locale: locale,\n      onBack: props.onBack,\n      done: props.done,\n      wallet: props.wallet,\n      walletInfo: walletInfo.data,\n      setModalVisibility: props.setModalVisibility,\n      chain: props.chain,\n      chains: props.chains,\n      client: props.client,\n      size: props.size,\n      walletConnect: props.walletConnect\n    });\n  }\n  if (props.wallet.id === \"inApp\" || props.wallet.id === \"embedded\") {\n    return _jsx(Suspense, {\n      fallback: _jsx(LoadingScreen, {}),\n      children: _jsx(InAppWalletConnectUI, {\n        wallet: props.wallet,\n        done: props.done,\n        goBack: props.onBack,\n        chain: props.chain,\n        client: props.client,\n        size: props.size,\n        walletConnect: props.walletConnect,\n        connectLocale: props.connectLocale,\n        meta: props.meta\n      })\n    });\n  }\n  if (isEcosystemWallet(props.wallet.id)) {\n    return _jsx(Suspense, {\n      fallback: _jsx(LoadingScreen, {}),\n      children: _jsx(EcosystemWalletConnectUI, {\n        wallet: props.wallet,\n        done: props.done,\n        goBack: props.onBack,\n        chain: props.chain,\n        client: props.client,\n        size: props.size,\n        meta: props.meta,\n        walletConnect: props.walletConnect,\n        connectLocale: props.connectLocale\n      })\n    });\n  }\n  // any other known wallet\n  if (props.wallet.id) {\n    return _jsx(Suspense, {\n      fallback: _jsx(LoadingScreen, {}),\n      children: _jsx(CoinbaseSDKWalletConnectUI, {\n        locale: locale,\n        onGetStarted: () => {\n          setScreen(\"get-started\");\n        },\n        onBack: props.onBack,\n        done: props.done,\n        wallet: props.wallet,\n        walletInfo: walletInfo.data,\n        chain: props.chain,\n        client: props.client,\n        size: props.size\n      })\n    });\n  }\n  // if can't connect in any way - show get started screen\n  return _jsx(GetStartedScreen, {\n    locale: locale,\n    wallet: props.wallet,\n    walletInfo: walletInfo.data,\n    onBack: props.onBack,\n    client: props.client\n  });\n}\n//# sourceMappingURL=AnyWalletConnectUI.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}