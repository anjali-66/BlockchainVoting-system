{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useContext } from \"react\";\nimport { useSendTransactionCore } from \"../../../core/hooks/transaction/useSendTransaction.js\";\nimport { useActiveWallet } from \"../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useSwitchActiveWalletChain } from \"../../../core/hooks/wallets/useSwitchActiveWalletChain.js\";\nimport { SetRootElementContext } from \"../../../core/providers/RootElementContext.js\";\nimport { TransactionModal } from \"../../ui/TransactionButton/TransactionModal.js\";\n/**\n * A hook to send a transaction with from the user's connected wallet.\n *\n * You can send a transaction with a [prepared contract call](https://portal.thirdweb.com/references/typescript/v5/prepareContractCall), a [prepared transaction](https://portal.thirdweb.com/references/typescript/v5/prepareTransaction), or using a write [Extension](https://portal.thirdweb.com/react/v5/extensions).\n *\n * @returns A UseMutationResult object to send a transaction.\n * @param config Configuration for the `useSendTransaction` hook.\n * Refer to [`SendTransactionConfig`](https://portal.thirdweb.com/references/typescript/v5/SendTransactionConfig) for more details.\n * @example\n *\n * ### Sending a prepared contract call\n *\n * ```tsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * import { getContract, prepareContractCall } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * const onClick = () => {\n *   const transaction = prepareContractCall({\n *     contract,\n *     method: \"function transfer(address to, uint256 value)\",\n *     params: [to, value],\n *   });\n *   sendTx(transaction);\n * };\n * ```\n *\n * ### Using a write extension\n *\n * ```tsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * import { mintTo } from \"thirdweb/extensions/erc721\";\n *\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * const onClick = () => {\n *   const transaction = mintTo({\n *     contract,\n *     to: \"0x...\",\n *     nft: {\n *       name: \"NFT Name\",\n *       description: \"NFT Description\",\n *       image: \"https://example.com/image.png\",\n *     },\n *   });\n *   sendTx(transaction);\n * };\n * ```\n *\n * ### Sending a prepared transaction\n *\n * ```tsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * import { prepareTransaction } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * const onClick = () => {\n *   // Send 0.1 SepoliaETH to an address\n *   const transaction = prepareTransaction({\n *     to: \"0x...\",\n *     value: toWei(\"0.1\"),\n *     chain: sepolia,\n *     client: thirdwebClient,\n *   });\n *   sendTx(transaction);\n * };\n * ```\n *\n * @transaction\n */\nexport function useSendTransaction(config = {}) {\n  const switchChain = useSwitchActiveWalletChain();\n  const wallet = useActiveWallet();\n  const setRootEl = useContext(SetRootElementContext);\n  const payModal = config.payModal;\n  let payModalEnabled = true;\n  if (payModal === false || config.gasless) {\n    payModalEnabled = false;\n  }\n  const showPayModal = data => {\n    if (payModal === false) return;\n    setRootEl(_jsx(TransactionModal, {\n      title: payModal?.metadata?.name || \"Transaction\",\n      tx: data.tx,\n      onComplete: data.sendTx,\n      onClose: () => {\n        setRootEl(null);\n        data.rejectTx(new Error(\"User rejected transaction by closing modal\"));\n      },\n      onTxSent: data.resolveTx,\n      client: data.tx.client,\n      localeId: payModal?.locale || \"en_US\",\n      supportedTokens: payModal?.supportedTokens,\n      theme: payModal?.theme || \"dark\",\n      payOptions: {\n        buyWithCrypto: payModal?.buyWithCrypto,\n        buyWithFiat: payModal?.buyWithFiat,\n        purchaseData: payModal?.purchaseData,\n        mode: \"transaction\",\n        transaction: data.tx,\n        metadata: payModal?.metadata,\n        onPurchaseSuccess: payModal?.onPurchaseSuccess\n      }\n    }));\n  };\n  return useSendTransactionCore({\n    showPayModal: !payModalEnabled || payModal === false ? undefined : showPayModal,\n    gasless: config.gasless,\n    switchChain,\n    wallet\n  });\n}\n//# sourceMappingURL=useSendTransaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}