{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Suspense, lazy, useCallback } from \"react\";\nimport { useSiweAuth } from \"../../../../core/hooks/auth/useSiweAuth.js\";\nimport { useActiveAccount } from \"../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useSetActiveWallet } from \"../../../../core/hooks/wallets/useSetActiveWallet.js\";\nimport { useConnectionManager } from \"../../../../core/providers/connection-manager.js\";\nimport { useSetSelectionData } from \"../../../providers/wallet-ui-states-provider.js\";\nimport { LoadingScreen } from \"../../../wallets/shared/LoadingScreen.js\";\nimport { WalletSelector } from \"../WalletSelector.js\";\nimport { onModalUnmount, reservedScreens } from \"../constants.js\";\nimport { SignatureScreen } from \"../screens/SignatureScreen.js\";\nimport { StartScreen } from \"../screens/StartScreen.js\";\nimport { AnyWalletConnectUI } from \"./AnyWalletConnectUI.js\";\nimport { ConnectModalCompactLayout, ConnectModalWideLayout } from \"./ConnectModalSkeleton.js\";\nimport { SmartConnectUI } from \"./SmartWalletConnectUI.js\";\nimport { ScreenSetupContext } from \"./screen.js\";\nconst AllWalletsUI = /* @__PURE__ */lazy(() => import(\"./AllWalletsUI.js\"));\n/**\n * @internal\n */\nexport const ConnectModalContent = props => {\n  const {\n    setModalVisibility,\n    onClose,\n    shouldSetActive\n  } = props;\n  const {\n    screen,\n    setScreen,\n    initialScreen\n  } = props.screenSetup;\n  const setActiveWallet = useSetActiveWallet();\n  const setSelectionData = useSetSelectionData();\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  const siweAuth = useSiweAuth(activeWallet, activeAccount, props.auth);\n  const showSignatureScreen = siweAuth.requiresAuth && !siweAuth.isLoggedIn;\n  const connectionManager = useConnectionManager();\n  const handleConnected = useCallback(wallet => {\n    if (shouldSetActive) {\n      setActiveWallet(wallet);\n    } else {\n      connectionManager.addConnectedWallet(wallet);\n    }\n    if (props.onConnect) {\n      props.onConnect(wallet);\n    }\n    onModalUnmount(() => {\n      setSelectionData({});\n      setModalVisibility(true);\n    });\n    // show sign in screen if required\n    if (showSignatureScreen) {\n      setScreen(reservedScreens.signIn);\n    } else {\n      setScreen(initialScreen);\n      onClose?.();\n    }\n  }, [setModalVisibility, onClose, props.onConnect, setActiveWallet, showSignatureScreen, setScreen, setSelectionData, shouldSetActive, initialScreen, connectionManager]);\n  const handleBack = useCallback(() => {\n    setSelectionData({});\n    setScreen(initialScreen);\n  }, [setScreen, initialScreen, setSelectionData]);\n  const walletList = _jsx(WalletSelector, {\n    title: props.meta.title || props.connectLocale.defaultModalTitle,\n    wallets: props.wallets,\n    selectWallet: newWallet => {\n      if (newWallet.onConnectRequested) {\n        newWallet.onConnectRequested().then(() => setScreen(newWallet)).catch(console.error); // TODO propagate error down\n      } else {\n        setScreen(newWallet);\n      }\n    },\n    onShowAll: () => {\n      setScreen(reservedScreens.showAll);\n    },\n    done: handleConnected,\n    goBack: props.wallets.length > 1 ? handleBack : undefined,\n    setModalVisibility: setModalVisibility,\n    client: props.client,\n    connectLocale: props.connectLocale,\n    hideHeader: props.hideHeader,\n    recommendedWallets: props.recommendedWallets,\n    accountAbstraction: props.accountAbstraction,\n    chain: props.chain,\n    showAllWallets: props.showAllWallets,\n    chains: props.chains,\n    walletConnect: props.walletConnect,\n    meta: props.meta,\n    size: props.size,\n    modalHeader: props.modalHeader,\n    walletIdsToHide: props.walletIdsToHide\n  });\n  const showAll = _jsx(Suspense, {\n    fallback: _jsx(LoadingScreen, {}),\n    children: _jsx(AllWalletsUI, {\n      onBack: handleBack,\n      onSelect: setScreen,\n      client: props.client,\n      connectLocale: props.connectLocale,\n      recommendedWallets: props.recommendedWallets,\n      specifiedWallets: props.wallets,\n      size: props.size\n    })\n  });\n  const getStarted = _jsx(StartScreen, {\n    client: props.client,\n    connectLocale: props.connectLocale,\n    meta: props.meta,\n    welcomeScreen: props.welcomeScreen\n  });\n  const goBack = props.wallets.length > 1 ? handleBack : undefined;\n  const getWalletUI = wallet => {\n    if (props.accountAbstraction) {\n      return _jsx(SmartConnectUI, {\n        accountAbstraction: props.accountAbstraction,\n        done: smartWallet => {\n          handleConnected(smartWallet);\n        },\n        personalWallet: wallet,\n        onBack: goBack,\n        setModalVisibility: props.setModalVisibility,\n        meta: props.meta,\n        size: props.size,\n        chain: props.chain,\n        chains: props.chains,\n        client: props.client,\n        walletConnect: props.walletConnect,\n        connectLocale: props.connectLocale\n      }, wallet.id);\n    }\n    return _jsx(AnyWalletConnectUI, {\n      wallet: wallet,\n      onBack: goBack,\n      done: () => {\n        handleConnected(wallet);\n      },\n      setModalVisibility: props.setModalVisibility,\n      chain: props.chain,\n      chains: props.chains,\n      client: props.client,\n      meta: props.meta,\n      size: props.size,\n      walletConnect: props.walletConnect,\n      connectLocale: props.connectLocale\n    }, wallet.id);\n  };\n  const signatureScreen = _jsx(SignatureScreen, {\n    onDone: onClose,\n    modalSize: props.size,\n    termsOfServiceUrl: props.meta.termsOfServiceUrl,\n    privacyPolicyUrl: props.meta.privacyPolicyUrl,\n    auth: props.auth,\n    client: props.client,\n    connectLocale: props.connectLocale\n  });\n  return _jsx(ScreenSetupContext.Provider, {\n    value: props.screenSetup,\n    children: props.size === \"wide\" ? _jsx(ConnectModalWideLayout, {\n      left: walletList,\n      right: _jsxs(_Fragment, {\n        children: [screen === reservedScreens.signIn && signatureScreen, screen === reservedScreens.main && getStarted, screen === reservedScreens.getStarted && getStarted, screen === reservedScreens.showAll && showAll, typeof screen !== \"string\" && getWalletUI(screen)]\n      })\n    }) : _jsxs(ConnectModalCompactLayout, {\n      children: [screen === reservedScreens.signIn && signatureScreen, screen === reservedScreens.main && walletList, screen === reservedScreens.getStarted && getStarted, screen === reservedScreens.showAll && showAll, typeof screen !== \"string\" && getWalletUI(screen)]\n    })\n  });\n};\n//# sourceMappingURL=ConnectModalContent.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}