{"ast":null,"code":"import { labelhash } from \"viem\";\nimport { stringToBytes } from \"../encoding/to-bytes.js\";\nimport { encodeLabelhash } from \"./encodeLabelhash.js\";\n/**\n * Encodes a DNS packet into a ByteArray containing a UDP payload.\n * @param packet\n * @internal\n */\nexport function packetToBytes(packet) {\n  // strip leading and trailing `.`\n  const value = packet.replace(/^\\.|\\.$/gm, \"\");\n  if (value.length === 0) {\n    return new Uint8Array(1);\n  }\n  const bytes = new Uint8Array(stringToBytes(value).byteLength + 2);\n  let offset = 0;\n  const list = value.split(\".\");\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i];\n    let encoded = stringToBytes(item);\n    // if the length is > 255, make the encoded label value a labelhash\n    // this is compatible with the universal resolver\n    if (encoded.byteLength > 255) {\n      encoded = stringToBytes(encodeLabelhash(labelhash(item)));\n    }\n    bytes[offset] = encoded.length;\n    bytes.set(encoded, offset + 1);\n    offset += encoded.length + 1;\n  }\n  if (bytes.byteLength !== offset + 1) {\n    return bytes.slice(0, offset + 1);\n  }\n  return bytes;\n}\n//# sourceMappingURL=packetToBytes.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}