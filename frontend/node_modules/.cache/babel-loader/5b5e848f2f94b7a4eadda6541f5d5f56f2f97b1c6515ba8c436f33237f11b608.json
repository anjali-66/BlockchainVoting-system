{"ast":null,"code":"import { zeroHash } from '../../../constants/bytes.js';\nimport { AbiConstructorNotFoundError, AbiConstructorParamsNotFoundError } from '../../../errors/abi.js';\nimport { encodeAbiParameters } from '../../../utils/abi/encodeAbiParameters.js';\nimport { encodeFunctionData } from '../../../utils/abi/encodeFunctionData.js';\nimport { toHex } from '../../../utils/encoding/toHex.js';\nimport { contractDeployerAbi } from '../../constants/abis.js';\nimport { accountAbstractionVersion1 } from '../../constants/contract.js';\nimport { hashBytecode } from '../hashBytecode.js';\nconst docsPath = '/docs/contract/encodeDeployData';\nexport function encodeDeployData(parameters) {\n  const {\n    abi,\n    args,\n    bytecode,\n    deploymentType,\n    salt\n  } = parameters;\n  if (!args || args.length === 0) {\n    const {\n      functionName,\n      argsContractDeployer\n    } = getDeploymentDetails(deploymentType, salt ?? zeroHash, toHex(hashBytecode(bytecode)), '0x');\n    return encodeFunctionData({\n      abi: contractDeployerAbi,\n      functionName,\n      args: argsContractDeployer\n    });\n  }\n  const description = abi.find(x => 'type' in x && x.type === 'constructor');\n  if (!description) throw new AbiConstructorNotFoundError({\n    docsPath\n  });\n  if (!('inputs' in description)) throw new AbiConstructorParamsNotFoundError({\n    docsPath\n  });\n  if (!description.inputs || description.inputs.length === 0) throw new AbiConstructorParamsNotFoundError({\n    docsPath\n  });\n  const data = encodeAbiParameters(description.inputs, args);\n  const {\n    functionName,\n    argsContractDeployer\n  } = getDeploymentDetails(deploymentType, salt ?? zeroHash, toHex(hashBytecode(bytecode)), data);\n  return encodeFunctionData({\n    abi: contractDeployerAbi,\n    functionName,\n    args: argsContractDeployer\n  });\n}\nfunction getDeploymentDetails(deploymentType, salt, bytecodeHash, data) {\n  const contractDeploymentArgs = [salt, bytecodeHash, data];\n  const deploymentOptions = {\n    create: {\n      functionName: 'create',\n      argsContractDeployer: contractDeploymentArgs\n    },\n    create2: {\n      functionName: 'create2',\n      argsContractDeployer: contractDeploymentArgs\n    },\n    createAccount: {\n      functionName: 'createAccount',\n      argsContractDeployer: [...contractDeploymentArgs, accountAbstractionVersion1]\n    },\n    create2Account: {\n      functionName: 'create2Account',\n      argsContractDeployer: [...contractDeploymentArgs, accountAbstractionVersion1]\n    }\n  };\n  const deploymentKey = deploymentType || 'create';\n  return deploymentOptions[deploymentKey];\n}\n//# sourceMappingURL=encodeDeployData.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}