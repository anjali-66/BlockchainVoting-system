{"ast":null,"code":"import { useQuery } from \"@tanstack/react-query\";\nimport { useMemo } from \"react\";\nimport { resolveArweaveScheme } from \"../../../../utils/arweave.js\";\nimport { resolveScheme } from \"../../../../utils/ipfs.js\";\nimport { resolveMimeType } from \"../../utils/resolveMimeType.js\";\n/**\n * @internal\n */\nexport function useResolvedMediaType(client, uri, mimeType, gatewayUrl) {\n  const resolvedUrl = useMemo(() => {\n    if (!uri) {\n      return \"\";\n    }\n    if (uri.startsWith(\"ar://\")) {\n      return resolveArweaveScheme({\n        uri,\n        gatewayUrl\n      });\n    }\n    if (gatewayUrl) {\n      return uri.replace(\"ipfs://\", gatewayUrl);\n    }\n    try {\n      return resolveScheme({\n        client,\n        uri\n      });\n    } catch {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    }\n  }, [uri, gatewayUrl, client]);\n  const resolvedMimeType = useQuery({\n    queryKey: [\"mime-type\", resolvedUrl],\n    queryFn: () => resolveMimeType(resolvedUrl),\n    enabled: !!resolvedUrl && !mimeType,\n    initialData: mimeType\n  });\n  return {\n    mediaInfo: {\n      url: resolvedUrl,\n      mimeType: resolvedMimeType.data\n    },\n    isFetched: resolvedMimeType.isFetched || !!mimeType\n  };\n}\n//# sourceMappingURL=useResolvedMediaType.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}