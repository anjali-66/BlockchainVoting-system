{"ast":null,"code":"import { encode } from \"../../transaction/actions/encode.js\";\nimport { getAddress } from \"../../utils/address.js\";\nimport { numberToHex } from \"../../utils/encoding/hex.js\";\nimport { resolvePromisedValue } from \"../../utils/promise/resolve-promised-value.js\";\nimport { isCoinbaseSDKWallet } from \"../coinbase/coinbase-web.js\";\nimport { isInAppWallet } from \"../in-app/core/wallet/index.js\";\nimport { getInjectedProvider } from \"../injected/index.js\";\nimport { isSmartWallet } from \"../smart/index.js\";\nimport { isWalletConnect } from \"../wallet-connect/controller.js\";\n/**\n * Send [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) calls to a wallet.\n * This function works with all Thirdweb wallets (in-app and smart) and certain injected wallets that already support EIP-5792.\n * Transactions will be bundled and sponsored when those capabilities are supported, otherwise they will be sent as individual transactions.\n *\n *  This function is dependent on the wallet's support for EIP-5792 and could fail.\n *\n * @param {SendCallsOptions} options\n * @param {Wallet} options.wallet - The wallet to send the calls to.\n * @param {PreparedSendCall[]} options.calls - An array of prepared transactions to send.\n * @param {WalletSendCallsParameters[number][\"capabilities\"]} [options.capabilities] - Capabilities objects to use, see the [EIP-5792 spec](https://eips.ethereum.org/EIPS/eip-5792) for details.\n * @param {string} [options.version=\"1.0\"] - The `wallet_sendCalls` version to use, defaults to \"1.0\".\n * @param {Chain} [options.chain] - A {@link Chain} instance to override the wallet's current chain.\n * @throws an error if the wallet does not support EIP-5792.\n * @returns The ID of the bundle of the calls.\n *\n * @see getCallsStatus for how to retrieve the status of the bundle.\n * @see getCapabilities for how to retrieve the capabilities of the wallet.\n * @beta\n * @example\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { sendCalls } from \"thirdweb/wallets/eip5792\";\n *\n * const client = createThirdwebClient({ clientId: ... });\n * const wallet = createWallet(\"com.coinbase.wallet\");\n *\n * const sendTx1 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x33d9B8BEfE81027E2C859EDc84F5636cbb202Ed6\",\n    });\n * const sendTx2 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x2a4f24F935Eb178e3e7BA9B53A5Ee6d8407C0709\",\n    });\n * const bundleId = await sendCalls({\n *   wallet,\n *   client,\n *   calls: [sendTx1, sendTx2],\n * });\n * ```\n * Sponsor transactions with a paymaster:\n * ```ts\n * const bundleId = await sendCalls({\n *   wallet,\n *   client,\n *   calls: [send1, send2],\n *   capabilities: {\n *     paymasterService: {\n *       url: `https://${CHAIN.id}.bundler.thirdweb.com/${client.clientId}`\n *     }\n *   }\n * });\n *  We recommend proxying any paymaster calls via an API route you setup and control.\n * ```\n * @extension EIP5792\n */\nexport async function sendCalls(options) {\n  const {\n    wallet,\n    calls,\n    capabilities,\n    version = \"1.0\",\n    chain = wallet.getChain()\n  } = options;\n  if (!chain) {\n    throw new Error(`Cannot send calls, no active chain found for wallet: ${wallet.id}`);\n  }\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(`Cannot send calls, no account connected for wallet: ${wallet.id}`);\n  }\n  // These conveniently operate the same\n  if (isSmartWallet(wallet) || isInAppWallet(wallet)) {\n    const {\n      inAppWalletSendCalls\n    } = await import(\"../in-app/core/eip5972/in-app-wallet-calls.js\");\n    return inAppWalletSendCalls({\n      account,\n      calls\n    });\n  }\n  const preparedCalls = await Promise.all(calls.map(async call => {\n    const {\n      to,\n      value\n    } = call;\n    if (to === undefined && call.data === undefined) {\n      throw new Error(\"Cannot send call, `to` or `data` must be provided.\");\n    }\n    const [_to, _data, _value] = await Promise.all([resolvePromisedValue(to), encode(call), resolvePromisedValue(value)]);\n    return {\n      to: _to,\n      data: _data,\n      value: typeof _value === \"bigint\" || typeof _value === \"number\" ? numberToHex(_value) : undefined\n    };\n  }));\n  const injectedWalletCallParams = [{\n    from: getAddress(account.address),\n    calls: preparedCalls,\n    capabilities,\n    version,\n    chainId: numberToHex(chain.id)\n  }];\n  if (isCoinbaseSDKWallet(wallet)) {\n    const {\n      coinbaseSDKWalletSendCalls\n    } = await import(\"../coinbase/coinbase-web.js\");\n    return coinbaseSDKWalletSendCalls({\n      wallet,\n      params: injectedWalletCallParams\n    });\n  }\n  if (isWalletConnect(wallet)) {\n    throw new Error(\"sendCalls is not yet supported for Wallet Connect\");\n  }\n  // Default to injected wallet\n  const provider = getInjectedProvider(wallet.id);\n  try {\n    return await provider.request({\n      method: \"wallet_sendCalls\",\n      params: injectedWalletCallParams // The viem type definition is slightly different\n    });\n  } catch (error) {\n    if (/unsupport|not support/i.test(error.message)) {\n      throw new Error(`${wallet.id} does not support wallet_sendCalls, reach out to them directly to request EIP-5792 support.`);\n    }\n    throw error;\n  }\n}\n//# sourceMappingURL=send-calls.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}