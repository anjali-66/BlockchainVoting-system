{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getFunctionId } from \"../../../../../utils/function-id.js\";\nimport { getWalletInfo } from \"../../../../../wallets/__generated__/getWalletInfo.js\";\nimport { useWalletContext } from \"./provider.js\";\n/**\n * This component fetches then shows the name of a wallet.\n * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { WalletProvider, WalletName } from \"thirdweb/react\";\n *\n * <WalletProvider id=\"io.metamask\">\n *   <WalletName  />\n * </WalletProvider>\n * ```\n * Result:\n * ```html\n * <span>MetaMask</span>\n * ```\n *\n * ### Show a loading sign when the name is being fetched\n * ```tsx\n * import { WalletProvider, WalletName } from \"thirdweb/react\";\n *\n * <WalletProvider {...props}>\n *   <WalletName loadingComponent={<Spinner />} />\n * </WalletProvider>\n * ```\n *\n * ### Fallback to something when the name fails to resolve\n * ```tsx\n * <WalletProvider {...props}>\n *   <WalletName fallbackComponent={<span>Failed to load</span>} />\n * </WalletProvider>\n * ```\n *\n * ### Custom query options for useQuery\n * This component uses `@tanstack-query`'s useQuery internally.\n * You can use the `queryOptions` prop for more fine-grained control\n * ```tsx\n * <WalletName\n *   queryOptions={{\n *     enabled: isEnabled,\n *     retry: 4,\n *   }}\n * />\n * @component\n * @beta\n * @wallet\n */\nexport function WalletName({\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  formatFn,\n  ...restProps\n}) {\n  const nameQuery = useWalletName({\n    queryOptions,\n    formatFn\n  });\n  if (nameQuery.isLoading) {\n    return loadingComponent || null;\n  }\n  if (!nameQuery.data) {\n    return fallbackComponent || null;\n  }\n  return _jsx(\"span\", {\n    ...restProps,\n    children: nameQuery.data\n  });\n}\n/**\n * @internal\n */\nfunction useWalletName(props) {\n  const {\n    id\n  } = useWalletContext();\n  const nameQuery = useQuery({\n    queryKey: getQueryKeys({\n      id,\n      formatFn: props.formatFn\n    }),\n    queryFn: async () => fetchWalletName({\n      id,\n      formatFn: props.formatFn\n    }),\n    ...props.queryOptions\n  });\n  return nameQuery;\n}\n/**\n * @internal Exported for tests only\n */\nexport function getQueryKeys(props) {\n  if (typeof props.formatFn === \"function\") {\n    return [\"walletName\", props.id, {\n      resolver: getFunctionId(props.formatFn)\n    }];\n  }\n  return [\"walletName\", props.id];\n}\n/**\n * @internal Exported for tests only\n */\nexport async function fetchWalletName(props) {\n  const info = await getWalletInfo(props.id);\n  if (typeof props.formatFn === \"function\") {\n    return props.formatFn(info.name);\n  }\n  return info.name;\n}\n//# sourceMappingURL=name.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}