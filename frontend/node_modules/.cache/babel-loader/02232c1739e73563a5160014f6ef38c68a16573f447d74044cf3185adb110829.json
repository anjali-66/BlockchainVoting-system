{"ast":null,"code":"/**\n * Run a function whenever dependencies change\n * @param effectFn - Side effect function to run\n * @param dependencies - The stores it depends on\n * @param runOnMount - Whether to run the effect function immediately or not\n * @example\n * ```ts\n * const foo = computed(() => bar.getValue() + baz.getValue(), [bar, baz]);\n * ```\n * @returns A function to stop listening to changes in the dependencies\n */\nexport function effect(\n// pass the values of the dependencies to the computation function\neffectFn,\n// biome-ignore lint/suspicious/noExplicitAny: library function that accepts any store type\ndependencies, runOnMount = true) {\n  if (runOnMount) {\n    effectFn();\n  }\n  // when any of the dependencies change, recompute the value and set it\n  const unsubscribeList = dependencies.map(store => {\n    return store.subscribe(() => {\n      effectFn();\n    });\n  });\n  return () => {\n    for (const fn of unsubscribeList) {\n      fn();\n    }\n  };\n}\n//# sourceMappingURL=effect.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}