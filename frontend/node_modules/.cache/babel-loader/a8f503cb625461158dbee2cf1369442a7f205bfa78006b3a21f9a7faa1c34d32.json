{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { ArrowRightIcon } from \"@radix-ui/react-icons\";\nimport { useState } from \"react\";\nimport { iconSize, radius, spacing } from \"../../../core/design-system/index.js\";\nimport { Spacer } from \"../../ui/components/Spacer.js\";\nimport { IconButton } from \"../../ui/components/buttons.js\";\nimport { Input, InputContainer } from \"../../ui/components/formElements.js\";\nimport { Text } from \"../../ui/components/text.js\";\nimport { CountrySelector, getCountrySelector } from \"./CountrySelector.js\";\nexport function InputSelectionUI(props) {\n  const [countryCodeInfo, setCountryCodeInfo] = useState(props.defaultSmsCountryCode ? getCountrySelector(props.defaultSmsCountryCode) : \"US +1\");\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState();\n  const [showError, setShowError] = useState(false);\n  const handleSelect = () => {\n    setShowError(true);\n    if (!input || !!error) {\n      return;\n    }\n    props.onSelect(props.format === \"phone\" ? `+${countryCodeInfo.split(\"+\")[1]}${input}` : input);\n  };\n  const renderingError = showError && !!error || !input && !!props.emptyErrorMessage && showError;\n  return _jsxs(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    children: [_jsxs(InputContainer, {\n      style: {\n        position: \"relative\",\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      \"data-error\": renderingError,\n      children: [props.format === \"phone\" && _jsx(CountrySelector, {\n        countryCode: countryCodeInfo,\n        setCountryCode: setCountryCodeInfo\n      }), _jsx(Input, {\n        tabIndex: -1,\n        placeholder: props.placeholder,\n        style: {\n          flexGrow: 1,\n          padding: `${spacing.sm} ${props.format === \"phone\" ? 0 : spacing.sm}`\n        },\n        variant: \"transparent\",\n        type: props.type,\n        name: props.name,\n        value: input,\n        disabled: props.disabled,\n        onChange: e => {\n          setInput(e.target.value);\n          if (props.errorMessage) {\n            setError(props.errorMessage(e.target.value));\n          } else {\n            setError(undefined);\n          }\n        },\n        onKeyDown: e => {\n          if (e.key === \"Enter\") {\n            handleSelect();\n          }\n        }\n      }), _jsx(IconButton, {\n        onClick: handleSelect,\n        disabled: props.disabled,\n        style: {\n          padding: spacing.sm,\n          borderRadius: `0 ${radius.md} ${radius.md} 0`\n        },\n        children: _jsx(ArrowRightIcon, {\n          width: iconSize.md,\n          height: iconSize.md\n        })\n      })]\n    }), showError && error && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"xs\"\n      }), _jsx(Text, {\n        color: \"danger\",\n        size: \"sm\",\n        children: error\n      })]\n    }), !(showError && error) && !input && props.emptyErrorMessage && showError && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"xs\"\n      }), _jsx(Text, {\n        color: \"danger\",\n        size: \"sm\",\n        children: props.emptyErrorMessage\n      })]\n    })]\n  });\n}\n//# sourceMappingURL=InputSelectionUI.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}