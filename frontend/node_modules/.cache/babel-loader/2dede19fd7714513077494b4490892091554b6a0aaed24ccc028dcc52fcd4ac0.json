{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { hexToNumber } from \"@noble/curves/abstract/utils\";\nimport { useId, useMemo } from \"react\";\nconst COLOR_OPTIONS = [[\"#fca5a5\", \"#b91c1c\"], [\"#fdba74\", \"#c2410c\"], [\"#fcd34d\", \"#b45309\"], [\"#fde047\", \"#a16207\"], [\"#a3e635\", \"#4d7c0f\"], [\"#86efac\", \"#15803d\"], [\"#67e8f9\", \"#0e7490\"], [\"#7dd3fc\", \"#0369a1\"], [\"#93c5fd\", \"#1d4ed8\"], [\"#a5b4fc\", \"#4338ca\"], [\"#c4b5fd\", \"#6d28d9\"], [\"#d8b4fe\", \"#7e22ce\"], [\"#f0abfc\", \"#a21caf\"], [\"#f9a8d4\", \"#be185d\"], [\"#fda4af\", \"#be123c\"]];\n/**\n * A unique gradient avatar based on the provided address.\n * @param props The component props.\n * @param props.address The address to generate the gradient with.\n * @param props.style The CSS style for the component - excluding `backgroundImage`\n * @param props.className The className for the component\n * @param props.size The size of each side of the square avatar (in pixels). This prop will override the `width` and `height` attributes from the `style` prop.\n * @component\n * @wallet\n * @example\n * ```tsx\n * import { Blobbie } from \"thirdweb/react\";\n *\n * <Blobbie address=\"0x....\" className=\"w-10 h-10\" />\n * ```\n */\nexport function Blobbie(props) {\n  const id = useId();\n  const colors = useMemo(() => COLOR_OPTIONS[Number(hexToNumber(props.address.slice(2, 4))) % COLOR_OPTIONS.length], [props.address]);\n  return _jsx(\"div\", {\n    id: id,\n    style: {\n      ...props.style,\n      backgroundImage: `radial-gradient(ellipse at left bottom, ${colors[0]}, ${colors[1]})`,\n      ...(props.size ? {\n        width: `${props.size}px`,\n        height: `${props.size}px`\n      } : undefined)\n    },\n    className: props.className\n  });\n}\n//# sourceMappingURL=Blobbie.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}