{"ast":null,"code":"import { useQuery } from \"@tanstack/react-query\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { getProfiles } from \"../../../../wallets/in-app/web/lib/auth/index.js\";\nimport { useConnectedWallets } from \"../../../core/hooks/wallets/useConnectedWallets.js\";\n/**\n * Retrieves all linked profiles of the connected in-app or ecosystem account.\n *\n * @returns A React Query result containing the linked profiles for the connected in-app account.\n *  This hook will only run if the connected wallet supports account linking.\n *\n * @example\n * ```jsx\n * import { useProfiles } from \"thirdweb/react\";\n *\n * const { data: profiles } = useProfiles({\n *   client,\n * });\n *\n * console.log(\"Type:\", profiles[0].type); // \"discord\"\n * console.log(\"Email:\", profiles[0].details.email); // \"john.doe@example.com\"\n * ```\n *\n * @wallet\n */\nexport function useProfiles(args) {\n  const wallets = useConnectedWallets();\n  const enabled = wallets.length > 0 && wallets.some(w => w.id === \"inApp\" || isEcosystemWallet(w));\n  return useQuery({\n    queryKey: [\"profiles\", wallets.map(w => `${w.id}-${w.getAccount()?.address}`)],\n    enabled,\n    queryFn: async () => {\n      const ecosystemWallet = wallets.find(w => isEcosystemWallet(w));\n      const ecosystem = ecosystemWallet ? {\n        id: ecosystemWallet.id,\n        partnerId: ecosystemWallet.getConfig()?.partnerId\n      } : undefined;\n      return getProfiles({\n        client: args.client,\n        ecosystem\n      });\n    }\n  });\n}\n//# sourceMappingURL=useProfiles.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}