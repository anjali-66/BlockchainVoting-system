{"ast":null,"code":"// Copyright (c) 2018-2023 Coinbase, Inc. <https://www.coinbase.com/>\nimport { sha256 } from '@noble/hashes/sha256';\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { randomBytesHex } from '../../../../core/type/util.js';\nconst STORAGE_KEY_SESSION_ID = 'session:id';\nconst STORAGE_KEY_SESSION_SECRET = 'session:secret';\nconst STORAGE_KEY_SESSION_LINKED = 'session:linked';\nexport class WalletLinkSession {\n  constructor(storage, id, secret, linked = false) {\n    this.storage = storage;\n    this.id = id;\n    this.secret = secret;\n    this.key = bytesToHex(sha256(`${id}, ${secret} WalletLink`));\n    this._linked = !!linked;\n  }\n  static create(storage) {\n    const id = randomBytesHex(16);\n    const secret = randomBytesHex(32);\n    return new WalletLinkSession(storage, id, secret).save();\n  }\n  static load(storage) {\n    const id = storage.getItem(STORAGE_KEY_SESSION_ID);\n    const linked = storage.getItem(STORAGE_KEY_SESSION_LINKED);\n    const secret = storage.getItem(STORAGE_KEY_SESSION_SECRET);\n    if (id && secret) {\n      return new WalletLinkSession(storage, id, secret, linked === '1');\n    }\n    return null;\n  }\n  get linked() {\n    return this._linked;\n  }\n  set linked(val) {\n    this._linked = val;\n    this.persistLinked();\n  }\n  save() {\n    this.storage.setItem(STORAGE_KEY_SESSION_ID, this.id);\n    this.storage.setItem(STORAGE_KEY_SESSION_SECRET, this.secret);\n    this.persistLinked();\n    return this;\n  }\n  persistLinked() {\n    this.storage.setItem(STORAGE_KEY_SESSION_LINKED, this._linked ? '1' : '0');\n  }\n}\n//# sourceMappingURL=WalletLinkSession.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}