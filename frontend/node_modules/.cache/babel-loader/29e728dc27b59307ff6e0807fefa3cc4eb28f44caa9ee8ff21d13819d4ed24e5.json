{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo } from \"react\";\nimport { encode } from \"uqr\";\n/**\n * @internal\n */\nfunction QRCodeRenderer({\n  ecl = \"M\",\n  size: sizeProp = 200,\n  uri,\n  clearSize = 0,\n  image,\n  imageBackground = \"transparent\"\n}) {\n  const logoSize = clearSize;\n  const size = sizeProp - 10 * 2;\n  const dots = useMemo(() => {\n    const dotsArray = [];\n    const matrix = encode(uri, {\n      ecc: ecl,\n      border: 0\n    }).data;\n    const cellSize = size / matrix.length;\n    const qrList = [{\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: 0,\n      y: 1\n    }];\n    for (const {\n      x,\n      y\n    } of qrList) {\n      const x1 = (matrix.length - 7) * cellSize * x;\n      const y1 = (matrix.length - 7) * cellSize * y;\n      for (let i = 0; i < 3; i++) {\n        dotsArray.push(_jsx(\"rect\", {\n          fill: i % 2 !== 0 ? \"var(--ck-qr-background, var(--ck-body-background))\" : \"var(--ck-qr-dot-color)\",\n          rx: (i - 2) * -5 + (i === 0 ? 2 : 3),\n          ry: (i - 2) * -5 + (i === 0 ? 2 : 3),\n          width: cellSize * (7 - i * 2),\n          height: cellSize * (7 - i * 2),\n          x: x1 + cellSize * i,\n          y: y1 + cellSize * i\n        }, `${i}-${x}-${y}`));\n      }\n    }\n    if (image) {\n      const x1 = (matrix.length - 7) * cellSize * 1;\n      const y1 = (matrix.length - 7) * cellSize * 1;\n      dotsArray.push(_jsxs(_Fragment, {\n        children: [_jsx(\"rect\", {\n          fill: imageBackground,\n          rx: (0 - 2) * -5 + 2,\n          ry: (0 - 2) * -5 + 2,\n          width: cellSize * (7 - 0 * 2),\n          height: cellSize * (7 - 0 * 2),\n          x: x1 + cellSize * 0,\n          y: y1 + cellSize * 0\n        }), _jsx(\"foreignObject\", {\n          width: cellSize * (7 - 0 * 2),\n          height: cellSize * (7 - 0 * 2),\n          x: x1 + cellSize * 0,\n          y: y1 + cellSize * 0,\n          children: _jsx(\"div\", {\n            style: {\n              borderRadius: (0 - 2) * -5 + 2,\n              overflow: \"hidden\"\n            },\n            children: image\n          })\n        })]\n      }));\n    }\n    const clearArenaSize = Math.floor((logoSize + 25) / cellSize);\n    const matrixMiddleStart = matrix.length / 2 - clearArenaSize / 2;\n    const matrixMiddleEnd = matrix.length / 2 + clearArenaSize / 2 - 1;\n    matrix.forEach((row, i) => {\n      row.forEach((_, j) => {\n        if (matrix[i]?.[j]) {\n          // Do not render dots under position squares\n          if (!(i < 7 && j < 7 || i > matrix.length - 8 && j < 7 || i < 7 && j > matrix.length - 8)) {\n            //if (image && i > matrix.length - 9 && j > matrix.length - 9) return;\n            if (image || !(i > matrixMiddleStart && i < matrixMiddleEnd && j > matrixMiddleStart && j < matrixMiddleEnd)) {\n              dotsArray.push(_jsx(\"circle\", {\n                cx: i * cellSize + cellSize / 2,\n                cy: j * cellSize + cellSize / 2,\n                fill: \"var(--ck-qr-dot-color)\",\n                r: cellSize / 3\n              }, `circle-${i}-${\n              // biome-ignore lint/suspicious/noArrayIndexKey: its the only thing available for the key here\n              j}`));\n            }\n          }\n        }\n      });\n    });\n    return dotsArray;\n  }, [ecl, image, imageBackground, logoSize, size, uri]);\n  return _jsxs(\"svg\", {\n    height: size,\n    width: size,\n    viewBox: `0 0 ${size} ${size}`,\n    style: {\n      width: size,\n      height: size\n    },\n    role: \"presentation\",\n    children: [_jsx(\"rect\", {\n      fill: \"transparent\",\n      height: size,\n      width: size\n    }), dots]\n  });\n}\nexport default QRCodeRenderer;\n//# sourceMappingURL=QRCodeRenderer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}