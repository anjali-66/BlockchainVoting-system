{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { resolveAvatar } from \"../../../../../extensions/ens/resolve-avatar.js\";\nimport { resolveName } from \"../../../../../extensions/ens/resolve-name.js\";\nimport { getSocialProfiles } from \"../../../../../social/profiles.js\";\nimport { parseAvatarRecord } from \"../../../../../utils/ens/avatar.js\";\nimport { useAccountContext } from \"./provider.js\";\n/**\n * The component for showing the avatar of the account.\n * If fetches all the social profiles linked to your wallet, including: Farcaster, ENS, Lens (more to be added)\n * You can choose which social profile you want to display. Defaults to the first item in the list.\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { AccountProvider, AccountAvatar } from \"thirdweb/react\";\n *\n * <AccountProvider address=\"0x...\">\n *   <AccountAvatar />\n * </AccountProvider>\n * ```\n * Result: An <img /> component, if the avatar is resolved successfully\n * ```html\n * <img alt=\"\" src=\"resolved-url-for-the-avatar\" />\n * ```\n *\n * ### Show a loading sign when the avatar is being resolved\n * ```tsx\n * import { AccountProvider, AccountAvatar } from \"thirdweb/react\";\n *\n * <AccountProvider address=\"0x...\">\n *   <AccountAvatar\n *     loadingComponent={<YourLoadingComponent />}\n *   />\n * </AccountProvider>\n * ```\n *\n * ### Fallback to something when the avatar fails to resolve\n * ```tsx\n * import { AccountProvider, AccountAvatar } from \"thirdweb/react\";\n *\n * <AccountProvider address=\"0x...\">\n *   <AccountAvatar\n *     fallbackComponent={<DummyImage />}\n *   />\n * </AccountProvider>\n * ```\n *\n * ### Select a social profile to display\n * If you wallet associates with more than one social profiles (Lens, Farcaster, ENS, etc.)\n * You can specify which service you want to prioritize using the `socialType` props\n * ```tsx\n * import { AccountProvider, AccountAvatar } from \"thirdweb/react\";\n *\n * <AccountProvider address=\"0x...\">\n *   <AccountAvatar\n *     // Choose between: \"farcaster\" | \"lens\" | \"ens\"\n *     socialType={\"ens\"}\n *   />\n * </AccountProvider>\n * ```\n *\n * ### Custom ENS resolver chain\n * This component shares the same props with the ENS extension `resolveAvatar`\n * ```tsx\n * import { AccountProvider, AccountAvatar } from \"thirdweb/react\";\n * import { base } from \"thirdweb/chains\";\n *\n * <AccountProvider address=\"0x...\">\n *   <AccountAvatar\n *     resolverAddress={\"0x...\"}\n *     resolverChain={base}\n *   />\n * </AccountProvider>\n * ```\n *\n * ### Custom query options for useQuery\n * This component uses `@tanstack-query`'s useQuery internally.\n * You can use the `queryOptions` prop for more fine-grained control\n * ```tsx\n * <AccountAvatar\n *   queryOptions={{\n *     enabled: isEnabled,\n *     retry: 3,\n *   }}\n * />\n * ```\n * @returns An <img /> if the avatar is resolved successfully\n * @component\n * @wallet\n * @beta\n */\nexport function AccountAvatar({\n  socialType,\n  resolverAddress,\n  resolverChain,\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  ...restProps\n}) {\n  const {\n    address,\n    client\n  } = useAccountContext();\n  const avatarQuery = useQuery({\n    queryKey: [\"account-avatar\", address, {\n      socialType\n    }, {\n      resolverAddress,\n      resolverChain\n    }],\n    queryFn: async () => {\n      const [socialData, ensName] = await Promise.all([getSocialProfiles({\n        address,\n        client\n      }), resolveName({\n        client,\n        address: address || \"\",\n        resolverAddress,\n        resolverChain\n      })]);\n      const uri = socialData?.filter(p => p.avatar && (socialType ? p.type === socialType : true))[0]?.avatar;\n      const [resolvedSocialAvatar, resolvedENSAvatar] = await Promise.all([uri ? parseAvatarRecord({\n        client,\n        uri\n      }) : undefined, ensName ? resolveAvatar({\n        client,\n        name: ensName\n      }) : undefined]);\n      // If no social image + ens name found -> exit and show <Blobbie />\n      if (!resolvedSocialAvatar && !resolvedENSAvatar) {\n        throw new Error(\"Failed to resolve social + ens avatar\");\n      }\n      // else, prioritize the social image first\n      if (resolvedSocialAvatar) {\n        return resolvedSocialAvatar;\n      }\n      if (resolvedENSAvatar) {\n        return resolvedENSAvatar;\n      }\n      throw new Error(\"Failed to resolve social + ens avatar\");\n    },\n    retry: false,\n    ...queryOptions\n  });\n  if (avatarQuery.isLoading) {\n    return loadingComponent || null;\n  }\n  if (!avatarQuery.data) {\n    return fallbackComponent || null;\n  }\n  return _jsx(\"img\", {\n    src: avatarQuery.data,\n    ...restProps,\n    alt: restProps.alt\n  });\n}\n//# sourceMappingURL=avatar.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}