{"ast":null,"code":"import { isBase64JSON, parseBase64String } from \"../base64/base64.js\";\n/**\n * Fetches the metadata for a token.\n *\n * @param options - The options for fetching the token metadata.\n * @returns The token metadata.\n * @internal\n */\nexport async function fetchContractMetadata(options) {\n  const {\n    client,\n    uri\n  } = options;\n  // handle case where the URI is a base64 encoded JSON\n  if (isBase64JSON(uri)) {\n    try {\n      return JSON.parse(parseBase64String(uri));\n    } catch (e) {\n      console.error(\"Failed to decode base64 encoded contract metadata\", {\n        uri\n      }, e);\n      return undefined;\n    }\n  }\n  // in all other cases we will need the `download` function from storage\n  const {\n    download\n  } = await import(\"../../storage/download.js\");\n  return await (await download({\n    client,\n    uri\n  })).json();\n}\n//# sourceMappingURL=fetchContractMetadata.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}