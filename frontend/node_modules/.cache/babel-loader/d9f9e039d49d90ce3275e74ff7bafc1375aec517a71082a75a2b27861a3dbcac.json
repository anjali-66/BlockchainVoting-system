{"ast":null,"code":"import { useQuery } from \"@tanstack/react-query\";\nimport { getWalletBalance } from \"../../../../wallets/utils/getWalletBalance.js\";\n/**\n * Fetch the balance of a wallet in native currency or for a specific token.\n * Leave `tokenAddress` undefined to fetch the native token balance.\n * @param options {@link GetWalletBalanceOptions} - The options for fetching the wallet balance.\n * @param options.chain - The chain to fetch the wallet balance from.\n * @param options.address - The address of the wallet to fetch the balance from.\n * @param options.client - The client to use to fetch the wallet balance.\n * @param [options.tokenAddress] - The address of the token to fetch the balance for.\n * @returns {@link GetWalletBalanceResult} The result of the query.\n *\n * @example\n *\n * ### Fetching the native token balance\n *\n * ```ts\n * import { useWalletBalance } from \"thirdweb/react\";\n *\n * const { data, isLoading, isError } = useWalletBalance({ chain, address, client });\n * console.log(\"balance\", data?.displayValue, data?.symbol);\n * ```\n *\n * ### Fetching a specific token balance\n *\n * ```ts\n * import { useWalletBalance } from \"thirdweb/react\";\n *\n * const tokenAddress = \"0x...\"; // the ERC20 token address\n *\n * const { data, isLoading, isError } = useWalletBalance({ chain, address, client, tokenAddress });\n * console.log(\"balance\", data?.displayValue, data?.symbol);\n * ```\n * @wallet\n */\nexport function useWalletBalance(options, queryOptions) {\n  const {\n    chain,\n    address,\n    tokenAddress,\n    client\n  } = options;\n  return useQuery({\n    ...queryOptions,\n    queryKey: [\"walletBalance\", chain?.id || -1, address || \"0x0\", {\n      tokenAddress\n    }],\n    queryFn: async () => {\n      if (!chain) {\n        throw new Error(\"chain is required\");\n      }\n      if (!client) {\n        throw new Error(\"client is required\");\n      }\n      if (!address) {\n        throw new Error(\"address is required\");\n      }\n      return getWalletBalance({\n        chain,\n        client,\n        address,\n        tokenAddress\n      });\n    },\n    enabled: (queryOptions?.enabled === undefined || queryOptions.enabled) && !!chain && !!client && !!address\n  });\n}\n//# sourceMappingURL=useWalletBalance.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}