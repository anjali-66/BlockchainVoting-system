{"ast":null,"code":"import { toUnits } from \"../../../utils/units.js\";\nimport { approve as generatedApprove } from \"../__generated__/IERC20/write/approve.js\";\n/**\n * Approves the spending of tokens by a specific address.\n * @param options - The transaction options.\n * @returns A prepared transaction object.\n * @extension ERC20\n * @example\n * ```ts\n * import { approve } from \"thirdweb/extensions/erc20\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const transaction = await approve({\n *  contract,\n *  spender: \"0x...\",\n *  amount: 100,\n * });\n *\n * await sendTransaction({ transaction, account });\n * ```\n */\nexport function approve(options) {\n  return generatedApprove({\n    contract: options.contract,\n    asyncParams: async () => {\n      let amount;\n      if (\"amount\" in options) {\n        // if we need to parse the amount from ether to gwei then we pull in the decimals extension\n        const {\n          decimals\n        } = await import(\"../read/decimals.js\");\n        // if this fails we fall back to `18` decimals\n        const d = await decimals(options).catch(() => 18);\n        // turn ether into gwei\n        amount = toUnits(options.amount.toString(), d);\n      } else {\n        amount = options.amountWei;\n      }\n      return {\n        spender: options.spender,\n        value: amount,\n        overrides: {\n          erc20Value: {\n            amountWei: amount,\n            tokenAddress: options.contract.address\n          }\n        }\n      };\n    }\n  });\n}\n//# sourceMappingURL=approve.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}