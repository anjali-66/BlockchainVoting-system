{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Mesh, OrthographicCamera, PlaneGeometry, Scene, ShaderMaterial, Texture, WebGLRenderTarget } from 'three';\n/**\n * This Debugger exposes internal details of the <model-viewer> rendering\n * substructure so that external tools can more easily inspect and operate on\n * them.\n *\n * It also activates shader debugging on the associated GL context. Shader\n * debugging trades performance for useful error information, so it is not\n * recommended to activate this unless needed.\n */\nexport class Debugger {\n  constructor(renderer) {\n    // Force WebGL shader debugging on:\n    renderer.threeRenderer.debug = {\n      checkShaderErrors: true\n    };\n    // Announce debug details at microtask timing to give the `Renderer`\n    // constructor time to complete its initialization, just to be on the safe\n    // side:\n    Promise.resolve().then(() => {\n      self.dispatchEvent(new CustomEvent('model-viewer-renderer-debug', {\n        detail: {\n          renderer,\n          THREE: {\n            ShaderMaterial,\n            Texture,\n            Mesh,\n            Scene,\n            PlaneGeometry,\n            OrthographicCamera,\n            WebGLRenderTarget\n          }\n        }\n      }));\n    });\n  }\n  addScene(scene) {\n    self.dispatchEvent(new CustomEvent('model-viewer-scene-added-debug', {\n      detail: {\n        scene\n      }\n    }));\n  }\n  removeScene(scene) {\n    self.dispatchEvent(new CustomEvent('model-viewer-scene-removed-debug', {\n      detail: {\n        scene\n      }\n    }));\n  }\n}\n//# sourceMappingURL=Debugger.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}