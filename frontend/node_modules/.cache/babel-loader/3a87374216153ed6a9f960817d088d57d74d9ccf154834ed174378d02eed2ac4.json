{"ast":null,"code":"var _jsxFileName = \"/Users/sharmaanjali/blockchain-voting-system/frontend/src/components/Votingsystem.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import abi from '../abi/VotingSystem.json';\n\n// const VotingSystem = ({ provider, account }) => {\n//   const [contract, setContract] = useState(null);\n//   const [polls, setPolls] = useState([]);\n//   const [newPoll, setNewPoll] = useState({ title: '', options: ['', ''], duration: 60 });\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const contractInstance = new ethers.Contract(\n//         \"0x002A13DF3bB8Ce7D7143bE17223F8893e2152c29\",\n//         abi,\n//         provider\n//       );\n//       setContract(contractInstance);\n//     }\n//   }, [provider]);\n\n//   const createPoll = async () => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.createPoll(\n//         newPoll.title,\n//         newPoll.options.filter(opt => opt !== ''),\n//         newPoll.duration\n//       );\n//       await tx.wait();\n\n//       setNewPoll({ title: '', options: ['', ''], duration: 60 });\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error creating poll:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const castVote = async (pollId, optionIndex) => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error voting:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPolls = async () => {\n//     if (!contract) return;\n//     try {\n//       const pollCount = await contract.pollCount();\n//       const pollsData = [];\n//       for (let i = 0; i < pollCount; i++) {\n//         const details = await contract.getPollDetails(i);\n//         const results = await contract.getPollResults(i);\n//         pollsData.push({ ...details, results });\n//       }\n//       setPolls(pollsData);\n//     } catch (error) {\n//       console.error('Error fetching polls:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPolls();\n//   }, [contract]);\n\n//   return (\n//     <div className=\"max-w-2xl mx-auto p-4\">\n//       <div className=\"mb-8 bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Create New Poll</h2>\n//         <input\n//           type=\"text\"\n//           value={newPoll.title}\n//           onChange={(e) => setNewPoll({ ...newPoll, title: e.target.value })}\n//           placeholder=\"Poll Title\"\n//           className=\"w-full p-2 mb-4 border rounded\"\n//         />\n//         {newPoll.options.map((option, index) => (\n//           <input\n//             key={index}\n//             type=\"text\"\n//             value={option}\n//             onChange={(e) => {\n//               const newOptions = [...newPoll.options];\n//               newOptions[index] = e.target.value;\n//               setNewPoll({ ...newPoll, options: newOptions });\n//             }}\n//             placeholder={`Option ${index + 1}`}\n//             className=\"w-full p-2 mb-2 border rounded\"\n//           />\n//         ))}\n//         <button\n//           onClick={() => setNewPoll({ ...newPoll, options: [...newPoll.options, ''] })}\n//           className=\"bg-gray-500 text-white px-4 py-2 rounded mr-2\"\n//         >\n//           Add Option\n//         </button>\n//         <button\n//           onClick={createPoll}\n//           disabled={loading}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//         >\n//           Create Poll\n//         </button>\n//       </div>\n\n//       <div className=\"bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Active Polls</h2>\n//         {polls.map((poll, index) => (\n//           <div key={index} className=\"border-b py-4\">\n//             <h3 className=\"font-bold\">{poll.title}</h3>\n//             <div className=\"mt-2\">\n//               {poll.options.map((option, optIndex) => (\n//                 <button\n//                   key={optIndex}\n//                   onClick={() => castVote(poll.pollId, optIndex)}\n//                   className=\"bg-blue-100 hover:bg-blue-200 px-4 py-2 rounded mr-2 mb-2\"\n//                 >\n//                   {option} ({poll.results[optIndex].toString()})\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VotingSystem;\n\n//consists all the function to interact with the smart contract\n// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n\n// const SmartContractInterface = ({ contractAddress, abi }) => {\n//   const [pollTitle, setPollTitle] = useState('');\n//   const [pollOptions, setPollOptions] = useState([]);\n//   const [pollDuration, setPollDuration] = useState('');\n//   const [pollId, setPollId] = useState('');\n//   const [optionIndex, setOptionIndex] = useState('');\n//   const [pollDetails, setPollDetails] = useState(null);\n//   const [pollResults, setPollResults] = useState(null);\n//   const [allPolls, setAllPolls] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const provider = new ethers.BrowserProvider(window.ethereum);\n//   const [contract, setContract] = useState(null);\n\n//   useEffect(() => {\n//     if (contractAddress && abi) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, abi, signer));\n//     } else {\n//       console.error(\"Invalid contractAddress or ABI\");\n//     }\n//   }, [contractAddress, abi]);\n\n//   useEffect(() => {\n//     if (contract) fetchAllPolls();\n//   }, [contract]);\n\n//   const createPoll = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.createPoll(pollTitle, pollOptions.filter(opt => opt), pollDuration);\n//       await tx.wait();\n//       alert('Poll created successfully!');\n//       fetchAllPolls();\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error creating poll');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const vote = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       alert('Vote cast successfully!');\n//       fetchPollResults(pollId);\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error casting vote');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollDetails = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll details...\");\n//       const details = await contract.getPollDetails(id || pollId);\n//       console.log(\"Poll details:\", details);\n//       setPollDetails(details);\n//     } catch (error) {\n//       console.error(\"Error fetching poll details:\", error);\n//       alert('Error fetching poll details');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollResults = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll results...\");\n//       const results = await contract.getPollResults(id || pollId);\n//       console.log(\"Poll results:\", results);\n//       setPollResults(results);\n//     } catch (error) {\n//       console.error(\"Error fetching poll results:\", error);\n//       alert('Error fetching poll results');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchAllPolls = async () => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching all polls...\");\n//       const totalPolls = await contract.pollCount();\n//       console.log(\"Total polls:\", totalPolls.toString());\n\n//       const polls = [];\n//       for (let i = 0; i < totalPolls; i++) {\n//         const details = await contract.getPollDetails(i);\n//         console.log(`Poll ${i} details:`, details);\n//         polls.push({ id: i, details });\n//       }\n//       setAllPolls(polls);\n//       console.log(\"All polls:\", polls);\n//     } catch (error) {\n//       console.error(\"Error fetching all polls:\", error);\n//       alert('Error fetching all polls');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Smart Contract Interface</h2>\n\n//       <div>\n//         <h3>Create Poll</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Title\"\n//           value={pollTitle}\n//           onChange={(e) => setPollTitle(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Options (comma separated)\"\n//           value={pollOptions.join(',')}\n//           onChange={(e) => setPollOptions(e.target.value.split(','))}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Duration in Minutes\"\n//           value={pollDuration}\n//           onChange={(e) => setPollDuration(e.target.value)}\n//         />\n//         <button onClick={createPoll} disabled={loading}>Create Poll</button>\n//       </div>\n\n//       <div>\n//         <h3>Vote</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Option Index\"\n//           value={optionIndex}\n//           onChange={(e) => setOptionIndex(e.target.value)}\n//         />\n//         <button onClick={vote} disabled={loading}>Vote</button>\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Details</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollDetails()} disabled={loading}>Fetch Details</button>\n//         {pollDetails && (\n//           <div>\n//             <p>Title: {pollDetails[0]}</p>\n//             <p>Options: {pollDetails[1].join(', ')}</p>\n//             <p>End Time: {new Date(pollDetails[2] * 1000).toLocaleString()}</p>\n//             <p>Creator: {pollDetails[3]}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Results</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollResults()} disabled={loading}>Fetch Results</button>\n//         {pollResults && (\n//           <div>\n//             <p>Results: {pollResults.join(', ')}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>All Polls</h3>\n//         <button onClick={fetchAllPolls} disabled={loading}>Refresh Polls</button>\n//         <ul>\n//           {allPolls.map((poll) => (\n//             <li key={poll.id}>\n//               <p>ID: {poll.id}</p>\n//               <p>Title: {poll.details[0]}</p>\n//               <p>Options: {poll.details[1].join(', ')}</p>\n//               <p>End Time: {new Date(poll.details[2] * 1000).toLocaleString()}</p>\n//               <button onClick={() => fetchPollDetails(poll.id)}>View Details</button>\n//               <button onClick={() => fetchPollResults(poll.id)}>View Results</button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SmartContractInterface;\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SmartContractInterface = ({\n  contractAddress,\n  abi\n}) => {\n  _s();\n  const [pollTitle, setPollTitle] = useState('');\n  const [pollOptions, setPollOptions] = useState([]);\n  const [pollDuration, setPollDuration] = useState('');\n  const [pollId, setPollId] = useState('');\n  const [optionIndex, setOptionIndex] = useState('');\n  const [pollDetails, setPollDetails] = useState(null);\n  const [pollResults, setPollResults] = useState(null);\n  const [allPolls, setAllPolls] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const [contract, setContract] = useState(null);\n  useEffect(() => {\n    if (contractAddress && abi) {\n      const signer = provider.getSigner();\n      setContract(new ethers.Contract(contractAddress, abi, signer));\n    } else {\n      console.error(\"Invalid contractAddress or ABI\");\n    }\n  }, [contractAddress, abi]);\n  useEffect(() => {\n    if (contract) fetchAllPolls();\n  }, [contract]);\n  const createPoll = async () => {\n    if (!pollTitle.trim()) {\n      alert(\"Poll title is required.\");\n      return;\n    }\n    if (!pollOptions.length || pollOptions.some(opt => !opt.trim())) {\n      alert(\"At least one valid poll option is required.\");\n      return;\n    }\n    if (!pollDuration || pollDuration <= 0) {\n      alert(\"Poll duration must be a positive number.\");\n      return;\n    }\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n    try {\n      setLoading(true);\n      console.log(\"Creating poll with:\", pollTitle, pollOptions, pollDuration);\n      const tx = await contract.createPoll(pollTitle, pollOptions.filter(opt => opt.trim()), parseInt(pollDuration), {\n        gasLimit: 300000\n      });\n      await tx.wait();\n      alert('Poll created successfully!');\n      fetchAllPolls();\n    } catch (error) {\n      console.error(\"Detailed Error:\", error);\n      alert(`Error creating poll: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const vote = async () => {\n    try {\n      setLoading(true);\n      const tx = await contract.vote(pollId, optionIndex);\n      await tx.wait();\n      alert('Vote cast successfully!');\n      fetchPollResults(pollId);\n    } catch (error) {\n      console.error(error);\n      alert('Error casting vote');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPollDetails = async id => {\n    try {\n      setLoading(true);\n      console.log(\"Fetching poll details...\");\n      const details = await contract.getPollDetails(id || pollId);\n      console.log(\"Poll details:\", details);\n      setPollDetails(details);\n    } catch (error) {\n      console.error(\"Error fetching poll details:\", error);\n      alert('Error fetching poll details');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPollResults = async id => {\n    try {\n      setLoading(true);\n      console.log(\"Fetching poll results...\");\n      const results = await contract.getPollResults(id || pollId);\n      console.log(\"Poll results:\", results);\n      setPollResults(results);\n    } catch (error) {\n      console.error(\"Error fetching poll results:\", error);\n      alert('Error fetching poll results');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchAllPolls = async () => {\n    try {\n      setLoading(true);\n      console.log(\"Fetching all polls...\");\n      const totalPolls = await contract.pollCount();\n      console.log(\"Total polls:\", totalPolls.toString());\n      const polls = [];\n      for (let i = 0; i < totalPolls; i++) {\n        const details = await contract.getPollDetails(i);\n        console.log(`Poll ${i} details:`, details);\n        polls.push({\n          id: i,\n          details\n        });\n      }\n      setAllPolls(polls);\n      console.log(\"All polls:\", polls);\n    } catch (error) {\n      console.error(\"Error fetching all polls:\", error);\n      alert('Error fetching all polls');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Smart Contract Interface\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Create Poll\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Poll Title\",\n        value: pollTitle,\n        onChange: e => setPollTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Poll Options (comma separated)\",\n        value: pollOptions.join(','),\n        onChange: e => setPollOptions(e.target.value.split(','))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Duration in Minutes\",\n        value: pollDuration,\n        onChange: e => setPollDuration(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createPoll,\n        disabled: loading,\n        children: \"Create Poll\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Poll ID\",\n        value: pollId,\n        onChange: e => setPollId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Option Index\",\n        value: optionIndex,\n        onChange: e => setOptionIndex(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: vote,\n        disabled: loading,\n        children: \"Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Get Poll Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Poll ID\",\n        value: pollId,\n        onChange: e => setPollId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchPollDetails(),\n        disabled: loading,\n        children: \"Fetch Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this), pollDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Title: \", pollDetails[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Options: \", pollDetails[1].join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"End Time: \", new Date(pollDetails[2] * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Creator: \", pollDetails[3]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Get Poll Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Poll ID\",\n        value: pollId,\n        onChange: e => setPollId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchPollResults(),\n        disabled: loading,\n        children: \"Fetch Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }, this), pollResults && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Results: \", pollResults.join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"All Polls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchAllPolls,\n        disabled: loading,\n        children: \"Refresh Polls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: allPolls.map(poll => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"ID: \", poll.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Title: \", poll.details[0]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Options: \", poll.details[1].join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"End Time: \", new Date(poll.details[2] * 1000).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => fetchPollDetails(poll.id),\n            children: \"View Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => fetchPollResults(poll.id),\n            children: \"View Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 15\n          }, this)]\n        }, poll.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 505,\n    columnNumber: 5\n  }, this);\n};\n_s(SmartContractInterface, \"GMQyPpmB4WQEHrpsFLEL5x+4SHA=\");\n_c = SmartContractInterface;\nexport default SmartContractInterface;\nvar _c;\n$RefreshReg$(_c, \"SmartContractInterface\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","SmartContractInterface","contractAddress","abi","_s","pollTitle","setPollTitle","pollOptions","setPollOptions","pollDuration","setPollDuration","pollId","setPollId","optionIndex","setOptionIndex","pollDetails","setPollDetails","pollResults","setPollResults","allPolls","setAllPolls","loading","setLoading","provider","BrowserProvider","window","ethereum","contract","setContract","signer","getSigner","Contract","console","error","fetchAllPolls","createPoll","trim","alert","length","some","opt","log","tx","filter","parseInt","gasLimit","wait","message","vote","fetchPollResults","fetchPollDetails","id","details","getPollDetails","results","getPollResults","totalPolls","pollCount","toString","polls","i","push","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","join","split","onClick","disabled","Date","toLocaleString","map","poll","_c","$RefreshReg$"],"sources":["/Users/sharmaanjali/blockchain-voting-system/frontend/src/components/Votingsystem.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import abi from '../abi/VotingSystem.json';\n\n// const VotingSystem = ({ provider, account }) => {\n//   const [contract, setContract] = useState(null);\n//   const [polls, setPolls] = useState([]);\n//   const [newPoll, setNewPoll] = useState({ title: '', options: ['', ''], duration: 60 });\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const contractInstance = new ethers.Contract(\n//         \"0x002A13DF3bB8Ce7D7143bE17223F8893e2152c29\",\n//         abi,\n//         provider\n//       );\n//       setContract(contractInstance);\n//     }\n//   }, [provider]);\n\n//   const createPoll = async () => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.createPoll(\n//         newPoll.title,\n//         newPoll.options.filter(opt => opt !== ''),\n//         newPoll.duration\n//       );\n//       await tx.wait();\n\n//       setNewPoll({ title: '', options: ['', ''], duration: 60 });\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error creating poll:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const castVote = async (pollId, optionIndex) => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error voting:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPolls = async () => {\n//     if (!contract) return;\n//     try {\n//       const pollCount = await contract.pollCount();\n//       const pollsData = [];\n//       for (let i = 0; i < pollCount; i++) {\n//         const details = await contract.getPollDetails(i);\n//         const results = await contract.getPollResults(i);\n//         pollsData.push({ ...details, results });\n//       }\n//       setPolls(pollsData);\n//     } catch (error) {\n//       console.error('Error fetching polls:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPolls();\n//   }, [contract]);\n\n//   return (\n//     <div className=\"max-w-2xl mx-auto p-4\">\n//       <div className=\"mb-8 bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Create New Poll</h2>\n//         <input\n//           type=\"text\"\n//           value={newPoll.title}\n//           onChange={(e) => setNewPoll({ ...newPoll, title: e.target.value })}\n//           placeholder=\"Poll Title\"\n//           className=\"w-full p-2 mb-4 border rounded\"\n//         />\n//         {newPoll.options.map((option, index) => (\n//           <input\n//             key={index}\n//             type=\"text\"\n//             value={option}\n//             onChange={(e) => {\n//               const newOptions = [...newPoll.options];\n//               newOptions[index] = e.target.value;\n//               setNewPoll({ ...newPoll, options: newOptions });\n//             }}\n//             placeholder={`Option ${index + 1}`}\n//             className=\"w-full p-2 mb-2 border rounded\"\n//           />\n//         ))}\n//         <button\n//           onClick={() => setNewPoll({ ...newPoll, options: [...newPoll.options, ''] })}\n//           className=\"bg-gray-500 text-white px-4 py-2 rounded mr-2\"\n//         >\n//           Add Option\n//         </button>\n//         <button\n//           onClick={createPoll}\n//           disabled={loading}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//         >\n//           Create Poll\n//         </button>\n//       </div>\n\n//       <div className=\"bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Active Polls</h2>\n//         {polls.map((poll, index) => (\n//           <div key={index} className=\"border-b py-4\">\n//             <h3 className=\"font-bold\">{poll.title}</h3>\n//             <div className=\"mt-2\">\n//               {poll.options.map((option, optIndex) => (\n//                 <button\n//                   key={optIndex}\n//                   onClick={() => castVote(poll.pollId, optIndex)}\n//                   className=\"bg-blue-100 hover:bg-blue-200 px-4 py-2 rounded mr-2 mb-2\"\n//                 >\n//                   {option} ({poll.results[optIndex].toString()})\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VotingSystem;\n\n//consists all the function to interact with the smart contract\n// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n\n// const SmartContractInterface = ({ contractAddress, abi }) => {\n//   const [pollTitle, setPollTitle] = useState('');\n//   const [pollOptions, setPollOptions] = useState([]);\n//   const [pollDuration, setPollDuration] = useState('');\n//   const [pollId, setPollId] = useState('');\n//   const [optionIndex, setOptionIndex] = useState('');\n//   const [pollDetails, setPollDetails] = useState(null);\n//   const [pollResults, setPollResults] = useState(null);\n//   const [allPolls, setAllPolls] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const provider = new ethers.BrowserProvider(window.ethereum);\n//   const [contract, setContract] = useState(null);\n\n//   useEffect(() => {\n//     if (contractAddress && abi) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, abi, signer));\n//     } else {\n//       console.error(\"Invalid contractAddress or ABI\");\n//     }\n//   }, [contractAddress, abi]);\n\n//   useEffect(() => {\n//     if (contract) fetchAllPolls();\n//   }, [contract]);\n\n//   const createPoll = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.createPoll(pollTitle, pollOptions.filter(opt => opt), pollDuration);\n//       await tx.wait();\n//       alert('Poll created successfully!');\n//       fetchAllPolls();\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error creating poll');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const vote = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       alert('Vote cast successfully!');\n//       fetchPollResults(pollId);\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error casting vote');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollDetails = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll details...\");\n//       const details = await contract.getPollDetails(id || pollId);\n//       console.log(\"Poll details:\", details);\n//       setPollDetails(details);\n//     } catch (error) {\n//       console.error(\"Error fetching poll details:\", error);\n//       alert('Error fetching poll details');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollResults = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll results...\");\n//       const results = await contract.getPollResults(id || pollId);\n//       console.log(\"Poll results:\", results);\n//       setPollResults(results);\n//     } catch (error) {\n//       console.error(\"Error fetching poll results:\", error);\n//       alert('Error fetching poll results');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchAllPolls = async () => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching all polls...\");\n//       const totalPolls = await contract.pollCount();\n//       console.log(\"Total polls:\", totalPolls.toString());\n\n//       const polls = [];\n//       for (let i = 0; i < totalPolls; i++) {\n//         const details = await contract.getPollDetails(i);\n//         console.log(`Poll ${i} details:`, details);\n//         polls.push({ id: i, details });\n//       }\n//       setAllPolls(polls);\n//       console.log(\"All polls:\", polls);\n//     } catch (error) {\n//       console.error(\"Error fetching all polls:\", error);\n//       alert('Error fetching all polls');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Smart Contract Interface</h2>\n\n//       <div>\n//         <h3>Create Poll</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Title\"\n//           value={pollTitle}\n//           onChange={(e) => setPollTitle(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Options (comma separated)\"\n//           value={pollOptions.join(',')}\n//           onChange={(e) => setPollOptions(e.target.value.split(','))}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Duration in Minutes\"\n//           value={pollDuration}\n//           onChange={(e) => setPollDuration(e.target.value)}\n//         />\n//         <button onClick={createPoll} disabled={loading}>Create Poll</button>\n//       </div>\n\n//       <div>\n//         <h3>Vote</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Option Index\"\n//           value={optionIndex}\n//           onChange={(e) => setOptionIndex(e.target.value)}\n//         />\n//         <button onClick={vote} disabled={loading}>Vote</button>\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Details</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollDetails()} disabled={loading}>Fetch Details</button>\n//         {pollDetails && (\n//           <div>\n//             <p>Title: {pollDetails[0]}</p>\n//             <p>Options: {pollDetails[1].join(', ')}</p>\n//             <p>End Time: {new Date(pollDetails[2] * 1000).toLocaleString()}</p>\n//             <p>Creator: {pollDetails[3]}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Results</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollResults()} disabled={loading}>Fetch Results</button>\n//         {pollResults && (\n//           <div>\n//             <p>Results: {pollResults.join(', ')}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>All Polls</h3>\n//         <button onClick={fetchAllPolls} disabled={loading}>Refresh Polls</button>\n//         <ul>\n//           {allPolls.map((poll) => (\n//             <li key={poll.id}>\n//               <p>ID: {poll.id}</p>\n//               <p>Title: {poll.details[0]}</p>\n//               <p>Options: {poll.details[1].join(', ')}</p>\n//               <p>End Time: {new Date(poll.details[2] * 1000).toLocaleString()}</p>\n//               <button onClick={() => fetchPollDetails(poll.id)}>View Details</button>\n//               <button onClick={() => fetchPollResults(poll.id)}>View Results</button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SmartContractInterface;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\nconst SmartContractInterface = ({ contractAddress, abi }) => {\n  const [pollTitle, setPollTitle] = useState('');\n  const [pollOptions, setPollOptions] = useState([]);\n  const [pollDuration, setPollDuration] = useState('');\n  const [pollId, setPollId] = useState('');\n  const [optionIndex, setOptionIndex] = useState('');\n  const [pollDetails, setPollDetails] = useState(null);\n  const [pollResults, setPollResults] = useState(null);\n  const [allPolls, setAllPolls] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const [contract, setContract] = useState(null);\n\n  useEffect(() => {\n    if (contractAddress && abi) {\n      const signer = provider.getSigner();\n      setContract(new ethers.Contract(contractAddress, abi, signer));\n    } else {\n      console.error(\"Invalid contractAddress or ABI\");\n    }\n  }, [contractAddress, abi]);\n\n  useEffect(() => {\n    if (contract) fetchAllPolls();\n  }, [contract]);\n\n  const createPoll = async () => {\n    if (!pollTitle.trim()) {\n      alert(\"Poll title is required.\");\n      return;\n    }\n\n    if (!pollOptions.length || pollOptions.some(opt => !opt.trim())) {\n      alert(\"At least one valid poll option is required.\");\n      return;\n    }\n\n    if (!pollDuration || pollDuration <= 0) {\n      alert(\"Poll duration must be a positive number.\");\n      return;\n    }\n\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      console.log(\"Creating poll with:\", pollTitle, pollOptions, pollDuration);\n\n      const tx = await contract.createPoll(\n        pollTitle,\n        pollOptions.filter(opt => opt.trim()),\n        parseInt(pollDuration),\n        { gasLimit: 300000 }\n      );\n\n      await tx.wait();\n      alert('Poll created successfully!');\n      fetchAllPolls();\n    } catch (error) {\n      console.error(\"Detailed Error:\", error);\n      alert(`Error creating poll: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const vote = async () => {\n    try {\n      setLoading(true);\n      const tx = await contract.vote(pollId, optionIndex);\n      await tx.wait();\n      alert('Vote cast successfully!');\n      fetchPollResults(pollId);\n    } catch (error) {\n      console.error(error);\n      alert('Error casting vote');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchPollDetails = async (id) => {\n    try {\n      setLoading(true);\n      console.log(\"Fetching poll details...\");\n      const details = await contract.getPollDetails(id || pollId);\n      console.log(\"Poll details:\", details);\n      setPollDetails(details);\n    } catch (error) {\n      console.error(\"Error fetching poll details:\", error);\n      alert('Error fetching poll details');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchPollResults = async (id) => {\n    try {\n      setLoading(true);\n      console.log(\"Fetching poll results...\");\n      const results = await contract.getPollResults(id || pollId);\n      console.log(\"Poll results:\", results);\n      setPollResults(results);\n    } catch (error) {\n      console.error(\"Error fetching poll results:\", error);\n      alert('Error fetching poll results');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchAllPolls = async () => {\n    try {\n      setLoading(true);\n      console.log(\"Fetching all polls...\");\n      const totalPolls = await contract.pollCount();\n      console.log(\"Total polls:\", totalPolls.toString());\n\n      const polls = [];\n      for (let i = 0; i < totalPolls; i++) {\n        const details = await contract.getPollDetails(i);\n        console.log(`Poll ${i} details:`, details);\n        polls.push({ id: i, details });\n      }\n      setAllPolls(polls);\n      console.log(\"All polls:\", polls);\n    } catch (error) {\n      console.error(\"Error fetching all polls:\", error);\n      alert('Error fetching all polls');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Smart Contract Interface</h2>\n\n      <div>\n        <h3>Create Poll</h3>\n        <input\n          type=\"text\"\n          placeholder=\"Poll Title\"\n          value={pollTitle}\n          onChange={(e) => setPollTitle(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Poll Options (comma separated)\"\n          value={pollOptions.join(',')}\n          onChange={(e) => setPollOptions(e.target.value.split(','))}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Duration in Minutes\"\n          value={pollDuration}\n          onChange={(e) => setPollDuration(e.target.value)}\n        />\n        <button onClick={createPoll} disabled={loading}>Create Poll</button>\n      </div>\n\n      <div>\n        <h3>Vote</h3>\n        <input\n          type=\"number\"\n          placeholder=\"Poll ID\"\n          value={pollId}\n          onChange={(e) => setPollId(e.target.value)}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Option Index\"\n          value={optionIndex}\n          onChange={(e) => setOptionIndex(e.target.value)}\n        />\n        <button onClick={vote} disabled={loading}>Vote</button>\n      </div>\n\n      <div>\n        <h3>Get Poll Details</h3>\n        <input\n          type=\"number\"\n          placeholder=\"Poll ID\"\n          value={pollId}\n          onChange={(e) => setPollId(e.target.value)}\n        />\n        <button onClick={() => fetchPollDetails()} disabled={loading}>Fetch Details</button>\n        {pollDetails && (\n          <div>\n            <p>Title: {pollDetails[0]}</p>\n            <p>Options: {pollDetails[1].join(', ')}</p>\n            <p>End Time: {new Date(pollDetails[2] * 1000).toLocaleString()}</p>\n            <p>Creator: {pollDetails[3]}</p>\n          </div>\n        )}\n      </div>\n\n      <div>\n        <h3>Get Poll Results</h3>\n        <input\n          type=\"number\"\n          placeholder=\"Poll ID\"\n          value={pollId}\n          onChange={(e) => setPollId(e.target.value)}\n        />\n        <button onClick={() => fetchPollResults()} disabled={loading}>Fetch Results</button>\n        {pollResults && (\n          <div>\n            <p>Results: {pollResults.join(', ')}</p>\n          </div>\n        )}\n      </div>\n\n      <div>\n        <h3>All Polls</h3>\n        <button onClick={fetchAllPolls} disabled={loading}>Refresh Polls</button>\n        <ul>\n          {allPolls.map((poll) => (\n            <li key={poll.id}>\n              <p>ID: {poll.id}</p>\n              <p>Title: {poll.details[0]}</p>\n              <p>Options: {poll.details[1].join(', ')}</p>\n              <p>End Time: {new Date(poll.details[2] * 1000).toLocaleString()}</p>\n              <button onClick={() => fetchPollDetails(poll.id)}>View Details</button>\n              <button onClick={() => fetchPollResults(poll.id)}>View Results</button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default SmartContractInterface;\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}