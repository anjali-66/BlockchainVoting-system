{"ast":null,"code":"import * as Errors from '../Errors.js';\n/** @internal */\nexport function withTimeout(fn, options) {\n  const {\n    errorInstance = new TimeoutError(),\n    timeout,\n    signal\n  } = options;\n  return new Promise((resolve, reject) => {\n    ;\n    (async () => {\n      let timeoutId;\n      try {\n        const controller = new AbortController();\n        if (timeout > 0) timeoutId = setTimeout(() => {\n          if (signal) {\n            controller.abort();\n          } else {\n            reject(errorInstance);\n          }\n        }, timeout);\n        resolve(await fn({\n          signal: controller.signal\n        }));\n      } catch (err) {\n        if (err?.name === 'AbortError') reject(errorInstance);\n        reject(err);\n      } finally {\n        clearTimeout(timeoutId);\n      }\n    })();\n  });\n}\n/** @internal */\n/**\n * Thrown when an operation times out.\n * @internal\n */\nexport class TimeoutError extends Errors.BaseError {\n  constructor() {\n    super('Operation timed out.');\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'Promise.TimeoutError'\n    });\n  }\n}\n//# sourceMappingURL=promise.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}