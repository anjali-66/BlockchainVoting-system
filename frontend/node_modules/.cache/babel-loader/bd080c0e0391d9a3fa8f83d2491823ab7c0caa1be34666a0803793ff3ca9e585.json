{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getLastAuthProvider } from \"../../../react/core/utils/storage.js\";\nimport { webLocalStorage } from \"../../../utils/storage/webStorage.js\";\nimport { isEcosystemWallet } from \"../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { ClientScopedStorage } from \"../../../wallets/in-app/core/authentication/client-scoped-storage.js\";\nimport { useActiveWallet } from \"../../core/hooks/wallets/useActiveWallet.js\";\n/**\n * Embeds another thirdweb-supported site for seamless in-app and ecosystem wallet connection.\n *\n *  Make sure the embedded site includes <AutoConnect /> and supports frame ancestors, see [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors) for more information.\n *\n *  The embedded site must support the connected wallet (ecosystem or in-app).\n *\n * @param {Object} props - The props to pass to the iframe\n * @param {String} props.src - The URL of the site to embed\n * @param {ThirdwebClient} props.client - The current site's thirdweb client\n * @param {Ecosystem} [props.ecosystem] - The ecosystem to use for the wallet connection in the embedded site\n *\n * @example\n * ```tsx\n * import { SiteEmbed } from \"thirdweb/react\";\n *\n * <SiteEmbed src=\"https://thirdweb.com\" client={thirdwebClient} ecosystem={{ id: \"ecosystem.thirdweb\" }} />\n * ```\n * @walletConnection\n */\nexport function SiteEmbed({\n  src,\n  client,\n  ecosystem,\n  ...props\n}) {\n  if (!client.clientId) {\n    throw new Error(\"The SiteEmbed client must have a clientId\");\n  }\n  const activeWallet = useActiveWallet();\n  const walletId = activeWallet?.id;\n  const {\n    data: {\n      authProvider,\n      authCookie\n    } = {}\n  } = useQuery({\n    queryKey: [\"site-embed\", walletId, src, client.clientId, ecosystem],\n    enabled: activeWallet && (isEcosystemWallet(activeWallet) || walletId === \"inApp\"),\n    queryFn: async () => {\n      const storage = new ClientScopedStorage({\n        storage: webLocalStorage,\n        clientId: client.clientId,\n        ecosystem\n      });\n      const authProvider = await getLastAuthProvider(webLocalStorage);\n      const authCookie = await storage.getAuthCookie();\n      return {\n        authProvider,\n        authCookie\n      };\n    }\n  });\n  const url = new URL(src);\n  if (walletId) {\n    url.searchParams.set(\"walletId\", walletId);\n  }\n  if (authProvider) {\n    url.searchParams.set(\"authProvider\", authProvider);\n  }\n  if (authCookie) {\n    url.searchParams.set(\"authCookie\", authCookie);\n  }\n  return _jsx(\"iframe\", {\n    src: encodeURI(url.toString()),\n    width: \"100%\",\n    height: \"100%\",\n    allowFullScreen: true,\n    ...props\n  });\n}\n//# sourceMappingURL=SiteEmbed.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}