{"ast":null,"code":"/**\n * Attempts to execute a function that returns a promise and retries if the function throws an error.\n *\n * @param {Function} fn - A function that returns a promise to be executed.\n * @param {Object} options - Configuration options for the retry behavior.\n * @param {number} [options.retries=1] - The number of times to retry the function before failing.\n * @param {number} [options.delay=0] - The delay in milliseconds between retries.\n * @returns {Promise<void>} The result of the function execution if successful.\n */\nexport async function retry(fn, options) {\n  const retries = options.retries ?? 1;\n  const delay = options.delay ?? 0;\n  let lastError = null;\n  for (let i = 0; i < retries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error;\n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  throw lastError;\n}\n//# sourceMappingURL=retry.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}