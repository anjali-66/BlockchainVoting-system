{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo, useState } from \"react\";\nimport { getCachedChain } from \"../../../../../../../chains/utils.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../../constants/addresses.js\";\nimport { NATIVE_TOKEN } from \"../../nativeToken.js\";\nimport { SwapConfirmationScreen } from \"./ConfirmationScreen.js\";\nimport { SwapStatusScreen } from \"./SwapStatusScreen.js\";\nexport function SwapFlow(props) {\n  const [swapTxHash, setSwapTxHash] = useState();\n  const quote = props.buyWithCryptoQuote;\n  const fromChain = useMemo(() => getCachedChain(quote.swapDetails.fromToken.chainId), [quote]);\n  const toChain = useMemo(() => getCachedChain(quote.swapDetails.toToken.chainId), [quote]);\n  const fromTokenSymbol = quote.swapDetails.fromToken.symbol || \"\";\n  const toTokenSymbol = quote.swapDetails.toToken.symbol || \"\";\n  const fromAmount = quote.swapDetails.fromAmount;\n  const toAmount = quote.swapDetails.toAmount;\n  const _toToken = quote.swapDetails.toToken;\n  const _fromToken = quote.swapDetails.fromToken;\n  const toToken = useMemo(() => {\n    if (_toToken.tokenAddress === NATIVE_TOKEN_ADDRESS) {\n      return NATIVE_TOKEN;\n    }\n    const tokenInfo = {\n      address: _toToken.tokenAddress,\n      name: _toToken.name || \"\",\n      symbol: _toToken.symbol || \"\"\n    };\n    return tokenInfo;\n  }, [_toToken]);\n  const fromToken = useMemo(() => {\n    if (_fromToken.tokenAddress === NATIVE_TOKEN_ADDRESS) {\n      return NATIVE_TOKEN;\n    }\n    const tokenInfo = {\n      address: _fromToken.tokenAddress,\n      name: _fromToken.name || \"\",\n      symbol: _fromToken.symbol || \"\"\n    };\n    return tokenInfo;\n  }, [_fromToken]);\n  if (swapTxHash) {\n    return _jsx(SwapStatusScreen, {\n      title: props.title,\n      onBack: props.onBack,\n      onTryAgain: props.onTryAgain,\n      swapTxHash: swapTxHash,\n      client: props.client,\n      onDone: props.onDone,\n      transactionMode: props.transactionMode,\n      isEmbed: props.isEmbed,\n      quote: quote,\n      onSuccess: props.onSuccess\n    });\n  }\n  return _jsx(SwapConfirmationScreen, {\n    title: props.title,\n    setSwapTxHash: setSwapTxHash,\n    toChain: toChain,\n    toAmount: toAmount,\n    toTokenSymbol: toTokenSymbol,\n    fromChain: fromChain,\n    toToken: toToken,\n    fromAmount: fromAmount,\n    fromToken: fromToken,\n    fromTokenSymbol: fromTokenSymbol,\n    client: props.client,\n    onBack: props.onBack,\n    onTryAgain: props.onTryAgain,\n    quote: quote,\n    isFiatFlow: props.isFiatFlow,\n    payer: props.payer\n  });\n}\n//# sourceMappingURL=SwapFlow.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}