{"ast":null,"code":"// eslint-disable-next-line jsdoc/require-jsdoc\nexport function from(response, options = {}) {\n  const {\n    request\n  } = options;\n  return {\n    ...response,\n    id: response.id ?? request?.id,\n    jsonrpc: response.jsonrpc ?? request.jsonrpc\n  };\n}\n/**\n * A type-safe interface to parse a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object), and extract the result.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Create a request store.\n * const store = RpcRequest.createStore()\n *\n * // 2. Get a request object.\n * const request = store.prepare({\n *   method: 'eth_getBlockByNumber',\n *   params: ['0x1', false],\n * })\n *\n * // 3. Send the JSON-RPC request via HTTP.\n * const block = await fetch('https://1.rpc.thirdweb.com', {\n *   body: JSON.stringify(request),\n *   headers: {\n *     'Content-Type': 'application/json',\n *   },\n *   method: 'POST',\n * })\n *  .then((response) => response.json())\n *  // 4. Parse the JSON-RPC response into a type-safe result. // [!code focus]\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code focus]\n *\n * block // [!code focus]\n * // ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::tip\n *\n * If you don't need the return type, you can omit the options entirely.\n *\n * ```ts twoslash\n * // @noErrors\n * import { RpcResponse } from 'ox'\n *\n * const block = await fetch('https://1.rpc.thirdweb.com', {})\n *  .then((response) => response.json())\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code --]\n *  .then(RpcResponse.parse) // [!code ++]\n * ```\n * :::\n *\n * @example\n * ### Raw Mode\n *\n * If `raw` is `true`, the response will be returned as an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * const store = RpcRequest.createStore()\n *\n * const request = store.prepare({\n *   method: 'eth_blockNumber',\n * })\n *\n * const response = RpcResponse.parse({}, {\n *   request,\n *   raw: true, // [!code hl]\n * })\n *\n * response.result\n * //       ^?\n *\n *\n * response.error\n * //       ^?\n *\n *\n * ```\n *\n * @param response - Opaque JSON-RPC response object.\n * @param options - Parsing options.\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\n */\nexport function parse(response, options = {}) {\n  const {\n    raw = false\n  } = options;\n  const response_ = response;\n  if (raw) return response;\n  if (response_.error) {\n    const {\n      code\n    } = response_.error;\n    const JsonRpcError = (() => {\n      if (code === InternalError.code) return InternalError;\n      if (code === InvalidInputError.code) return InvalidInputError;\n      if (code === InvalidParamsError.code) return InvalidParamsError;\n      if (code === InvalidRequestError.code) return InvalidRequestError;\n      if (code === LimitExceededError.code) return LimitExceededError;\n      if (code === MethodNotFoundError.code) return MethodNotFoundError;\n      if (code === MethodNotSupportedError.code) return MethodNotSupportedError;\n      if (code === ParseError.code) return ParseError;\n      if (code === ResourceNotFoundError.code) return ResourceNotFoundError;\n      if (code === ResourceUnavailableError.code) return ResourceUnavailableError;\n      if (code === TransactionRejectedError.code) return TransactionRejectedError;\n      if (code === VersionNotSupportedError.code) return VersionNotSupportedError;\n      return BaseError;\n    })();\n    throw new JsonRpcError(response_.error);\n  }\n  return response_.result;\n}\n/** Thrown when a JSON-RPC error has occurred. */\nexport class BaseError extends Error {\n  constructor(errorObject) {\n    const {\n      code,\n      message,\n      data\n    } = errorObject;\n    super(message);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.BaseError'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.code = code;\n    this.data = data;\n  }\n}\n/** Thrown when the input to a JSON-RPC method is invalid. */\nexport class InvalidInputError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'Missing or invalid parameters.',\n      ...parameters,\n      code: InvalidInputError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32000\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InvalidInputError'\n    });\n  }\n}\nObject.defineProperty(InvalidInputError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32000\n});\n/** Thrown when a JSON-RPC resource is not found. */\nexport class ResourceNotFoundError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'Requested resource not found.',\n      ...parameters,\n      code: ResourceNotFoundError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32001\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.ResourceNotFoundError'\n    });\n  }\n}\nObject.defineProperty(ResourceNotFoundError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32001\n});\n/** Thrown when a JSON-RPC resource is unavailable. */\nexport class ResourceUnavailableError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'Requested resource not available.',\n      ...parameters,\n      code: ResourceUnavailableError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32002\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.ResourceUnavailableError'\n    });\n  }\n}\nObject.defineProperty(ResourceUnavailableError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32002\n});\n/** Thrown when a JSON-RPC transaction is rejected. */\nexport class TransactionRejectedError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'Transaction creation failed.',\n      ...parameters,\n      code: TransactionRejectedError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32003\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.TransactionRejectedError'\n    });\n  }\n}\nObject.defineProperty(TransactionRejectedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32003\n});\n/** Thrown when a JSON-RPC method is not supported. */\nexport class MethodNotSupportedError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'Method is not implemented.',\n      ...parameters,\n      code: MethodNotSupportedError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32004\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.MethodNotSupportedError'\n    });\n  }\n}\nObject.defineProperty(MethodNotSupportedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32004\n});\n/** Thrown when a rate-limit is exceeded. */\nexport class LimitExceededError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'Rate limit exceeded.',\n      ...parameters,\n      code: LimitExceededError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32005\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.LimitExceededError'\n    });\n  }\n}\nObject.defineProperty(LimitExceededError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32005\n});\n/** Thrown when a JSON-RPC version is not supported. */\nexport class VersionNotSupportedError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'JSON-RPC version not supported.',\n      ...parameters,\n      code: VersionNotSupportedError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32006\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.VersionNotSupportedError'\n    });\n  }\n}\nObject.defineProperty(VersionNotSupportedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32006\n});\n/** Thrown when a JSON-RPC request is invalid. */\nexport class InvalidRequestError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'Input is not a valid JSON-RPC request.',\n      ...parameters,\n      code: InvalidRequestError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32600\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InvalidRequestError'\n    });\n  }\n}\nObject.defineProperty(InvalidRequestError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32600\n});\n/** Thrown when a JSON-RPC method is not found. */\nexport class MethodNotFoundError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'Method does not exist.',\n      ...parameters,\n      code: MethodNotFoundError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32601\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.MethodNotFoundError'\n    });\n  }\n}\nObject.defineProperty(MethodNotFoundError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32601\n});\n/** Thrown when the parameters to a JSON-RPC method are invalid. */\nexport class InvalidParamsError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'Invalid method parameters.',\n      ...parameters,\n      code: InvalidParamsError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32602\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InvalidParamsError'\n    });\n  }\n}\nObject.defineProperty(InvalidParamsError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32602\n});\n/** Thrown when an internal JSON-RPC error has occurred. */\nexport class InternalError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'Internal JSON-RPC error.',\n      ...parameters,\n      code: InternalError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32603\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InternalErrorError'\n    });\n  }\n}\nObject.defineProperty(InternalError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32603\n});\n/** Thrown when a JSON-RPC response is invalid. */\nexport class ParseError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      message: 'Failed to parse JSON-RPC response.',\n      ...parameters,\n      code: ParseError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32700\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.ParseError'\n    });\n  }\n}\nObject.defineProperty(ParseError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32700\n});\n//# sourceMappingURL=RpcResponse.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}