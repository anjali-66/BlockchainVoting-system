{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { resolveName } from \"../../../../../extensions/ens/resolve-name.js\";\nimport { getSocialProfiles } from \"../../../../../social/profiles.js\";\nimport { useAccountContext } from \"./provider.js\";\n/**\n * This component is used to display the name of the account.\n * A \"name\" in this context is the username, or account of the social profiles that the wallet may have.\n * In case a name is not found or failed to resolve, you can always fallback to displaying the wallet address instead by using the `fallbackComponent` prop.\n *\n * This component inherits all attribute of a native HTML <span> element, so you can style it just like how you would style a <span>.\n *\n * @param props\n * @returns A `<span>` containing the name of the account\n * ```html\n * <span>{name}</span>\n * ```\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { AccountProvider, AccountName } from \"thirdweb/react\";\n *\n * <AccountProvider address=\"0x1234...3f3f\" client={client}>\n *   <AccountName />\n * </AccountProvider>\n * ```\n *\n * ### Show wallet address while social name is being loaded\n * ```tsx\n * <AccountName\n *   loadingComponent={<AccountAddress />}\n * />\n * ```\n *\n *\n * ### Fallback to showing wallet address if fail to resolve social name\n * ```tsx\n * <AccountName\n *   fallbackComponent={<AccountAddress />}\n * />\n * ```\n *\n * ### Transform the account name using `formatFn` prop\n * ```tsx\n * import { isAddress, shortenAddress } from \"thirdweb/utils\";\n * import { AccountProvider, AccountName } from \"thirdweb/react\";\n *\n * // Let's say we want the name to be capitalized without using CSS\n * const formatName = (name: string) => name.toUpperCase();\n *\n * return <AccountName formatFn={formatName} />\n * ```\n *\n *\n * ### Custom query options for useQuery\n * This component uses `@tanstack-query`'s useQuery internally.\n * You can use the `queryOptions` prop for more fine-grained control\n * ```tsx\n * <AccountName\n *   queryOptions={{\n *     enabled: isEnabled,\n *     retry: 3\n *   }}\n * />\n * ```\n *\n * @component\n * @wallet\n * @beta\n */\nexport function AccountName({\n  resolverAddress,\n  resolverChain,\n  socialType,\n  formatFn,\n  queryOptions,\n  loadingComponent,\n  fallbackComponent,\n  ...restProps\n}) {\n  const {\n    address,\n    client\n  } = useAccountContext();\n  const nameQuery = useQuery({\n    queryKey: [\"account-name\", address, {\n      socialType\n    }, {\n      resolverAddress,\n      resolverChain\n    }],\n    queryFn: async () => {\n      const [socialData, ensName] = await Promise.all([getSocialProfiles({\n        address,\n        client\n      }), resolveName({\n        client,\n        address,\n        resolverAddress,\n        resolverChain\n      })]);\n      const name = socialData?.filter(p => p.name && (socialType ? p.type === socialType : true))[0]?.name || ensName;\n      if (!name) {\n        throw new Error(\"Failed to resolve account name\");\n      }\n      return formatFn ? formatFn(name) : name;\n    },\n    retry: false,\n    ...queryOptions\n  });\n  if (nameQuery.isLoading) {\n    return loadingComponent || null;\n  }\n  if (!nameQuery.data) {\n    return fallbackComponent || null;\n  }\n  return _jsx(\"span\", {\n    ...restProps,\n    children: nameQuery.data\n  });\n}\n//# sourceMappingURL=name.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}