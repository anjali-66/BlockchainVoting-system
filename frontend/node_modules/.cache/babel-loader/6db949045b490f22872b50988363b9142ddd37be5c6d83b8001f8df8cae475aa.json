{"ast":null,"code":"export class WalletLinkHTTP {\n  constructor(linkAPIUrl, sessionId, sessionKey) {\n    this.linkAPIUrl = linkAPIUrl;\n    this.sessionId = sessionId;\n    const credentials = `${sessionId}:${sessionKey}`;\n    this.auth = `Basic ${btoa(credentials)}`;\n  }\n  // mark unseen events as seen\n  async markUnseenEventsAsSeen(events) {\n    return Promise.all(events.map(e => fetch(`${this.linkAPIUrl}/events/${e.eventId}/seen`, {\n      method: 'POST',\n      headers: {\n        Authorization: this.auth\n      }\n    }))).catch(error => console.error('Unabled to mark event as failed:', error));\n  }\n  async fetchUnseenEvents() {\n    var _a;\n    const response = await fetch(`${this.linkAPIUrl}/events?unseen=true`, {\n      headers: {\n        Authorization: this.auth\n      }\n    });\n    if (response.ok) {\n      const {\n        events,\n        error\n      } = await response.json();\n      if (error) {\n        throw new Error(`Check unseen events failed: ${error}`);\n      }\n      const responseEvents = (_a = events === null || events === void 0 ? void 0 : events.filter(e => e.event === 'Web3Response').map(e => ({\n        type: 'Event',\n        sessionId: this.sessionId,\n        eventId: e.id,\n        event: e.event,\n        data: e.data\n      }))) !== null && _a !== void 0 ? _a : [];\n      this.markUnseenEventsAsSeen(responseEvents);\n      return responseEvents;\n    }\n    throw new Error(`Check unseen events failed: ${response.status}`);\n  }\n}\n//# sourceMappingURL=WalletLinkHTTP.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}