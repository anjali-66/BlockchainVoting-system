{"ast":null,"code":"import { createInAppWallet } from \"../core/wallet/in-app-core.js\";\n/**\n * Creates an [Ecosystem Wallet](https://portal.thirdweb.com/connect/wallet/overview) based on various authentication methods. Full list of available authentication methods [here](/connect/wallet/sign-in-methods/configure).\n *\n * Can also be configured to use Account Abstraction to directly connect to a ERC4337 smart account based on those authentication methods.\n *\n * Refer to [inAppWallet](/typescript/v5/inAppWallet) for detailed usage examples.\n *\n * @param createOptions - configuration options\n * Refer to [EcosystemWalletCreationOptions](https://portal.thirdweb.com/references/typescript/v5/EcosystemWalletCreationOptions) for more details.\n * @returns The created ecosystem wallet.\n *\n *\n * @example\n * ### Logging into an ecosystem wallet\n *\n * Below is the general code snippet needed to connect via a given auth strategy to an ecosystem wallet. For more variants on the various auth strategies, refer to [inAppWallet](/typescript/v5/inAppWallet).\n *\n * ```ts\n * import { ecosystemWallet } from \"thirdweb/wallets\";\n *\n * const wallet = ecosystemWallet(\"ecosystem.hooli\");\n *\n * const account = await wallet.connect({\n *   client,\n *   chain,\n *   strategy: \"google\",\n * });\n * ```\n *\n * [View all connection options](https://portal.thirdweb.com/references/typescript/v5/EcosystemWalletConnectionOptions).\n *\n * ### Connect to a restricted ecosystem wallet with your designated partner ID\n *\n * The parnter ID will be provided to you by the ecosystem with which you're integrating.\n *\n * ```ts\n * import { ecosystemWallet } from \"thirdweb/wallets\";\n * const wallet = ecosystemWallet(\"ecosystem.hooli\", {\n *  partnerId: \"...\"\n * });\n * ```\n *\n *\n * @wallet\n */\nexport function ecosystemWallet(...args) {\n  const [ecosystemId, createOptions] = args;\n  const ecosystem = {\n    id: ecosystemId,\n    partnerId: createOptions?.partnerId\n  };\n  return createInAppWallet({\n    ecosystem,\n    createOptions: {\n      auth: {\n        ...createOptions?.auth,\n        options: [] // controlled by ecosystem\n      },\n      partnerId: ecosystem.partnerId\n    },\n    connectorFactory: async client => {\n      const {\n        InAppWebConnector\n      } = await import(\"./lib/web-connector.js\");\n      return new InAppWebConnector({\n        client,\n        ecosystem\n      });\n    }\n  });\n}\n//# sourceMappingURL=ecosystem.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}