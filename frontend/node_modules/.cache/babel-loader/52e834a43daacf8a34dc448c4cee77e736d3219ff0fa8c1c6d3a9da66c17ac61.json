{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport styled from \"@emotion/styled\";\nimport { CrossCircledIcon, MagnifyingGlassIcon } from \"@radix-ui/react-icons\";\nimport Fuse from \"fuse.js\";\nimport { Fragment, memo, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { convertApiChainToChain } from \"../../../../chains/utils.js\";\nimport { CustomThemeProvider, useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { fontSize, iconSize, media, radius, spacing } from \"../../../core/design-system/index.js\";\nimport { useChainIconUrl, useChainName, useChainsQuery } from \"../../../core/hooks/others/useChainQuery.js\";\nimport { useActiveWalletChain } from \"../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport { useSwitchActiveWalletChain } from \"../../../core/hooks/wallets/useSwitchActiveWalletChain.js\";\nimport { SetRootElementContext } from \"../../../core/providers/RootElementContext.js\";\nimport { ChainIcon } from \"../components/ChainIcon.js\";\nimport { Modal } from \"../components/Modal.js\";\nimport { Skeleton } from \"../components/Skeleton.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport { Container, Line, ModalHeader } from \"../components/basic.js\";\nimport { Button } from \"../components/buttons.js\";\nimport { Input } from \"../components/formElements.js\";\nimport { ModalTitle } from \"../components/modalElements.js\";\nimport { Text } from \"../components/text.js\";\nimport { StyledButton, StyledP, StyledUl } from \"../design-system/elements.js\";\nimport { useDebouncedValue } from \"../hooks/useDebouncedValue.js\";\nimport { useShowMore } from \"../hooks/useShowMore.js\";\nimport { getConnectLocale } from \"./locale/getConnectLocale.js\";\n/**\n * @internal\n */\nexport function NetworkSelectorContent(props) {\n  const locale = props.connectLocale.networkSelector;\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedTab, setSelectedTab] = useState(\"all\");\n  const deferredSearchTerm = useDebouncedValue(searchTerm, 300);\n  const {\n    onSwitch,\n    onCustomClick\n  } = props.networkSelector || {};\n  // labels\n  const othersLabel = locale.categoryLabel.others;\n  const popularLabel = locale.categoryLabel.popular;\n  const recentLabel = locale.categoryLabel.recentlyUsed;\n  // create sections, chainToSectionMap and allChains\n  const {\n    chainSections,\n    allChains,\n    allChainsToSectionMap\n  } = useMemo(() => {\n    const chainSectionsValue = [];\n    const allChainsValue = [];\n    const allChainsToSectionMapValue = new Map();\n    function addChain(c, section) {\n      allChainsToSectionMapValue.set(c.id, section);\n      allChainsValue.push(c);\n    }\n    // if new API is used\n    if (props.networkSelector?.sections) {\n      for (const s of props.networkSelector.sections) {\n        const chainsToAdd = s.chains.filter(c => !allChainsToSectionMapValue.has(c.id));\n        if (chainsToAdd.length > 0) {\n          chainSectionsValue.push({\n            label: s.label,\n            chains: chainsToAdd\n          });\n          for (const c of chainsToAdd) {\n            addChain(c, s.label);\n          }\n        }\n      }\n    }\n    // if old API is used\n    else {\n      const allChainsMap = new Map(props.chains.map(c => [c.id, c]));\n      // add all recent chains\n      if (props.networkSelector?.recentChainIds && props.networkSelector?.recentChainIds.length > 0) {\n        const recentChains = props.networkSelector.recentChainIds.map(id => allChainsMap.get(id)).filter(c => c !== undefined);\n        chainSectionsValue.push({\n          label: recentLabel,\n          chains: recentChains\n        });\n        for (const c of recentChains) {\n          addChain(c, recentLabel);\n        }\n      }\n      // then add all popular chains ( exclude already added chains )\n      if (props.networkSelector?.popularChainIds && props.networkSelector.popularChainIds.length > 0) {\n        const popularChains = props.networkSelector.popularChainIds.map(id => allChainsMap.get(id)).filter(c => c !== undefined);\n        const chainsToAdd = popularChains.filter(c => !allChainsToSectionMapValue.has(c.id));\n        if (chainsToAdd.length > 0) {\n          chainSectionsValue.push({\n            label: popularLabel,\n            chains: chainsToAdd\n          });\n          for (const c of chainsToAdd) {\n            addChain(c, popularLabel);\n          }\n        }\n      }\n    }\n    // add all other chains ( exclude already added chains )\n    const otherChainsToAdd = props.chains.filter(c => !allChainsToSectionMapValue.has(c.id));\n    if (otherChainsToAdd.length > 0) {\n      chainSectionsValue.push({\n        label: othersLabel,\n        chains: otherChainsToAdd\n      });\n      for (const c of otherChainsToAdd) {\n        addChain(c, othersLabel);\n      }\n    }\n    return {\n      chainSections: chainSectionsValue,\n      allChains: allChainsValue,\n      allChainsToSectionMap: allChainsToSectionMapValue\n    };\n  }, [props.networkSelector?.sections, props.networkSelector?.recentChainIds, props.networkSelector?.popularChainIds, props.chains, recentLabel, popularLabel, othersLabel]);\n  // optimizing for dashboard - if we already have names - don't query - we already have the data we want\n  const chainsHaveName = allChains.every(c => !!c.name);\n  const allChainsQuery = useChainsQuery(chainsHaveName ? [] : allChains, 10);\n  const isAllChainsQueryLoading = chainsHaveName ? false : allChainsQuery.some(q => q.isLoading);\n  const allChainsMetadata = chainsHaveName ? allChains : !isAllChainsQueryLoading ? allChainsQuery.filter(x => !!x.data).map(q => convertApiChainToChain(q.data)) : [];\n  // fuse instance for searching\n  const fuse = useMemo(() => {\n    return new Fuse(allChainsMetadata, {\n      threshold: 0.4,\n      keys: [{\n        name: \"name\",\n        weight: 1\n      }, {\n        name: \"chainId\",\n        weight: 1\n      }]\n    });\n  }, [allChainsMetadata]);\n  // chains filtered by search term\n  const searchedChainSections = useMemo(() => {\n    if (deferredSearchTerm === \"\") {\n      return undefined;\n    }\n    const filteredChainSectionsValue = [];\n    const filteredAllChains = fuse.search(deferredSearchTerm).map(r => r.item);\n    for (const c of filteredAllChains) {\n      const label = allChainsToSectionMap.get(c.id);\n      if (!label) {\n        return; // just a type guard, this never happens\n      }\n      const section = filteredChainSectionsValue.find(s => s.label === label);\n      if (section) {\n        section.chains.push(c);\n      } else {\n        filteredChainSectionsValue.push({\n          label,\n          chains: [c]\n        });\n      }\n    }\n    return filteredChainSectionsValue;\n  }, [deferredSearchTerm, fuse, allChainsToSectionMap]) || chainSections;\n  const filteredChainSections = useMemo(() => {\n    if (selectedTab === \"all\") {\n      return searchedChainSections;\n    }\n    return searchedChainSections.map(section => ({\n      label: section.label,\n      chains: section.chains.filter(c => selectedTab === \"mainnet\" && !c.testnet || selectedTab === \"testnet\" && c.testnet)\n    }));\n  }, [searchedChainSections, selectedTab]);\n  const handleSwitch = useCallback(chain => {\n    if (onSwitch) {\n      onSwitch(chain);\n    }\n    props.closeModal();\n  }, [onSwitch, props]);\n  return _jsxs(Container, {\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: props.onBack ? _jsx(ModalHeader, {\n        title: locale.title,\n        onBack: props.onBack\n      }) : _jsx(ModalTitle, {\n        children: locale.title\n      })\n    }), props.showTabs !== false && _jsxs(_Fragment, {\n      children: [_jsx(Container, {\n        px: \"lg\",\n        children: _jsxs(Container, {\n          flex: \"row\",\n          gap: \"xxs\",\n          children: [_jsx(TabButton, {\n            onClick: () => setSelectedTab(\"all\"),\n            \"data-active\": selectedTab === \"all\",\n            children: locale.allNetworks\n          }), _jsx(TabButton, {\n            onClick: () => setSelectedTab(\"mainnet\"),\n            \"data-active\": selectedTab === \"mainnet\",\n            children: locale.mainnets\n          }), _jsx(TabButton, {\n            onClick: () => setSelectedTab(\"testnet\"),\n            \"data-active\": selectedTab === \"testnet\",\n            children: locale.testnets\n          })]\n        })\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      })]\n    }), props.showTabs === false && _jsx(Spacer, {\n      y: \"xxs\"\n    }), _jsx(Container, {\n      px: \"lg\",\n      children: _jsxs(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          position: \"relative\"\n        },\n        children: [_jsx(StyledMagnifyingGlassIcon, {\n          width: iconSize.md,\n          height: iconSize.md\n        }), _jsx(Input, {\n          style: {\n            padding: `${spacing.sm} ${spacing.md} ${spacing.sm} ${spacing.xxl}`\n          },\n          tabIndex: -1,\n          variant: \"outline\",\n          value: searchTerm,\n          onChange: e => {\n            setSearchTerm(e.target.value);\n          },\n          disabled: isAllChainsQueryLoading,\n          placeholder: isAllChainsQueryLoading ? \"Loading chains...\" : locale.inputPlaceholder\n        }), (deferredSearchTerm !== searchTerm || isAllChainsQueryLoading) && _jsx(\"div\", {\n          style: {\n            position: \"absolute\",\n            right: spacing.md\n          },\n          children: _jsx(Spinner, {\n            size: \"md\",\n            color: \"accentText\"\n          })\n        })]\n      })\n    }), _jsx(Spacer, {\n      y: \"lg\"\n    }), _jsx(Container, {\n      px: \"md\",\n      children: _jsx(NetworkTabContent, {\n        chainSections: filteredChainSections,\n        onSwitch: handleSwitch,\n        renderChain: props.networkSelector?.renderChain,\n        connectLocale: props.connectLocale,\n        client: props.client,\n        close: props.closeModal\n      })\n    }), onCustomClick && _jsxs(_Fragment, {\n      children: [_jsx(Line, {}), _jsx(Container, {\n        p: \"lg\",\n        children: _jsx(Button, {\n          fullWidth: true,\n          variant: \"link\",\n          onClick: () => {\n            onCustomClick();\n            props.closeModal();\n          },\n          style: {\n            display: \"flex\",\n            fontSize: fontSize.sm,\n            boxShadow: \"none\"\n          },\n          children: locale.addCustomNetwork\n        })\n      })]\n    })]\n  });\n}\n/**\n *\n * @internal\n */\nconst NetworkTabContent = props => {\n  const {\n    chainSections\n  } = props;\n  const noChainsToShow = chainSections.every(section => section.chains.length === 0);\n  return _jsx(Container, {\n    scrollY: true,\n    animate: \"fadein\",\n    style: {\n      height: \"330px\",\n      paddingBottom: spacing.lg\n    },\n    children: noChainsToShow ? _jsxs(Container, {\n      flex: \"column\",\n      gap: \"md\",\n      center: \"both\",\n      color: \"secondaryText\",\n      children: [_jsx(Spacer, {\n        y: \"xl\"\n      }), _jsx(CrossCircledIcon, {\n        width: iconSize.xl,\n        height: iconSize.xl\n      }), _jsx(Text, {\n        children: \" No Results \"\n      })]\n    }) : chainSections.map((section, idx) => {\n      if (section.chains.length === 0) {\n        return null;\n      }\n      return _jsxs(Fragment, {\n        children: [idx !== 0 && _jsx(Spacer, {\n          y: \"lg\"\n        }), _jsx(SectionLabel, {\n          children: section.label\n        }), _jsx(Spacer, {\n          y: \"xs\"\n        }), _jsx(NetworkList, {\n          chains: section.chains,\n          onSwitch: props.onSwitch,\n          renderChain: props.renderChain,\n          close: props.close,\n          client: props.client,\n          connectLocale: props.connectLocale\n        })]\n      }, section.label);\n    })\n  });\n};\nconst NetworkList = /* @__PURE__ */memo(function NetworkList(props) {\n  // show 10 items first, when reaching the last item, show 10 more\n  const {\n    itemsToShow,\n    lastItemRef\n  } = useShowMore(10, 10);\n  const switchChain = useSwitchActiveWalletChain();\n  const activeChain = useActiveWalletChain();\n  const [switchingChainId, setSwitchingChainId] = useState(-1);\n  const [errorSwitchingChainId, setErrorSwitchingChainId] = useState(-1);\n  const close = props.close;\n  useEffect(() => {\n    // if switching and switched successfully - close modal\n    if (switchingChainId !== -1 && activeChain?.id === switchingChainId) {\n      if (close) {\n        close();\n      }\n    }\n  }, [switchingChainId, close, activeChain?.id]);\n  const handleSwitch = async chain => {\n    setErrorSwitchingChainId(-1);\n    setSwitchingChainId(chain.id);\n    try {\n      await switchChain(chain);\n      props.onSwitch(chain);\n    } catch (e) {\n      setErrorSwitchingChainId(chain.id);\n      console.error(e);\n    } finally {\n      setSwitchingChainId(-1);\n    }\n  };\n  const RenderChain = props.renderChain;\n  const chainsToShow = props.chains.slice(0, itemsToShow);\n  return _jsx(NetworkListUl, {\n    children: chainsToShow.map((chain, i) => {\n      if (!chain) {\n        return null;\n      }\n      const confirming = switchingChainId === chain.id;\n      const switchingFailed = errorSwitchingChainId === chain.id;\n      const isLast = i === chainsToShow.length - 1;\n      return _jsx(\"li\", {\n        ref: isLast ? lastItemRef : undefined,\n        children: RenderChain ? _jsx(RenderChain, {\n          switchChain: () => {\n            handleSwitch(chain);\n          },\n          chain: chain,\n          switching: switchingChainId === chain.id,\n          switchFailed: errorSwitchingChainId === chain.id,\n          close: props.close\n        }) : _jsx(ChainButton, {\n          chain: chain,\n          confirming: confirming,\n          onClick: () => handleSwitch(chain),\n          switchingFailed: switchingFailed,\n          client: props.client,\n          connectLocale: props.connectLocale\n        })\n      }, chain.id);\n    })\n  });\n});\nexport const ChainButton = /* @__PURE__ */memo(function ChainButton(props) {\n  const locale = props.connectLocale;\n  const {\n    chain,\n    confirming,\n    switchingFailed\n  } = props;\n  const activeChain = useActiveWalletChain();\n  const chainNameQuery = useChainName(chain);\n  const chainIconQuery = useChainIconUrl(chain);\n  let chainName;\n  if (chainNameQuery.name) {\n    chainName = _jsxs(\"span\", {\n      children: [chainNameQuery.name, \" \"]\n    });\n  } else {\n    chainName = _jsx(Skeleton, {\n      width: \"150px\",\n      height: \"20px\"\n    });\n  }\n  return _jsxs(NetworkButton, {\n    \"data-active\": activeChain?.id === chain.id,\n    onClick: props.onClick,\n    children: [!chainIconQuery.isLoading ? _jsx(ChainIcon, {\n      chainIconUrl: chainIconQuery.url,\n      size: iconSize.lg,\n      active: activeChain?.id === chain.id,\n      loading: \"lazy\",\n      client: props.client\n    }) : _jsx(Skeleton, {\n      width: `${iconSize.lg}px`,\n      height: `${iconSize.lg}px`\n    }), confirming || switchingFailed ? _jsxs(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: spacing.xs\n      },\n      children: [chainName, _jsxs(Container, {\n        animate: \"fadein\",\n        flex: \"row\",\n        gap: \"xxs\",\n        center: \"y\",\n        children: [confirming && _jsxs(_Fragment, {\n          children: [_jsx(Text, {\n            size: \"xs\",\n            color: \"accentText\",\n            children: locale.confirmInWallet\n          }), _jsx(Spinner, {\n            size: \"xs\",\n            color: \"accentText\"\n          })]\n        }), switchingFailed && _jsx(Container, {\n          animate: \"fadein\",\n          children: _jsx(Text, {\n            size: \"xs\",\n            color: \"danger\",\n            children: locale.networkSelector.failedToSwitch\n          })\n        })]\n      })]\n    }) : chainName]\n  });\n});\nconst TabButton = /* @__PURE__ */(() => styled.button(_ => {\n  const theme = useCustomTheme();\n  return {\n    all: \"unset\",\n    fontSize: fontSize.sm,\n    fontWeight: 500,\n    color: theme.colors.secondaryText,\n    cursor: \"pointer\",\n    padding: `${spacing.sm} ${spacing.sm}`,\n    WebkitTapHighlightColor: \"transparent\",\n    borderRadius: radius.lg,\n    transition: \"background 0.2s ease, color 0.2s ease\",\n    \"&[data-active='true']\": {\n      background: theme.colors.secondaryButtonBg,\n      color: theme.colors.primaryText\n    }\n  };\n}))();\nconst SectionLabel = /* @__PURE__ */StyledP(() => {\n  const theme = useCustomTheme();\n  return {\n    fontSize: fontSize.sm,\n    color: theme.colors.secondaryText,\n    margin: 0,\n    display: \"block\",\n    padding: `0 ${spacing.xs}`\n  };\n});\nconst NetworkListUl = /* @__PURE__ */StyledUl({\n  padding: 0,\n  margin: 0,\n  listStyle: \"none\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: spacing.xs,\n  boxSizing: \"border-box\"\n});\nconst NetworkButton = /* @__PURE__ */StyledButton(_ => {\n  const theme = useCustomTheme();\n  return {\n    all: \"unset\",\n    display: \"flex\",\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    alignItems: \"center\",\n    gap: spacing.md,\n    padding: `${spacing.xs} ${spacing.sm}`,\n    borderRadius: radius.md,\n    cursor: \"pointer\",\n    transition: \"background 0.2s ease\",\n    color: theme.colors.primaryText,\n    fontWeight: 500,\n    fontSize: fontSize.md,\n    \"&:hover\": {\n      background: theme.colors.secondaryButtonBg\n    },\n    [media.mobile]: {\n      fontSize: fontSize.sm\n    }\n  };\n});\nconst StyledMagnifyingGlassIcon = /* @__PURE__ */styled(MagnifyingGlassIcon)(_ => {\n  const theme = useCustomTheme();\n  return {\n    color: theme.colors.secondaryText,\n    position: \"absolute\",\n    left: spacing.sm\n  };\n});\n/**\n * Hook to open the Wallet Network Switcher Modal that shows allows users to switch to different network.\n *\n * @example\n * ```tsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { useNetworkSwitcherModal } from \"thirdweb/react\";\n * import { base, ethereum, polygon, sepolia, arbitrum } from \"thirdweb/chains\";\n *\n * const client = createThirdwebClient({\n *  clientId: \"<your_client_id>\",\n * });\n *\n * function Example() {\n *   const networkSwitcher = useNetworkSwitcherModal();\n *\n *   function handleClick() {\n *      networkSwitcher.open({\n *        client,\n *        theme: 'light'\n *        sections: [\n *          { label: 'Recently used', chains: [arbitrum, polygon] },\n *          { label: 'Popular', chains: [base, ethereum, sepolia] },\n *        ]\n *     });\n *   }\n *\n *   return <button onClick={handleClick}> Switch Network </button>\n * }\n * ```\n * @wallet\n */\nexport function useNetworkSwitcherModal() {\n  const activeChain = useActiveWalletChain();\n  const setRootEl = useContext(SetRootElementContext);\n  const closeModal = useCallback(() => {\n    setRootEl(null);\n  }, [setRootEl]);\n  const openNetworkSwitcher = useCallback(async props => {\n    if (!activeChain) {\n      throw new Error(\"No active wallet found\");\n    }\n    const locale = await getConnectLocale(props.locale || \"en_US\");\n    setRootEl(_jsx(CustomThemeProvider, {\n      theme: props.theme,\n      children: _jsx(Modal, {\n        size: \"compact\",\n        open: true,\n        setOpen: value => {\n          if (!value) {\n            closeModal();\n          }\n        },\n        style: {\n          paddingBottom: props.onCustomClick ? spacing.md : \"0px\"\n        },\n        children: _jsx(NetworkSelectorContent, {\n          client: props.client,\n          closeModal: closeModal,\n          chains: [activeChain],\n          connectLocale: locale,\n          networkSelector: {\n            onCustomClick: props.onCustomClick,\n            onSwitch: props.onSwitch,\n            renderChain: props.renderChain,\n            sections: props.sections\n          }\n        })\n      })\n    }));\n  }, [setRootEl, closeModal, activeChain]);\n  return {\n    open: openNetworkSwitcher,\n    close: closeModal\n  };\n}\n//# sourceMappingURL=NetworkSelector.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}