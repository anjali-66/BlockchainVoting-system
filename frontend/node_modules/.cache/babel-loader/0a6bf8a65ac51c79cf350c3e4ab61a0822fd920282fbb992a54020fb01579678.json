{"ast":null,"code":"import { webLocalStorage } from \"../../../../utils/storage/webStorage.js\";\nimport { createWallet } from \"../../../../wallets/create-wallet.js\";\nimport { getInstalledWalletProviders } from \"../../../../wallets/injected/mipdStore.js\";\nimport { useAutoConnectCore } from \"../../../core/hooks/wallets/useAutoConnect.js\";\nimport { getDefaultWallets } from \"../../wallets/defaultWallets.js\";\n/**\n * Autoconnect the last previously connected wallet.\n *\n * @example\n * ```tsx\n * import { useAutoConnect } from \"thirdweb/react\";\n *\n * const { data: autoConnected, isLoading } = useAutoConnect({\n *  client,\n *  accountAbstraction,\n *  wallets,\n *  onConnect,\n *  timeout,\n * });\n * ```\n * @walletConnection\n * @param props - The props for auto connect.\n * @returns whether the auto connect was successful.\n */\nexport function useAutoConnect(props) {\n  const wallets = props.wallets || getDefaultWallets(props);\n  return useAutoConnectCore(webLocalStorage, {\n    ...props,\n    wallets\n  }, createWallet, () => {\n    const specifiedWalletIds = new Set(wallets.map(x => x.id));\n    // pass the wallets that are not already specified but are installed by the user\n    const installedWallets = getInstalledWalletProviders().filter(x => !specifiedWalletIds.has(x.info.rdns)).map(x => createWallet(x.info.rdns));\n    return installedWallets;\n  });\n}\n//# sourceMappingURL=useAutoConnect.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}