{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { CheckIcon, CopyIcon } from \"@radix-ui/react-icons\";\nimport { useState } from \"react\";\nimport { fontSize, iconSize, spacing } from \"../../../core/design-system/index.js\";\nimport { AccentFailIcon } from \"../../ui/ConnectWallet/icons/AccentFailIcon.js\";\nimport { QRCode } from \"../../ui/components/QRCode.js\";\nimport { Spacer } from \"../../ui/components/Spacer.js\";\nimport { WalletImage } from \"../../ui/components/WalletImage.js\";\nimport { Container, ModalHeader, ScreenBottomContainer } from \"../../ui/components/basic.js\";\nimport { Button } from \"../../ui/components/buttons.js\";\nimport { Text } from \"../../ui/components/text.js\";\n/**\n * @internal\n */\nexport const ScanScreen = props => {\n  const {\n    connectModalSize,\n    client\n  } = props;\n  const [linkCopied, setLinkCopied] = useState(false);\n  return _jsxs(Container, {\n    fullHeight: true,\n    flex: \"column\",\n    animate: \"fadein\",\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: _jsx(ModalHeader, {\n        onBack: props.onBack,\n        title: props.walletName\n      })\n    }), _jsx(Spacer, {\n      y: \"sm\"\n    }), _jsxs(Container, {\n      expand: true,\n      flex: \"column\",\n      px: \"lg\",\n      center: \"both\",\n      children: [!props.error && _jsxs(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [_jsx(QRCode, {\n          qrCodeUri: props.qrCodeUri,\n          QRIcon: _jsx(WalletImage, {\n            size: iconSize.xxl,\n            id: props.walletId,\n            client: client\n          })\n        }), _jsx(Spacer, {\n          y: \"xs\"\n        }), _jsxs(Button, {\n          disabled: props.qrCodeUri === undefined,\n          variant: \"link\",\n          style: {\n            fontSize: \"12px\",\n            opacity: props.qrCodeUri === undefined ? 0.5 : 1,\n            cursor: props.qrCodeUri === undefined ? \"default\" : \"pointer\"\n          },\n          onClick: () => {\n            navigator.clipboard.writeText(props.qrCodeUri) // should always be string since the button is disabled otherwise\n            .then(() => {\n              setLinkCopied(true);\n              setTimeout(() => setLinkCopied(false), 3000); // reset the check icon after 3 seconds\n            }).catch(err => {\n              console.error(\"Failed to copy link to clipboard\", err);\n            });\n          },\n          children: [linkCopied ? _jsx(CheckIcon, {\n            width: 14,\n            height: 14\n          }) : _jsx(CopyIcon, {\n            width: 14,\n            height: 14\n          }), _jsx(\"span\", {\n            style: {\n              padding: \"0 4px\"\n            },\n            children: \"Copy Link\"\n          })]\n        }), _jsx(Spacer, {\n          y: \"lg\"\n        }), _jsx(Text, {\n          center: true,\n          multiline: true,\n          balance: true,\n          style: {\n            paddingInline: spacing.lg\n          },\n          children: props.qrScanInstruction\n        })]\n      }), props.error && _jsxs(Container, {\n        animate: \"fadein\",\n        style: {\n          width: \"100%\"\n        },\n        children: [_jsx(Spacer, {\n          y: \"xxl\"\n        }), _jsx(Container, {\n          flex: \"row\",\n          center: \"x\",\n          children: _jsx(AccentFailIcon, {\n            size: iconSize[\"3xl\"]\n          })\n        }), _jsx(Spacer, {\n          y: \"lg\"\n        }), _jsx(Text, {\n          center: true,\n          size: \"lg\",\n          color: \"primaryText\",\n          children: \"Connection Failed\"\n        }), _jsx(Spacer, {\n          y: \"3xl\"\n        }), _jsx(Button, {\n          fullWidth: true,\n          variant: \"accent\",\n          onClick: props.onRetry,\n          children: \"Try again\"\n        })]\n      })]\n    }), _jsx(Spacer, {\n      y: \"lg\"\n    }), props.onGetStarted && _jsx(ScreenBottomContainer, {\n      style: {\n        border: connectModalSize === \"compact\" ? undefined : \"none\"\n      },\n      children: _jsx(Button, {\n        variant: \"link\",\n        onClick: props.onGetStarted,\n        style: {\n          fontSize: fontSize.sm,\n          textAlign: \"center\"\n        },\n        children: props.getStartedLink\n      })\n    })]\n  });\n};\n//# sourceMappingURL=ScanScreen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}