{"ast":null,"code":"import { disconnectWalletConnectSession } from \"./index.js\";\nimport { getSessions, saveSession } from \"./session-store.js\";\n/**\n * @internal\n */\nexport async function onSessionProposal(options) {\n  const {\n    wallet,\n    walletConnectClient,\n    event,\n    chains,\n    onConnect\n  } = options;\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(\"No account connected to provided wallet\");\n  }\n  const origin = event.verifyContext?.verified?.origin;\n  if (origin) {\n    await disconnectExistingSessions({\n      origin,\n      walletConnectClient\n    });\n  }\n  const session = await acceptSessionProposal({\n    account,\n    walletConnectClient,\n    sessionProposal: event,\n    chains\n  });\n  await saveSession(session);\n  wallet.subscribe(\"disconnect\", () => {\n    disconnectWalletConnectSession({\n      session,\n      walletConnectClient\n    });\n  });\n  onConnect?.(session);\n}\n/**\n * @internal\n */\nexport async function disconnectExistingSessions({\n  walletConnectClient,\n  origin\n}) {\n  const sessions = await getSessions();\n  for (const session of sessions) {\n    if (session.origin === origin) {\n      await disconnectWalletConnectSession({\n        session,\n        walletConnectClient\n      });\n    }\n  }\n}\n/**\n * @internal\n */\nexport async function acceptSessionProposal({\n  account,\n  walletConnectClient,\n  sessionProposal,\n  chains\n}) {\n  if (!sessionProposal.params.requiredNamespaces?.eip155 && !sessionProposal.params.optionalNamespaces?.eip155) {\n    throw new Error(\"No EIP155 namespace found in Wallet Connect session proposal\");\n  }\n  const namespaces = {\n    chains: [...Array.from(new Set([...(sessionProposal.params.requiredNamespaces?.eip155?.chains?.map(chain => `${chain}:${account.address}`) ?? []), ...(sessionProposal.params.optionalNamespaces?.eip155?.chains?.map(chain => `${chain}:${account.address}`) ?? []), ...(chains?.map(chain => `eip155:${chain.id}:${account.address}`) ?? [])]))],\n    methods: [...(sessionProposal.params.requiredNamespaces?.eip155?.methods ?? []), ...(sessionProposal.params.optionalNamespaces?.eip155?.methods ?? [])],\n    events: [...(sessionProposal.params.requiredNamespaces?.eip155?.events ?? []), ...(sessionProposal.params.optionalNamespaces?.eip155?.events ?? [])]\n  };\n  const approval = await walletConnectClient.approve({\n    id: sessionProposal.id,\n    namespaces: {\n      eip155: {\n        accounts: namespaces.chains,\n        methods: namespaces.methods,\n        events: namespaces.events\n      }\n    }\n  });\n  const session = await approval.acknowledged();\n  return {\n    topic: session.topic,\n    origin: sessionProposal.verifyContext?.verified?.origin || \"Unknown origin\"\n  };\n}\n//# sourceMappingURL=session-proposal.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}