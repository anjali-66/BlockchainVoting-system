{"ast":null,"code":"// Copyright (c) 2018-2023 Coinbase, Inc. <https://www.coinbase.com/>\nexport var ConnectionState;\n(function (ConnectionState) {\n  ConnectionState[ConnectionState[\"DISCONNECTED\"] = 0] = \"DISCONNECTED\";\n  ConnectionState[ConnectionState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n  ConnectionState[ConnectionState[\"CONNECTED\"] = 2] = \"CONNECTED\";\n})(ConnectionState || (ConnectionState = {}));\nexport class WalletLinkWebSocket {\n  setConnectionStateListener(listener) {\n    this.connectionStateListener = listener;\n  }\n  setIncomingDataListener(listener) {\n    this.incomingDataListener = listener;\n  }\n  /**\n   * Constructor\n   * @param url WebSocket server URL\n   * @param [WebSocketClass] Custom WebSocket implementation\n   */\n  constructor(url, WebSocketClass = WebSocket) {\n    this.WebSocketClass = WebSocketClass;\n    this.webSocket = null;\n    this.pendingData = [];\n    this.url = url.replace(/^http/, 'ws');\n  }\n  /**\n   * Make a websocket connection\n   * @returns a Promise that resolves when connected\n   */\n  async connect() {\n    if (this.webSocket) {\n      throw new Error('webSocket object is not null');\n    }\n    return new Promise((resolve, reject) => {\n      var _a;\n      let webSocket;\n      try {\n        this.webSocket = webSocket = new this.WebSocketClass(this.url);\n      } catch (err) {\n        reject(err);\n        return;\n      }\n      (_a = this.connectionStateListener) === null || _a === void 0 ? void 0 : _a.call(this, ConnectionState.CONNECTING);\n      webSocket.onclose = evt => {\n        var _a;\n        this.clearWebSocket();\n        reject(new Error(`websocket error ${evt.code}: ${evt.reason}`));\n        (_a = this.connectionStateListener) === null || _a === void 0 ? void 0 : _a.call(this, ConnectionState.DISCONNECTED);\n      };\n      webSocket.onopen = _ => {\n        var _a;\n        resolve();\n        (_a = this.connectionStateListener) === null || _a === void 0 ? void 0 : _a.call(this, ConnectionState.CONNECTED);\n        if (this.pendingData.length > 0) {\n          const pending = [...this.pendingData];\n          pending.forEach(data => this.sendData(data));\n          this.pendingData = [];\n        }\n      };\n      webSocket.onmessage = evt => {\n        var _a, _b;\n        if (evt.data === 'h') {\n          (_a = this.incomingDataListener) === null || _a === void 0 ? void 0 : _a.call(this, {\n            type: 'Heartbeat'\n          });\n        } else {\n          try {\n            const message = JSON.parse(evt.data);\n            (_b = this.incomingDataListener) === null || _b === void 0 ? void 0 : _b.call(this, message);\n          } catch (_c) {\n            /* empty */\n          }\n        }\n      };\n    });\n  }\n  /**\n   * Disconnect from server\n   */\n  disconnect() {\n    var _a;\n    const {\n      webSocket\n    } = this;\n    if (!webSocket) {\n      return;\n    }\n    this.clearWebSocket();\n    (_a = this.connectionStateListener) === null || _a === void 0 ? void 0 : _a.call(this, ConnectionState.DISCONNECTED);\n    this.connectionStateListener = undefined;\n    this.incomingDataListener = undefined;\n    try {\n      webSocket.close();\n    } catch (_b) {\n      // noop\n    }\n  }\n  /**\n   * Send data to server\n   * @param data text to send\n   */\n  sendData(data) {\n    const {\n      webSocket\n    } = this;\n    if (!webSocket) {\n      this.pendingData.push(data);\n      this.connect();\n      return;\n    }\n    webSocket.send(data);\n  }\n  clearWebSocket() {\n    const {\n      webSocket\n    } = this;\n    if (!webSocket) {\n      return;\n    }\n    this.webSocket = null;\n    webSocket.onclose = null;\n    webSocket.onerror = null;\n    webSocket.onmessage = null;\n    webSocket.onopen = null;\n  }\n}\n//# sourceMappingURL=WalletLinkWebSocket.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}