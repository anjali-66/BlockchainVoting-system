{"ast":null,"code":"import { useState } from \"react\";\nimport { polygon } from \"../../../../../../../chains/chain-definitions/polygon.js\";\nimport { useActiveWalletChain } from \"../../../../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport { useDebouncedValue } from \"../../../../hooks/useDebouncedValue.js\";\nimport { NATIVE_TOKEN } from \"../../nativeToken.js\";\nimport { currencies, usdCurrency } from \"../fiat/currencies.js\";\n// handle states for token and chain selection\nexport function useToTokenSelectionStates(options) {\n  const {\n    payOptions,\n    supportedDestinations\n  } = options;\n  // --------------------------------------------------------------------------\n  // buy token amount ---------------------------------------------------------\n  // NOTE - for transaction / direct payment modes, the token amount is set when the user tap continue\n  const prefillBuy = payOptions?.prefillBuy;\n  const activeChain = useActiveWalletChain();\n  const initialTokenAmount = prefillBuy?.amount || \"\";\n  const [tokenAmount, setTokenAmount] = useState(initialTokenAmount);\n  const deferredTokenAmount = useDebouncedValue(tokenAmount, 300);\n  // Destination chain and token selection -----------------------------------\n  const [toChain, setToChain] = useState(\n  // use prefill chain if available\n  prefillBuy?.chain || payOptions.mode === \"transaction\" && payOptions.transaction?.chain || payOptions.mode === \"direct_payment\" && payOptions.paymentInfo?.chain ||\n  // use active chain if its supported as destination\n  supportedDestinations.find(x => x.chain.id === activeChain?.id)?.chain ||\n  // default to the first chain in supportedDestinations, or polygon if nothing is found at all\n  supportedDestinations[0]?.chain || polygon);\n  const [toToken, setToToken] = useState(prefillBuy?.token || payOptions.mode === \"direct_payment\" && payOptions.paymentInfo.token || NATIVE_TOKEN);\n  return {\n    toChain,\n    setToChain,\n    toToken,\n    setToToken,\n    tokenAmount,\n    setTokenAmount,\n    deferredTokenAmount\n  };\n}\nexport function useFromTokenSelectionStates(options) {\n  const {\n    payOptions,\n    supportedSources\n  } = options;\n  // --------------------------------------------------------------------------\n  const firstSupportedSource = supportedSources?.length ? supportedSources[0] : undefined;\n  // Source token and chain selection ---------------------------------------------------\n  const [fromChain_, setFromChain] = useState();\n  // use prefill chain if available\n  const fromChainDevSpecified = payOptions.buyWithCrypto !== false && payOptions.buyWithCrypto?.prefillSource?.chain || payOptions.mode === \"transaction\" && payOptions.transaction?.chain || payOptions.mode === \"direct_payment\" && payOptions.paymentInfo?.chain;\n  const fromChainFromApi = firstSupportedSource?.chain ? firstSupportedSource.chain : undefined;\n  const fromChain = fromChain_ || fromChainDevSpecified || fromChainFromApi || polygon;\n  const [fromToken_, setFromToken] = useState();\n  // use prefill token if available\n  const fromTokenDevSpecified = payOptions.buyWithCrypto !== false && payOptions.buyWithCrypto?.prefillSource?.token || payOptions.mode === \"direct_payment\" && payOptions.paymentInfo.token;\n  // May be updated in the future\n  const fromTokenFromApi = NATIVE_TOKEN;\n  // supported tokens query in here\n  const fromToken = fromToken_ || fromTokenDevSpecified || fromTokenFromApi || NATIVE_TOKEN;\n  return {\n    fromChain,\n    setFromChain,\n    fromToken,\n    setFromToken\n  };\n}\nexport function useFiatCurrencySelectionStates(options) {\n  const {\n    payOptions\n  } = options;\n  // --------------------------------------------------------------------------\n  const devSpecifiedDefaultCurrency = payOptions.buyWithFiat !== false ? payOptions.buyWithFiat?.prefillSource?.currency : undefined;\n  const defaultSelectedCurrencyShorthand = devSpecifiedDefaultCurrency || getDefaultCurrencyBasedOnLocation();\n  const [selectedCurrency, setSelectedCurrency] = useState(currencies.find(x => x.shorthand === defaultSelectedCurrencyShorthand) || usdCurrency);\n  return {\n    selectedCurrency,\n    setSelectedCurrency\n  };\n}\nfunction getDefaultCurrencyBasedOnLocation() {\n  // if Intl is not supported - browser throws\n  try {\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone.toLowerCase();\n    // Europe/London -> GBP\n    if (timeZone.includes(\"london\")) {\n      return \"GBP\";\n    }\n    // Europe/* -> EUR\n    if (timeZone.includes(\"europe\")) {\n      return \"EUR\";\n    }\n    // Japan\n    if (timeZone.includes(\"japan\")) {\n      return \"JPY\";\n    }\n    // canada\n    if (timeZone.includes(\"canada\")) {\n      return \"CAD\";\n    }\n    return \"USD\";\n  } catch {\n    return \"USD\";\n  }\n}\n//# sourceMappingURL=useUISelectionStates.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}