{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext } from \"react\";\nconst ChainProviderContext = /* @__PURE__ */createContext(undefined);\n/**\n * A React context provider component that supplies Chain-related data to its child components.\n *\n * This component serves as a wrapper around the `ChainProviderContext.Provider` and passes\n * the provided chain data down to all of its child components through the context API.\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { ChainProvider, ChainIcon, ChainName } from \"thirdweb/react\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <ChainProvider chain={ethereum}>\n *   <ChainIcon />\n *   <ChainName />\n * </ChainProvider>\n * ```\n *\n * ### Usage with defineChain\n * ```tsx\n * import { defineChain } from \"thirdweb/chains\"l\n * import { ChainProvider, ChainName } from \"thirdweb/react\";\n *\n * const chainId = someNumber;\n *\n * <ChainProvider chain={defineChain(chainId)}>\n *   <ChainName />\n * </ChainProvider>\n * ```\n * @component\n * @chain\n * @beta\n */\nexport function ChainProvider(props) {\n  return _jsx(ChainProviderContext.Provider, {\n    value: props,\n    children: props.children\n  });\n}\n/**\n * @internal\n */\nexport function useChainContext() {\n  const ctx = useContext(ChainProviderContext);\n  if (!ctx) {\n    throw new Error(\"ChainProviderContext not found. Make sure you are using ChainName, ChainIcon, etc. inside a <ChainProvider /> component\");\n  }\n  return ctx;\n}\n//# sourceMappingURL=provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}