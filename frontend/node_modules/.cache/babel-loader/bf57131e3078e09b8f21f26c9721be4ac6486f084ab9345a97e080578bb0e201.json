{"ast":null,"code":"/**\n * Shorten the string for large value\n * Mainly used for\n * Examples:\n * 10_000 -> 10k\n * 1_000_000 -> 1M\n * 1_000_000_000 -> 1B\n * @example\n * ```ts\n * import { shortenLargeNumber } from \"thirdweb/utils\";\n * const numStr = shortenLargeNumber(1_000_000_000, )\n * ```\n * @utils\n */\nexport function shortenLargeNumber(value) {\n  if (value < 1000) {\n    return value.toString();\n  }\n  if (value < 10_000) {\n    return value.toLocaleString(\"en-US\");\n  }\n  if (value < 1_000_000) {\n    return formatLargeNumber(value, 1_000, \"k\");\n  }\n  if (value < 1_000_000_000) {\n    return formatLargeNumber(value, 1_000_000, \"M\");\n  }\n  return formatLargeNumber(value, 1_000_000_000, \"B\");\n}\n/**\n * Shorten the string for large value (over 4 digits)\n * 1000 -> 1000\n * 10_000 -> 10k\n * 1_000_000 -> 1M\n * 1_000_000_000 -> 1B\n */\nfunction formatLargeNumber(value, divisor, suffix) {\n  const quotient = value / divisor;\n  if (Number.isInteger(quotient)) {\n    return Math.floor(quotient) + suffix;\n  }\n  return quotient.toFixed(1).replace(/\\.0$/, \"\") + suffix;\n}\n//# sourceMappingURL=shortenLargeNumber.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}