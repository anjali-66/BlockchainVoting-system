{"ast":null,"code":"import { getClaimParams } from \"../../../../utils/extensions/drops/get-claim-params.js\";\nimport { isGetContractMetadataSupported } from \"../../../common/read/getContractMetadata.js\";\nimport * as GeneratedClaim from \"../../__generated__/IDropERC20/write/claim.js\";\nimport { decimals, isDecimalsSupported } from \"../../read/decimals.js\";\nimport { isGetActiveClaimConditionSupported } from \"../read/getActiveClaimCondition.js\";\n/**\n * Claim ERC20 NFTs to a specified address\n * @param options - The options for the transaction\n * @extension ERC20\n * @example\n *\n * ### Basic usage\n * ```ts\n * import { claimTo } from \"thirdweb/extensions/erc20\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const transaction = claimTo({\n *   contract,\n *   to: \"0x...\",\n *   quantity: 100n,\n * });\n *\n * await sendTransaction({ transaction, account });\n * ```\n *\n * ### For Drops with allowlists\n * You need to specify the claimer address as the `from` param to avoid any issue with the allowlist\n * ```ts\n * const transaction = claimTo({\n *   contract,\n *   to: \"0x...\",\n *   quantity: 100n,\n *   from: \"0x...\", // address of the one claiming\n * });\n * ```\n * @throws If no claim condition is set\n * @returns A promise that resolves with the submitted transaction hash.\n */\nexport function claimTo(options) {\n  return GeneratedClaim.claim({\n    contract: options.contract,\n    asyncParams: async () => {\n      const quantity = await (async () => {\n        if (\"quantityInWei\" in options) {\n          return options.quantityInWei;\n        }\n        const {\n          toUnits\n        } = await import(\"../../../../utils/units.js\");\n        return toUnits(options.quantity, await decimals({\n          contract: options.contract\n        }));\n      })();\n      return getClaimParams({\n        type: \"erc20\",\n        contract: options.contract,\n        to: options.to,\n        quantity,\n        from: options.from,\n        tokenDecimals: await decimals({\n          contract: options.contract\n        }),\n        singlePhaseDrop: options.singlePhaseDrop\n      });\n    }\n  });\n}\n/**\n * Checks if the `claimTo` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `claimTo` method is supported.\n * @extension ERC20\n * @example\n * ```ts\n * import { isClaimToSupported } from \"thirdweb/extensions/erc20\";\n *\n * const supported = isClaimToSupported([\"0x...\"]);\n * ```\n */\nexport function isClaimToSupported(availableSelectors) {\n  return [\n  // has to support the claim method\n  GeneratedClaim.isClaimSupported(availableSelectors),\n  // has to support the getActiveClaimCondition method\n  isGetActiveClaimConditionSupported(availableSelectors),\n  // has to support the decimals method\n  isDecimalsSupported(availableSelectors),\n  // requires contractMetadata for claimer proofs\n  isGetContractMetadataSupported(availableSelectors)].every(Boolean);\n}\n//# sourceMappingURL=claimTo.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}