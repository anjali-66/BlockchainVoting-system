{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { getPostOnRampQuote } from \"../../../../../../../pay/buyWithFiat/getPostOnRampQuote.js\";\nimport { iconSize } from \"../../../../../../core/design-system/index.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Spinner } from \"../../../../components/Spinner.js\";\nimport { Container, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { AccentFailIcon } from \"../../../icons/AccentFailIcon.js\";\nimport { SwapFlow } from \"../swap/SwapFlow.js\";\nexport function PostOnRampSwap(props) {\n  const [lockedOnRampQuote, setLockedOnRampQuote] = useState(undefined);\n  const postOnRampQuoteQuery = useQuery({\n    queryKey: [\"getPostOnRampQuote\", props.buyWithFiatStatus],\n    queryFn: async () => {\n      return await getPostOnRampQuote({\n        client: props.client,\n        buyWithFiatStatus: props.buyWithFiatStatus\n      });\n    },\n    // stop fetching if a quote is already locked\n    enabled: !lockedOnRampQuote,\n    refetchOnWindowFocus: false\n  });\n  useEffect(() => {\n    if (postOnRampQuoteQuery.data && !lockedOnRampQuote && !postOnRampQuoteQuery.isRefetching) {\n      setLockedOnRampQuote(postOnRampQuoteQuery.data);\n    }\n  }, [postOnRampQuoteQuery.data, lockedOnRampQuote, postOnRampQuoteQuery.isRefetching]);\n  if (postOnRampQuoteQuery.isError) {\n    return _jsxs(Container, {\n      fullHeight: true,\n      children: [_jsx(Container, {\n        p: \"lg\",\n        children: _jsx(ModalHeader, {\n          title: props.title,\n          onBack: props.onBack\n        })\n      }), _jsxs(Container, {\n        style: {\n          minHeight: \"300px\"\n        },\n        flex: \"column\",\n        center: \"both\",\n        p: \"lg\",\n        children: [_jsx(AccentFailIcon, {\n          size: iconSize[\"3xl\"]\n        }), _jsx(Spacer, {\n          y: \"xl\"\n        }), _jsx(Text, {\n          color: \"primaryText\",\n          children: \"Failed to get a price quote\"\n        }), _jsx(Spacer, {\n          y: \"lg\"\n        }), _jsx(Button, {\n          fullWidth: true,\n          variant: \"primary\",\n          onClick: () => {\n            postOnRampQuoteQuery.refetch();\n          },\n          children: \"Try Again\"\n        })]\n      }), _jsx(Spacer, {\n        y: \"xxl\"\n      })]\n    });\n  }\n  if (!lockedOnRampQuote) {\n    return _jsxs(Container, {\n      fullHeight: true,\n      children: [_jsx(Container, {\n        p: \"lg\",\n        children: _jsx(ModalHeader, {\n          title: props.title,\n          onBack: props.onBack\n        })\n      }), _jsxs(Container, {\n        style: {\n          minHeight: \"300px\"\n        },\n        flex: \"column\",\n        center: \"both\",\n        children: [_jsx(Spinner, {\n          size: \"xxl\",\n          color: \"accentText\"\n        }), _jsx(Spacer, {\n          y: \"xl\"\n        }), _jsx(Text, {\n          color: \"primaryText\",\n          children: \"Getting price quote\"\n        })]\n      }), _jsx(Spacer, {\n        y: \"xxl\"\n      })]\n    });\n  }\n  return _jsx(SwapFlow, {\n    title: props.title,\n    payer: props.payer,\n    buyWithCryptoQuote: lockedOnRampQuote,\n    client: props.client,\n    onBack: props.onBack,\n    isFiatFlow: true,\n    onDone: props.onDone,\n    onTryAgain: () => {\n      setLockedOnRampQuote(undefined);\n      postOnRampQuoteQuery.refetch();\n    },\n    transactionMode: props.transactionMode,\n    isEmbed: props.isEmbed,\n    onSuccess: props.onSuccess\n  });\n}\n//# sourceMappingURL=PostOnRampSwap.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}