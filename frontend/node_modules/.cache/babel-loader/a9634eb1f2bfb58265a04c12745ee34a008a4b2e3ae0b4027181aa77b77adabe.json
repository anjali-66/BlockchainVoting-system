{"ast":null,"code":"/**\n * Create a readonly store whose value is computed from other stores\n * @param computation - The function to compute the value of the store\n * @param dependencies - The stores it depends on\n * @example\n * ```ts\n * const foo = computed(() => bar.getValue() + baz.getValue(), [bar, baz]);\n * ```\n * @returns A store object\n */\nexport function computedStore(\n// pass the values of the dependencies to the computation function\ncomputation,\n// biome-ignore lint/suspicious/noExplicitAny: library function that accepts any store type\ndependencies) {\n  const listeners = new Set();\n  let value = computation();\n  const notify = () => {\n    for (const listener of listeners) {\n      listener();\n    }\n  };\n  const setValue = newValue => {\n    value = newValue;\n    notify();\n  };\n  // when any of the dependencies change, recompute the value and set it\n  for (const store of dependencies) {\n    store.subscribe(() => {\n      setValue(computation());\n    });\n  }\n  return {\n    getValue() {\n      return value;\n    },\n    subscribe(listener) {\n      listeners.add(listener);\n      return () => {\n        listeners.delete(listener);\n      };\n    }\n  };\n}\n//# sourceMappingURL=computedStore.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}