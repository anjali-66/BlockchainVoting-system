{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { createSigner, fetchSignerType, loadSignerType, storeSignerType } from './sign/util.js';\nimport { Communicator } from './core/communicator/Communicator.js';\nimport { standardErrorCodes } from './core/error/constants.js';\nimport { standardErrors } from './core/error/errors.js';\nimport { serializeError } from './core/error/serialize.js';\nimport { ProviderEventEmitter } from './core/provider/interface.js';\nimport { ScopedLocalStorage } from './core/storage/ScopedLocalStorage.js';\nimport { hexStringFromNumber } from './core/type/util.js';\nimport { checkErrorForInvalidRequestArgs } from './util/provider.js';\nexport class CoinbaseWalletProvider extends ProviderEventEmitter {\n  constructor(_a) {\n    var {\n        metadata\n      } = _a,\n      _b = _a.preference,\n      {\n        keysUrl\n      } = _b,\n      preference = __rest(_b, [\"keysUrl\"]);\n    super();\n    this.signer = null;\n    this.isCoinbaseWallet = true;\n    this.metadata = metadata;\n    this.preference = preference;\n    this.communicator = new Communicator({\n      url: keysUrl,\n      metadata,\n      preference\n    });\n    const signerType = loadSignerType();\n    if (signerType) {\n      this.signer = this.initSigner(signerType);\n    }\n  }\n  async request(args) {\n    try {\n      checkErrorForInvalidRequestArgs(args);\n      if (!this.signer) {\n        switch (args.method) {\n          case 'eth_requestAccounts':\n            {\n              const signerType = await this.requestSignerSelection(args);\n              const signer = this.initSigner(signerType);\n              await signer.handshake(args);\n              this.signer = signer;\n              storeSignerType(signerType);\n              break;\n            }\n          case 'net_version':\n            return 1;\n          // default value\n          case 'eth_chainId':\n            return hexStringFromNumber(1);\n          // default value\n          default:\n            {\n              throw standardErrors.provider.unauthorized(\"Must call 'eth_requestAccounts' before other methods\");\n            }\n        }\n      }\n      return this.signer.request(args);\n    } catch (error) {\n      const {\n        code\n      } = error;\n      if (code === standardErrorCodes.provider.unauthorized) this.disconnect();\n      return Promise.reject(serializeError(error));\n    }\n  }\n  /** @deprecated Use `.request({ method: 'eth_requestAccounts' })` instead. */\n  async enable() {\n    console.warn(`.enable() has been deprecated. Please use .request({ method: \"eth_requestAccounts\" }) instead.`);\n    return await this.request({\n      method: 'eth_requestAccounts'\n    });\n  }\n  async disconnect() {\n    var _a;\n    await ((_a = this.signer) === null || _a === void 0 ? void 0 : _a.cleanup());\n    this.signer = null;\n    ScopedLocalStorage.clearAll();\n    this.emit('disconnect', standardErrors.provider.disconnected('User initiated disconnection'));\n  }\n  requestSignerSelection(handshakeRequest) {\n    return fetchSignerType({\n      communicator: this.communicator,\n      preference: this.preference,\n      metadata: this.metadata,\n      handshakeRequest,\n      callback: this.emit.bind(this)\n    });\n  }\n  initSigner(signerType) {\n    return createSigner({\n      signerType,\n      metadata: this.metadata,\n      communicator: this.communicator,\n      callback: this.emit.bind(this)\n    });\n  }\n}\n//# sourceMappingURL=CoinbaseWalletProvider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}