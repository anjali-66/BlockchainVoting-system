{"ast":null,"code":"import { addTransactionToStore } from \"../../transaction-store.js\";\nexport async function sendGaslessTransaction({\n  account,\n  transaction,\n  serializableTransaction,\n  gasless\n}) {\n  // TODO: handle special case for mutlicall transactions!\n  // Steps:\n  // 1. check if the method is `multicall` by comparing the 4bytes data with the `multicall` selector\n  // 2. split the rest of the data into its \"parts\"\n  // 3. solidityPack the parts with the part data + the `account.address`\n  // see v4: `core/classes/transactions.ts>Transaction>prepareGasless:L551`\n  if (serializableTransaction.value && serializableTransaction.value > 0n) {\n    throw new Error(\"Gasless transactions cannot have a value\");\n  }\n  // TODO: multiply gas by 2 for some reason(?) - we do in v4, *should* we?\n  let result;\n  // biconomy\n  if (gasless.provider === \"biconomy\") {\n    const {\n      relayBiconomyTransaction\n    } = await import(\"./providers/biconomy.js\");\n    result = await relayBiconomyTransaction({\n      account,\n      transaction,\n      serializableTransaction,\n      gasless\n    });\n  }\n  // openzeppelin\n  if (gasless.provider === \"openzeppelin\") {\n    const {\n      relayOpenZeppelinTransaction\n    } = await import(\"./providers/openzeppelin.js\");\n    result = await relayOpenZeppelinTransaction({\n      account,\n      transaction,\n      serializableTransaction,\n      gasless\n    });\n  }\n  if (gasless.provider === \"engine\") {\n    const {\n      relayEngineTransaction\n    } = await import(\"./providers/engine.js\");\n    result = await relayEngineTransaction({\n      account,\n      transaction,\n      serializableTransaction,\n      gasless\n    });\n  }\n  if (!result) {\n    throw new Error(\"Unsupported gasless provider\");\n  }\n  addTransactionToStore({\n    address: account.address,\n    transactionHash: result.transactionHash,\n    chainId: transaction.chain.id\n  });\n  return result;\n}\n//# sourceMappingURL=send-gasless-transaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}