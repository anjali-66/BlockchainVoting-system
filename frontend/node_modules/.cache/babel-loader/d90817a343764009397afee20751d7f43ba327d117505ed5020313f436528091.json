{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { wait } from \"../../../../core/utils/wait.js\";\nimport { ConnectingScreen } from \"../../../wallets/shared/ConnectingScreen.js\";\n/**\n * @internal\n */\nexport const InjectedConnectUI = props => {\n  const {\n    wallet,\n    done\n  } = props;\n  const [errorConnecting, setErrorConnecting] = useState(false);\n  const locale = props.locale;\n  const connectToExtension = useCallback(async () => {\n    try {\n      connectPrompted.current = true;\n      setErrorConnecting(false);\n      await wait(1000);\n      await wallet.connect({\n        client: props.client,\n        chain: props.chain\n      });\n      done();\n    } catch (e) {\n      setErrorConnecting(true);\n      console.error(e);\n    }\n  }, [props.client, props.chain, done, wallet]);\n  const connectPrompted = useRef(false);\n  useEffect(() => {\n    if (connectPrompted.current) {\n      return;\n    }\n    connectToExtension();\n  }, [connectToExtension]);\n  return _jsx(ConnectingScreen, {\n    locale: {\n      getStartedLink: locale.getStartedLink,\n      instruction: locale.connectionScreen.instruction,\n      tryAgain: locale.connectionScreen.retry,\n      inProgress: locale.connectionScreen.inProgress,\n      failed: locale.connectionScreen.failed\n    },\n    onBack: props.onBack,\n    walletName: props.walletName,\n    onGetStarted: props.onGetStarted,\n    walletId: props.wallet.id,\n    onRetry: () => {\n      connectToExtension();\n    },\n    errorConnecting: errorConnecting,\n    client: props.client,\n    size: props.size\n  });\n};\n//# sourceMappingURL=InjectedConnectUI.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}