{"ast":null,"code":"import { hexToNumber, numberToHex } from \"../../utils/encoding/hex.js\";\n/**\n * Retrieves the transaction count (nonce) for a given Ethereum address.\n * @param request - The EIP1193 request function.\n * @param params - The parameters for retrieving the transaction count.\n * @returns A promise that resolves to the transaction count as a number.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_getTransactionCount } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const transactionCount = await eth_getTransactionCount(rpcRequest, {\n *  address: \"0x...\",\n * });\n * ```\n */\nexport async function eth_getTransactionCount(request, params) {\n  const count = await request({\n    method: \"eth_getTransactionCount\",\n    params: [params.address,\n    // makes sense to default to `pending` here, since we're asking for a transaction count (nonce)\n    params.blockNumber ? numberToHex(params.blockNumber) : params.blockTag || \"pending\"]\n  });\n  return hexToNumber(count);\n}\n//# sourceMappingURL=eth_getTransactionCount.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}