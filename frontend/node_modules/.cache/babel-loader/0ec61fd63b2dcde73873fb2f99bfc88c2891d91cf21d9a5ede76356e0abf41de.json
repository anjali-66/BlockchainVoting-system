{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useActiveAccount } from \"../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useIsWalletModalOpen, useSetIsWalletModalOpen, useSetSelectionData } from \"../../../providers/wallet-ui-states-provider.js\";\nimport { Modal } from \"../../components/Modal.js\";\nimport { onModalUnmount, reservedScreens } from \"../constants.js\";\nimport { ConnectModalContent } from \"./ConnectModalContent.js\";\nimport { useSetupScreen } from \"./screen.js\";\n/**\n * @internal\n */\nconst ConnectModal = props => {\n  const screenSetup = useSetupScreen({\n    size: props.size,\n    welcomeScreen: props.welcomeScreen,\n    wallets: props.wallets\n  });\n  const setSelectionData = useSetSelectionData();\n  const {\n    screen,\n    setScreen,\n    initialScreen\n  } = screenSetup;\n  const isWalletModalOpen = useIsWalletModalOpen();\n  const setIsWalletModalOpen = useSetIsWalletModalOpen();\n  const [hideModal, setHideModal] = useState(false);\n  const closeModal = useCallback(() => {\n    props.onClose?.();\n    setIsWalletModalOpen(false);\n    onModalUnmount(() => {\n      setScreen(initialScreen);\n      setSelectionData({});\n    });\n  }, [initialScreen, setIsWalletModalOpen, setScreen, setSelectionData, props.onClose]);\n  const activeAccount = useActiveAccount();\n  useEffect(() => {\n    if (!isWalletModalOpen) {\n      onModalUnmount(() => {\n        setHideModal(false);\n      });\n    }\n  }, [isWalletModalOpen]);\n  const setModalVisibility = useCallback(value => setHideModal(!value), []);\n  // if wallet is suddenly disconnected when showing the sign in screen, close the modal and reset the screen\n  useEffect(() => {\n    if (isWalletModalOpen && screen === reservedScreens.signIn && !activeAccount) {\n      setScreen(initialScreen);\n      setIsWalletModalOpen(false);\n    }\n  }, [initialScreen, isWalletModalOpen, screen, setIsWalletModalOpen, setScreen, activeAccount]);\n  return _jsx(Modal, {\n    hide: hideModal,\n    size: props.size,\n    open: isWalletModalOpen,\n    setOpen: value => {\n      if (hideModal) {\n        return;\n      }\n      if (!value) {\n        closeModal();\n      }\n    },\n    children: _jsx(ConnectModalContent, {\n      shouldSetActive: props.shouldSetActive,\n      screenSetup: screenSetup,\n      setModalVisibility: setModalVisibility,\n      isOpen: isWalletModalOpen,\n      onClose: closeModal,\n      accountAbstraction: props.accountAbstraction,\n      auth: props.auth,\n      client: props.client,\n      connectLocale: props.connectLocale,\n      size: props.size,\n      welcomeScreen: props.welcomeScreen,\n      meta: props.meta,\n      hideHeader: false,\n      onConnect: props.onConnect,\n      recommendedWallets: props.recommendedWallets,\n      wallets: props.wallets,\n      chain: props.chain,\n      showAllWallets: props.showAllWallets,\n      chains: props.chains,\n      walletConnect: props.walletConnect,\n      modalHeader: undefined,\n      walletIdsToHide: undefined\n    })\n  });\n};\nexport default ConnectModal;\n//# sourceMappingURL=ConnectModal.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}