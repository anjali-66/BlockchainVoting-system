{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MockEIP1193Provider = void 0;\nconst eventemitter3_1 = require(\"eventemitter3\");\nclass MockEIP1193Provider extends eventemitter3_1.EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.eth_chainId = jest.fn(chainId => chainId);\n    this.eth_accounts = jest.fn(accounts => accounts);\n    this.eth_requestAccounts = jest.fn(accounts => accounts);\n  }\n  request(x) {\n    // make sure to throw if we're \"not connected\"\n    if (!this.chainId) return Promise.reject(new Error());\n    switch (x.method) {\n      case 'eth_chainId':\n        return Promise.resolve(this.eth_chainId(this.chainId));\n      case 'eth_accounts':\n        return Promise.resolve(this.eth_accounts(this.accounts));\n      case 'eth_requestAccounts':\n        return Promise.resolve(this.eth_requestAccounts(this.accounts));\n      default:\n        throw new Error(`Method not supported on mock: ${JSON.stringify(x)}`);\n    }\n  }\n  emitConnect(chainId) {\n    this.emit('connect', {\n      chainId\n    });\n  }\n  emitDisconnect(error) {\n    this.emit('disconnect', error);\n  }\n  emitChainChanged(chainId) {\n    this.emit('chainChanged', chainId);\n  }\n  emitAccountsChanged(accounts) {\n    this.emit('accountsChanged', accounts);\n  }\n}\nexports.MockEIP1193Provider = MockEIP1193Provider;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}