{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { webLocalStorage } from \"../../../../utils/storage/webStorage.js\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { linkProfile } from \"../../../../wallets/in-app/web/lib/auth/index.js\";\nimport { hasStoredPasskey } from \"../../../../wallets/in-app/web/lib/auth/passkeys.js\";\nimport { iconSize } from \"../../../core/design-system/index.js\";\nimport { setLastAuthProvider } from \"../../../core/utils/storage.js\";\nimport { FingerPrintIcon } from \"../../ui/ConnectWallet/icons/FingerPrintIcon.js\";\nimport { Spacer } from \"../../ui/components/Spacer.js\";\nimport { Container, ModalHeader } from \"../../ui/components/basic.js\";\nimport { Button } from \"../../ui/components/buttons.js\";\nimport { ErrorState } from \"./ErrorState.js\";\nimport { LoadingScreen } from \"./LoadingScreen.js\";\nimport { LoadingState } from \"./LoadingState.js\";\n// is passkey stored?\n// - login\n// else\n// - show login or signup options\nexport function PassKeyLogin(props) {\n  const {\n    wallet,\n    done,\n    client,\n    chain,\n    size,\n    locale\n  } = props;\n  const [screen, setScreen] = useState(\"loading\");\n  const triggered = useRef(false);\n  useEffect(() => {\n    if (triggered.current) {\n      return;\n    }\n    triggered.current = true;\n    hasStoredPasskey(client, isEcosystemWallet(wallet.id) ? wallet.id : undefined).then(isStored => {\n      if (isStored) {\n        setScreen(\"login\");\n      } else {\n        setScreen(\"select\");\n      }\n    }).catch(() => {\n      setScreen(\"select\");\n    });\n  }, [client, wallet.id]);\n  return _jsxs(Container, {\n    animate: \"fadein\",\n    fullHeight: true,\n    flex: \"column\",\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: _jsx(ModalHeader, {\n        title: props.isLinking ? locale.passkeys.linkPasskey : locale.passkeys.title,\n        onBack: props.onBack\n      })\n    }), _jsx(Container, {\n      px: size === \"wide\" ? \"xxl\" : \"lg\",\n      expand: true,\n      flex: \"column\",\n      center: \"y\",\n      children: _jsxs(\"div\", {\n        children: [screen === \"loading\" && _jsxs(_Fragment, {\n          children: [_jsx(LoadingScreen, {}), _jsx(Spacer, {\n            y: \"xxl\"\n          })]\n        }), screen === \"select\" && _jsx(SelectLoginMethod, {\n          onSignin: () => {\n            setScreen(\"login\");\n          },\n          onSignup: () => {\n            setScreen(\"signup\");\n          }\n        }), screen === \"login\" && _jsx(LoginScreen, {\n          wallet: wallet,\n          client: client,\n          done: done,\n          onCreate: () => {\n            setScreen(\"signup\");\n          },\n          chain: chain,\n          isLinking: props.isLinking\n        }), screen === \"signup\" && _jsx(SignupScreen, {\n          wallet: wallet,\n          client: client,\n          done: done,\n          chain: chain,\n          isLinking: props.isLinking\n        })]\n      })\n    })]\n  });\n}\nfunction LoginScreen(props) {\n  const {\n    wallet,\n    done,\n    client,\n    chain\n  } = props;\n  const [status, setStatus] = useState(\"loading\");\n  const [error, setError] = useState();\n  async function login() {\n    setStatus(\"loading\");\n    try {\n      if (props.isLinking) {\n        await linkProfile({\n          client,\n          strategy: \"passkey\",\n          type: \"sign-in\"\n        }).catch(e => {\n          setError(e.message);\n          throw e;\n        });\n      } else {\n        await wallet.connect({\n          client: client,\n          strategy: \"passkey\",\n          type: \"sign-in\",\n          chain\n        });\n        await setLastAuthProvider(\"passkey\", webLocalStorage);\n      }\n      done();\n    } catch (e) {\n      console.error(\"Failed to login with passkey\", e);\n      setStatus(\"error\");\n    }\n  }\n  const triggered = useRef(false);\n  useEffect(() => {\n    if (triggered.current) {\n      return;\n    }\n    triggered.current = true;\n    login();\n  });\n  if (status === \"loading\") {\n    return _jsx(LoadingState, {\n      title: \"Requesting Passkey\",\n      subtitle: \"A pop-up prompt will appear to sign-in and verify your passkey\",\n      icon: _jsx(FingerPrintIcon, {\n        size: iconSize.xxl\n      })\n    });\n  }\n  if (status === \"error\") {\n    return _jsxs(_Fragment, {\n      children: [_jsx(ErrorState, {\n        onTryAgain: login,\n        title: error || \"Failed to Login\"\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      }), _jsx(Button, {\n        variant: \"outline\",\n        fullWidth: true,\n        onClick: props.onCreate,\n        children: \"Create a new Passkey\"\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      })]\n    });\n  }\n  return null;\n}\nfunction SignupScreen(props) {\n  const {\n    wallet,\n    done,\n    client,\n    chain\n  } = props;\n  const [error, setError] = useState();\n  const [status, setStatus] = useState(\"loading\");\n  const ecosystem = isEcosystemWallet(wallet) ? {\n    id: wallet.id,\n    partnerId: wallet.getConfig()?.partnerId\n  } : undefined;\n  async function signup() {\n    setStatus(\"loading\");\n    try {\n      if (props.isLinking) {\n        await linkProfile({\n          client,\n          strategy: \"passkey\",\n          type: \"sign-up\",\n          ecosystem\n        });\n      } else {\n        await wallet.connect({\n          client: client,\n          strategy: \"passkey\",\n          type: \"sign-up\",\n          chain\n        });\n        await setLastAuthProvider(\"passkey\", webLocalStorage);\n      }\n      done();\n    } catch (e) {\n      console.error(e);\n      if (e instanceof Error) {\n        setError(`Error creating passkey: ${e.message}`);\n      }\n      setStatus(\"error\");\n    }\n  }\n  const triggered = useRef(false);\n  useEffect(() => {\n    if (triggered.current) {\n      return;\n    }\n    triggered.current = true;\n    signup();\n  });\n  if (status === \"loading\") {\n    return _jsx(LoadingState, {\n      title: \"Creating Passkey\",\n      subtitle: \"A pop-up prompt will appear to sign-in and verify your passkey\",\n      icon: _jsx(FingerPrintIcon, {\n        size: iconSize.xxl\n      })\n    });\n  }\n  if (status === \"error\") {\n    return _jsxs(_Fragment, {\n      children: [_jsx(ErrorState, {\n        onTryAgain: signup,\n        title: error || \"Failed to create passkey\"\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      })]\n    });\n  }\n  return null;\n}\nfunction SelectLoginMethod(props) {\n  return _jsxs(Container, {\n    children: [_jsx(Spacer, {\n      y: \"xxl\"\n    }), _jsx(Container, {\n      flex: \"row\",\n      center: \"x\",\n      color: \"accentText\",\n      children: _jsx(FingerPrintIcon, {\n        size: iconSize[\"4xl\"]\n      })\n    }), _jsx(Spacer, {\n      y: \"xl\"\n    }), _jsx(Spacer, {\n      y: \"xxl\"\n    }), _jsx(Button, {\n      variant: \"accent\",\n      onClick: props.onSignup,\n      fullWidth: true,\n      children: \"Create a Passkey\"\n    }), _jsx(Spacer, {\n      y: \"sm\"\n    }), _jsx(Button, {\n      variant: \"outline\",\n      onClick: props.onSignin,\n      fullWidth: true,\n      children: \"I have a Passkey\"\n    }), _jsx(Spacer, {\n      y: \"lg\"\n    })]\n  });\n}\n//# sourceMappingURL=PassKeyLogin.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}