{"ast":null,"code":"import { stringify } from \"../../../utils/json.js\";\nimport { ClientScopedStorage } from \"../../in-app/core/authentication/client-scoped-storage.js\";\n/**\n * @internal\n */\nexport let walletConnectSessions;\n/**\n * @internal\n */\nexport async function getSessions() {\n  if (!walletConnectSessions) {\n    return [];\n  }\n  const stringifiedSessions = await walletConnectSessions.getWalletConnectSessions();\n  return JSON.parse(stringifiedSessions ?? \"[]\");\n}\n/**\n * @internal\n */\nexport function initializeSessionStore(options) {\n  if (!walletConnectSessions) {\n    walletConnectSessions = new ClientScopedStorage({\n      storage: null,\n      // TODO: inject storage\n      clientId: options.clientId\n    });\n  }\n}\n/**\n * @internal\n */\nexport async function saveSession(session) {\n  if (!walletConnectSessions) {\n    return;\n  }\n  const stringifiedSessions = await walletConnectSessions.getWalletConnectSessions();\n  const sessions = JSON.parse(stringifiedSessions ?? \"[]\");\n  sessions.push(session);\n  await walletConnectSessions.saveWalletConnectSessions(stringify(sessions));\n}\n/**\n * @internal\n */\nexport async function removeSession(session) {\n  if (!walletConnectSessions) {\n    return;\n  }\n  const stringifiedSessions = await walletConnectSessions.getWalletConnectSessions();\n  const sessions = JSON.parse(stringifiedSessions ?? \"[]\");\n  const newSessions = sessions.filter(s => s.topic !== session.topic);\n  await walletConnectSessions.saveWalletConnectSessions(stringify(newSessions));\n}\n/**\n * @internal FOR TESTING ONLY\n */\nexport function setWalletConnectSessions(storage) {\n  walletConnectSessions = storage;\n}\n//# sourceMappingURL=session-store.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}