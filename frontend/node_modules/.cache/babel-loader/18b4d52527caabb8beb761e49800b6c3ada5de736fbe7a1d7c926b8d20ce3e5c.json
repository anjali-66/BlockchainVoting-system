{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { fontSize } from \"../../../../core/design-system/index.js\";\nimport { useWalletBalance } from \"../../../../core/hooks/others/useWalletBalance.js\";\nimport { useActiveAccount } from \"../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWalletChain } from \"../../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport { defaultTokens } from \"../../../../core/utils/defaultTokens.js\";\nimport { Skeleton } from \"../../components/Skeleton.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { TokenIcon } from \"../../components/TokenIcon.js\";\nimport { Container, Line, ModalHeader } from \"../../components/basic.js\";\nimport { Text } from \"../../components/text.js\";\nimport { formatTokenBalance } from \"./formatTokenBalance.js\";\nimport { NATIVE_TOKEN, isNativeToken } from \"./nativeToken.js\";\n/**\n * @internal\n */\nexport function ViewTokens(props) {\n  return _jsxs(Container, {\n    style: {\n      minHeight: \"300px\"\n    },\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: _jsx(ModalHeader, {\n        title: props.connectLocale.viewFunds.title,\n        onBack: props.onBack\n      })\n    }), _jsx(Line, {}), _jsxs(Container, {\n      px: \"sm\",\n      scrollY: true,\n      style: {\n        maxHeight: \"500px\"\n      },\n      children: [_jsx(Spacer, {\n        y: \"md\"\n      }), _jsx(ViewTokensContent, {\n        ...props\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      })]\n    })]\n  });\n}\nexport function ViewTokensContent(props) {\n  const activeChain = useActiveWalletChain();\n  if (!activeChain) {\n    return null;\n  }\n  const supportedTokens = props.supportedTokens || defaultTokens;\n  const tokenList = (activeChain?.id ? supportedTokens[activeChain.id] : undefined) || [];\n  return _jsxs(_Fragment, {\n    children: [_jsx(TokenInfo, {\n      token: NATIVE_TOKEN,\n      chain: activeChain,\n      client: props.client\n    }), tokenList.map(token => {\n      return _jsx(TokenInfo, {\n        token: token,\n        chain: activeChain,\n        client: props.client\n      }, token.address);\n    })]\n  });\n}\nfunction TokenInfo(props) {\n  const account = useActiveAccount();\n  const tokenBalanceQuery = useWalletBalance({\n    address: account?.address,\n    chain: props.chain,\n    tokenAddress: isNativeToken(props.token) ? undefined : props.token.address,\n    client: props.client\n  });\n  const tokenName = isNativeToken(props.token) ? tokenBalanceQuery.data?.name : props.token.name;\n  return _jsxs(Container, {\n    flex: \"row\",\n    gap: \"sm\",\n    p: \"sm\",\n    children: [_jsx(TokenIcon, {\n      token: props.token,\n      chain: props.chain,\n      size: \"lg\",\n      client: props.client\n    }), _jsxs(Container, {\n      flex: \"column\",\n      gap: \"xxs\",\n      children: [tokenName ? _jsx(Text, {\n        size: \"sm\",\n        color: \"primaryText\",\n        children: tokenName\n      }) : _jsx(Skeleton, {\n        height: fontSize.md,\n        width: \"150px\"\n      }), tokenBalanceQuery.data ? _jsxs(Text, {\n        size: \"xs\",\n        children: [\" \", formatTokenBalance(tokenBalanceQuery.data)]\n      }) : _jsx(Skeleton, {\n        height: fontSize.xs,\n        width: \"100px\"\n      })]\n    })]\n  });\n}\n//# sourceMappingURL=ViewTokens.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}