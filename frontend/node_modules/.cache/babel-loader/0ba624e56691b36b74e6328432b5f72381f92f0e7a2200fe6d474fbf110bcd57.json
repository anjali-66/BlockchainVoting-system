{"ast":null,"code":"import { fetchTokenMetadata } from \"../../../utils/nft/fetchTokenMetadata.js\";\nimport { parseNFT } from \"../../../utils/nft/parseNft.js\";\nimport { totalSupply } from \"../__generated__/IERC1155/read/totalSupply.js\";\nimport { uri } from \"../__generated__/IERC1155/read/uri.js\";\nexport { isUriSupported as isGetNFTSupported } from \"../__generated__/IERC1155/read/uri.js\";\n/**\n * Retrieves information about a specific ERC1155 non-fungible token (NFT).\n * @param options - The options for retrieving the NFT.\n * @returns A promise that resolves to the NFT object.\n * @extension ERC1155\n * @example\n * ```ts\n * import { getNFT } from \"thirdweb/extensions/erc1155\";\n * const nft = await getNFT({\n *  contract,\n *  tokenId: 1n,\n * });\n * ```\n */\nexport async function getNFT(options) {\n  const [tokenUri, supply] = await Promise.all([uri({\n    contract: options.contract,\n    tokenId: options.tokenId\n  }), totalSupply({\n    contract: options.contract,\n    id: options.tokenId\n    // in cases where the supply is not available -> fall back to 0\n  }).catch(() => 0n)]);\n  return parseNFT(await fetchTokenMetadata({\n    client: options.contract.client,\n    tokenId: options.tokenId,\n    tokenUri\n  }).catch(() => ({\n    id: options.tokenId,\n    type: \"ERC1155\",\n    uri: tokenUri\n  })), {\n    tokenId: options.tokenId,\n    tokenUri,\n    type: \"ERC1155\",\n    owner: null,\n    supply\n  });\n}\n//# sourceMappingURL=getNFT.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}