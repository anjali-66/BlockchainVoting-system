{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\n// Copyright (c) 2018-2023 Coinbase, Inc. <https://www.coinbase.com/>\nimport { standardErrors } from '../error/errors.js';\nimport { AddressString, BigIntString, HexString, IntNumber, RegExpString } from './index.js';\nconst INT_STRING_REGEX = /^[0-9]*$/;\nconst HEXADECIMAL_STRING_REGEX = /^[a-f0-9]*$/;\n/**\n * @param length number of bytes\n */\nexport function randomBytesHex(length) {\n  return uint8ArrayToHex(crypto.getRandomValues(new Uint8Array(length)));\n}\nexport function uint8ArrayToHex(value) {\n  return [...value].map(b => b.toString(16).padStart(2, '0')).join('');\n}\nexport function hexStringToUint8Array(hexString) {\n  return new Uint8Array(hexString.match(/.{1,2}/g).map(byte => Number.parseInt(byte, 16)));\n}\nexport function hexStringFromBuffer(buf, includePrefix = false) {\n  const hex = buf.toString('hex');\n  return HexString(includePrefix ? `0x${hex}` : hex);\n}\nexport function encodeToHexString(str) {\n  return hexStringFromBuffer(ensureBuffer(str), true);\n}\nexport function bigIntStringFromBigInt(bi) {\n  return BigIntString(bi.toString(10));\n}\nexport function intNumberFromHexString(hex) {\n  return IntNumber(Number(BigInt(ensureEvenLengthHexString(hex, true))));\n}\nexport function hexStringFromNumber(num) {\n  return HexString(`0x${BigInt(num).toString(16)}`);\n}\nexport function has0xPrefix(str) {\n  return str.startsWith('0x') || str.startsWith('0X');\n}\nexport function strip0x(hex) {\n  if (has0xPrefix(hex)) {\n    return hex.slice(2);\n  }\n  return hex;\n}\nexport function prepend0x(hex) {\n  if (has0xPrefix(hex)) {\n    return `0x${hex.slice(2)}`;\n  }\n  return `0x${hex}`;\n}\nexport function isHexString(hex) {\n  if (typeof hex !== 'string') {\n    return false;\n  }\n  const s = strip0x(hex).toLowerCase();\n  return HEXADECIMAL_STRING_REGEX.test(s);\n}\nexport function ensureHexString(hex, includePrefix = false) {\n  if (typeof hex === 'string') {\n    const s = strip0x(hex).toLowerCase();\n    if (HEXADECIMAL_STRING_REGEX.test(s)) {\n      return HexString(includePrefix ? `0x${s}` : s);\n    }\n  }\n  throw standardErrors.rpc.invalidParams(`\"${String(hex)}\" is not a hexadecimal string`);\n}\nexport function ensureEvenLengthHexString(hex, includePrefix = false) {\n  let h = ensureHexString(hex, false);\n  if (h.length % 2 === 1) {\n    h = HexString(`0${h}`);\n  }\n  return includePrefix ? HexString(`0x${h}`) : h;\n}\nexport function ensureAddressString(str) {\n  if (typeof str === 'string') {\n    const s = strip0x(str).toLowerCase();\n    if (isHexString(s) && s.length === 40) {\n      return AddressString(prepend0x(s));\n    }\n  }\n  throw standardErrors.rpc.invalidParams(`Invalid Ethereum address: ${String(str)}`);\n}\nexport function ensureBuffer(str) {\n  if (Buffer.isBuffer(str)) {\n    return str;\n  }\n  if (typeof str === 'string') {\n    if (isHexString(str)) {\n      const s = ensureEvenLengthHexString(str, false);\n      return Buffer.from(s, 'hex');\n    }\n    return Buffer.from(str, 'utf8');\n  }\n  throw standardErrors.rpc.invalidParams(`Not binary data: ${String(str)}`);\n}\nexport function ensureIntNumber(num) {\n  if (typeof num === 'number' && Number.isInteger(num)) {\n    return IntNumber(num);\n  }\n  if (typeof num === 'string') {\n    if (INT_STRING_REGEX.test(num)) {\n      return IntNumber(Number(num));\n    }\n    if (isHexString(num)) {\n      return IntNumber(Number(BigInt(ensureEvenLengthHexString(num, true))));\n    }\n  }\n  throw standardErrors.rpc.invalidParams(`Not an integer: ${String(num)}`);\n}\nexport function ensureRegExpString(regExp) {\n  if (regExp instanceof RegExp) {\n    return RegExpString(regExp.toString());\n  }\n  throw standardErrors.rpc.invalidParams(`Not a RegExp: ${String(regExp)}`);\n}\nexport function ensureBigInt(val) {\n  if (val !== null && (typeof val === 'bigint' || isBigNumber(val))) {\n    return BigInt(val.toString(10));\n  }\n  if (typeof val === 'number') {\n    return BigInt(ensureIntNumber(val));\n  }\n  if (typeof val === 'string') {\n    if (INT_STRING_REGEX.test(val)) {\n      return BigInt(val);\n    }\n    if (isHexString(val)) {\n      return BigInt(ensureEvenLengthHexString(val, true));\n    }\n  }\n  throw standardErrors.rpc.invalidParams(`Not an integer: ${String(val)}`);\n}\nexport function ensureParsedJSONObject(val) {\n  if (typeof val === 'string') {\n    return JSON.parse(val);\n  }\n  if (typeof val === 'object') {\n    return val;\n  }\n  throw standardErrors.rpc.invalidParams(`Not a JSON string or an object: ${String(val)}`);\n}\nexport function isBigNumber(val) {\n  if (val == null || typeof val.constructor !== 'function') {\n    return false;\n  }\n  const {\n    constructor\n  } = val;\n  return typeof constructor.config === 'function' && typeof constructor.EUCLID === 'number';\n}\nexport function range(start, stop) {\n  return Array.from({\n    length: stop - start\n  }, (_, i) => start + i);\n}\nexport function getFavicon() {\n  const el = document.querySelector('link[sizes=\"192x192\"]') || document.querySelector('link[sizes=\"180x180\"]') || document.querySelector('link[rel=\"icon\"]') || document.querySelector('link[rel=\"shortcut icon\"]');\n  const {\n    protocol,\n    host\n  } = document.location;\n  const href = el ? el.getAttribute('href') : null;\n  if (!href || href.startsWith('javascript:') || href.startsWith('vbscript:')) {\n    return `${protocol}//${host}/favicon.ico`; // fallback\n  }\n  if (href.startsWith('http://') || href.startsWith('https://') || href.startsWith('data:')) {\n    return href;\n  }\n  if (href.startsWith('//')) {\n    return protocol + href;\n  }\n  return `${protocol}//${host}${href}`;\n}\nexport function areAddressArraysEqual(arr1, arr2) {\n  return arr1.length === arr2.length && arr1.every((value, index) => value === arr2[index]);\n}\n//# sourceMappingURL=util.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}