{"ast":null,"code":"import { getCachedChain } from \"../../chains/utils.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { approve } from \"../../extensions/erc20/write/approve.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { stringify } from \"../../utils/json.js\";\nimport { getPayBuyWithCryptoTransferEndpoint } from \"../utils/definitions.js\";\n/**\n * Get a quote of type [`BuyWithCryptoTransfer`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransfer) to facilitate a token transfer transaction.\n * Using this instead of a native transfer allows you to receive status and webhooks about successful or failed payments.\n *\n * Once you have the quote, you can use `prepareTransaction` and prepare the transaction for submission.\n * @param params - object of type [`GetBuyWithCryptoTransferParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithCryptoTransferParams)\n * @returns Object of type [`BuyWithCryptoTransfer`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransfer) which contains the information about the transfer\n * @example\n *\n * ```ts\n * import { getBuyWithCryptoTransfer } from \"thirdweb/pay\";\n *\n * const transfer = await getBuyWithCryptoTransfer({\n *  client,\n *  fromAddress: \"0x...\", // wallet address\n *  toAddress: \"0x...\", // recipient address - likely to be your wallet\n *  chainId: 10, // chain id of the token\n *  tokenAddress: \"0x...\", // address of the token\n *  amount: \"10\", // amount of token to transfer\n *  purchaseData: {  // any metadata for you to attribute this purchase\n *    \"customerId\": \"yourId\"\n *  }\n * });\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithCryptoTransfer(params) {\n  try {\n    const clientFetch = getClientFetch(params.client);\n    const response = await clientFetch(getPayBuyWithCryptoTransferEndpoint(), {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: stringify({\n        fromAddress: params.fromAddress,\n        toAddress: params.toAddress,\n        chainId: params.chainId,\n        tokenAddress: params.tokenAddress,\n        amount: params.amount,\n        purchaseData: params.purchaseData\n      })\n    });\n    if (!response.ok) {\n      const errorObj = await response.json();\n      if (errorObj && \"error\" in errorObj) {\n        throw errorObj;\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = (await response.json()).result;\n    const transfer = {\n      transactionRequest: {\n        chain: getCachedChain(data.transactionRequest.chainId),\n        client: params.client,\n        data: data.transactionRequest.data,\n        to: data.transactionRequest.to,\n        value: BigInt(data.transactionRequest.value),\n        gas: BigInt(data.transactionRequest.gasLimit)\n      },\n      approval: data.approval ? approve({\n        contract: getContract({\n          client: params.client,\n          address: data.approval.tokenAddress,\n          chain: getCachedChain(data.approval.chainId)\n        }),\n        spender: data.approval.spenderAddress,\n        amountWei: BigInt(data.approval.amountWei)\n      }) : undefined,\n      fromAddress: data.fromAddress,\n      toAddress: data.toAddress,\n      paymentToken: data.paymentToken,\n      processingFee: data.processingFee,\n      estimatedGasCostUSDCents: data.estimatedGasCostUSDCents,\n      client: params.client\n    };\n    return transfer;\n  } catch (error) {\n    console.error(\"Error getting buy with crypto transfer\", error);\n    throw error;\n  }\n}\n//# sourceMappingURL=getTransfer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}