{"ast":null,"code":"import { createInAppWallet } from \"../core/wallet/in-app-core.js\";\n/**\n * Creates an app scoped wallet for users based on various authentication methods. Full list of available authentication methods [here](https://portal.thirdweb.com/connect/wallet/sign-in-methods/configure).\n *\n * Can also be configured to use Account Abstraction to directly connect to a ERC4337 smart account based on those authentication methods.\n *\n * @param createOptions - configuration options\n * Refer to [InAppWalletCreationOptions](https://portal.thirdweb.com/references/typescript/v5/InAppWalletCreationOptions) to see the available options.\n * @returns The created in-app wallet.\n * @example\n *\n * ### Login with socials\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n *\n * const wallet = inAppWallet();\n *\n * const account = await wallet.connect({\n *   client,\n *   chain,\n *   strategy: \"google\",\n * });\n * ```\n *\n * [View all available social auth methods](https://portal.thirdweb.com/connect/wallet/sign-in-methods/configure)\n *\n * ### Enable smart accounts and sponsor gas for your users:\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const wallet = inAppWallet({\n *  smartAccount: {\n *   chain: sepolia,\n *   sponsorGas: true,\n * },\n * });\n *\n * // account will be a smart account with sponsored gas enabled\n * const account = await wallet.connect({\n *   client,\n *   strategy: \"google\",\n * });\n * ```\n *\n * ### Login with email\n *\n * ```ts\n * import { inAppWallet, preAuthenticate } from \"thirdweb/wallets/in-app\";\n *\n * const wallet = inAppWallet();\n *\n * // sends a verification code to the provided email\n * await preAuthenticate({\n *   client,\n *   strategy: \"email\",\n *   email: \"example@example.com\",\n * });\n *\n * // login with the verification code\n * const account = await wallet.connect({\n *   client,\n *   chain,\n *   strategy: \"email\",\n *   email: \"example@example.com\",\n *   verificationCode: \"123456\",\n * });\n * ```\n *\n * ### Login with SIWE\n * ```ts\n * import { inAppWallet, createWallet } from \"thirdweb/wallets\";\n *\n * const rabby = createWallet(\"io.rabby\");\n * const inAppWallet = inAppWallet();\n *\n * const account = await inAppWallet.connect({\n *    strategy: \"wallet\",\n *    chain: mainnet,\n *    wallet: rabby,\n *    client: MY_CLIENT\n * });\n * ```\n *\n * ### Login with phone number\n * ```ts\n * import { inAppWallet, preAuthenticate } from \"thirdweb/wallets/in-app\";\n *\n * const wallet = inAppWallet();\n *\n * // sends a verification code to the provided phone number\n * await preAuthenticate({\n *   client,\n *   strategy: \"phone\",\n *   phoneNumber: \"+1234567890\",\n * });\n *\n * // login with the verification code\n * const account = await wallet.connect({\n *   client,\n *   chain,\n *   strategy: \"phone\",\n *   honeNumber: \"+1234567890\",\n *   verificationCode: \"123456\",\n * });\n * ```\n *\n * ### Login with passkey\n *\n * ```ts\n * import { inAppWallet, hasStoredPasskey } from \"thirdweb/wallets/in-app\";\n *\n * const wallet = inAppWallet();\n *\n * const wallet = inAppWallet();\n * const hasPasskey = await hasStoredPasskey(client);\n * await wallet.connect({\n *   client,\n *   strategy: \"passkey\",\n *  type: hasPasskey ? \"sign-in\" : \"sign-up\",\n * });\n * ```\n *\n * ### Connect to a guest account\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n *\n * const wallet = inAppWallet();\n *\n * const account = await wallet.connect({\n *   client,\n *   strategy: \"guest\",\n * });\n * ```\n *\n * ### Connect with custom JWT (any OIDC provider)\n *\n * You can use any OIDC provider to authenticate your users. Make sure to configure it in your dashboard under in-app wallet settings.\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n *\n * const wallet = inAppWallet();\n *\n * const account = await wallet.connect({\n *   client,\n *   strategy: \"jwt\",\n *   jwt: \"your_jwt_here\",\n * });\n * ```\n *\n * ### Connect with custom endpoint\n *\n * You can also use your own endpoint to authenticate your users. Make sure to configure it in your dashboard under in-app wallet settings.\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n *\n * const wallet = inAppWallet();\n *\n * const account = await wallet.connect({\n *   client,\n *   strategy: \"auth_endpoint\",\n *   payload: \"your_auth_payload_here\",\n * });\n * ```\n *\n * ### Specify a logo for your login page (Connect UI)\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n * const wallet = inAppWallet({\n *  metadata: {\n *   image: {\n *    src: \"https://example.com/logo.png\",\n *    alt: \"My logo\",\n *    width: 100,\n *    height: 100,\n *   },\n *  },\n * });\n * ```\n *\n * ### Hide the ability to export the private key within the Connect Modal UI\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n * const wallet = inAppWallet({\n *  hidePrivateKeyExport: true\n * });\n * ```\n *\n * ### Open the Oauth window in the same tab\n *\n * By default, the Oauth window will open in a popup window. You can change this behavior by setting the `auth.mode` option to `\"redirect\"`.\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n * const wallet = inAppWallet({\n *  auth: {\n *    mode: \"redirect\"\n *  }\n * });\n * ```\n *\n * @returns The created in-app wallet.\n * @wallet\n */\nexport function inAppWallet(createOptions) {\n  return createInAppWallet({\n    createOptions,\n    connectorFactory: async client => {\n      const {\n        InAppWebConnector\n      } = await import(\"./lib/web-connector.js\");\n      return new InAppWebConnector({\n        client,\n        passkeyDomain: createOptions?.auth?.passkeyDomain\n      });\n    }\n  });\n}\n//# sourceMappingURL=in-app.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}