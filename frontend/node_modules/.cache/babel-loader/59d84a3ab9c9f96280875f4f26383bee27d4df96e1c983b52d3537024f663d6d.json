{"ast":null,"code":"import { hexToBigInt } from \"../../../utils/encoding/hex.js\";\nimport { getClientFetch } from \"../../../utils/fetch.js\";\nimport { stringify } from \"../../../utils/json.js\";\nimport { ENTRYPOINT_ADDRESS_v0_6, getDefaultBundlerUrl } from \"./constants.js\";\nimport { hexlifyUserOp } from \"./utils.js\";\n/**\n * Get paymaster and data details for a user operation.\n * @param args - The userOp and options\n * @returns - The paymaster and data details for the user operation.\n * @example\n * ```ts\n * import { getPaymasterAndData } from \"thirdweb/wallets/smart\";\n *\n * const userOp = createUnsignedUserOp(...);\n *\n * const paymasterAndData = await getPaymasterAndData({\n *  userOp,\n *  client,\n *  chain,\n * });\n * ```\n * @walletUtils\n */\nexport async function getPaymasterAndData(args) {\n  const {\n    userOp,\n    paymasterOverride,\n    client,\n    chain,\n    entrypointAddress\n  } = args;\n  if (paymasterOverride) {\n    return paymasterOverride(userOp);\n  }\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  const entrypoint = entrypointAddress ?? ENTRYPOINT_ADDRESS_v0_6;\n  const paymasterUrl = getDefaultBundlerUrl(chain);\n  const body = {\n    jsonrpc: \"2.0\",\n    id: 1,\n    method: \"pm_sponsorUserOperation\",\n    params: [hexlifyUserOp(userOp), entrypoint]\n  };\n  // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n  const fetchWithHeaders = getClientFetch(client);\n  const response = await fetchWithHeaders(paymasterUrl, {\n    method: \"POST\",\n    headers,\n    body: stringify(body)\n  });\n  const res = await response.json();\n  if (!response.ok) {\n    const error = res.error || response.statusText;\n    const code = res.code || \"UNKNOWN\";\n    throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n  }\n  if (res.result) {\n    // some paymasters return a string, some return an object with more data\n    if (typeof res.result === \"string\") {\n      return {\n        paymasterAndData: res.result\n      };\n    }\n    // check for policy errors\n    if (res.result.policyId && res.result.reason) {\n      console.warn(`Paymaster policy rejected this transaction with reason: ${res.result.reason} (policyId: ${res.result.policyId})`);\n    }\n    return {\n      paymasterAndData: res.result.paymasterAndData,\n      verificationGasLimit: res.result.verificationGasLimit ? hexToBigInt(res.result.verificationGasLimit) : undefined,\n      preVerificationGas: res.result.preVerificationGas ? hexToBigInt(res.result.preVerificationGas) : undefined,\n      callGasLimit: res.result.callGasLimit ? hexToBigInt(res.result.callGasLimit) : undefined,\n      paymaster: res.result.paymaster,\n      paymasterData: res.result.paymasterData,\n      paymasterVerificationGasLimit: res.result.paymasterVerificationGasLimit ? hexToBigInt(res.result.paymasterVerificationGasLimit) : undefined,\n      paymasterPostOpGasLimit: res.result.paymasterPostOpGasLimit ? hexToBigInt(res.result.paymasterPostOpGasLimit) : undefined\n    };\n  }\n  const error = res.error?.message || res.error || response.statusText || \"unknown error\";\n  throw new Error(`Paymaster error from ${paymasterUrl}: ${error}`);\n}\n//# sourceMappingURL=paymaster.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}