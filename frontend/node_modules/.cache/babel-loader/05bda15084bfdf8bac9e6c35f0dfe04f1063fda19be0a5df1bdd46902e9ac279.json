{"ast":null,"code":"// TODO - move this to chains subfolder\n/**\n * Remove client id from RPC url for given chain\n * @internal\n */\nexport function getValidPublicRPCUrl(chain) {\n  return getValidChainRPCs(chain).map(rpc => {\n    try {\n      const url = new URL(rpc);\n      // remove client id from url\n      if (url.hostname.endsWith(\".thirdweb.com\")) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url.toString();\n    } catch {\n      return rpc;\n    }\n  });\n}\n// TODO - move this to chains/\n/**\n * Get valid RPCs for given chain\n * @internal\n */\nfunction getValidChainRPCs(chain, clientId, mode = \"http\") {\n  const processedRPCs = [];\n  for (const rpc of chain.rpc) {\n    // exclude RPC if mode mismatch\n    if (mode === \"http\" && !rpc.startsWith(\"http\")) {\n      continue;\n    }\n    if (mode === \"ws\" && !rpc.startsWith(\"ws\")) {\n      continue;\n    }\n    // Replace API_KEY placeholder with value\n    if (rpc.includes(\"${THIRDWEB_API_KEY}\")) {\n      if (clientId) {\n        processedRPCs.push(rpc.replace(\"${THIRDWEB_API_KEY}\", clientId) + (typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ?\n        // @ts-expect-error\n        `/?bundleId=${globalThis.APP_BUNDLE_ID}` : \"\"));\n      } else {\n        // if no client id, let it through with empty string\n        // if secretKey is present, it will be used in header\n        // if none are passed, will have reduced access\n        processedRPCs.push(rpc.replace(\"${THIRDWEB_API_KEY}\", \"\"));\n      }\n    }\n    // exclude RPCs with unknown placeholder\n    else if (rpc.includes(\"${\")) {\n      // do nothing (just don't add it to the list)\n    }\n    // add as is\n    else {\n      processedRPCs.push(rpc);\n    }\n  }\n  if (processedRPCs.length === 0) {\n    throw new Error(`No RPC available for chainId \"${chain.chainId}\" with mode ${mode}`);\n  }\n  return processedRPCs;\n}\n//# sourceMappingURL=chains.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}