{"ast":null,"code":"import { getContractEvents } from \"./get-events.js\";\nimport { watchBlockNumber } from \"../../rpc/watchBlockNumber.js\";\nimport { retry } from \"../../utils/retry.js\";\n/**\n * Listens for  contract events from the blockchain.\n * @param options - The options for retrieving contract events.\n * @returns The unwatch function.\n * @example\n * ### Listen to all events for a contract\n * ```ts\n * import { watchContractEvents } from \"thirdweb\";\n * const unwatch = watchContractEvents({\n *  contract: myContract,\n *  onEvents: (events) => {\n *   // do something with the events\n *  },\n * });\n * ```\n *\n * ### Listen to specific events for a contract\n * ```ts\n * import { prepareEvent, watchContractEvents } from \"thirdweb\";\n * const myEvent = prepareEvent({\n *  event: \"event MyEvent(uint256 myArg)\",\n * });\n * const events = await watchContractEvents({\n *  contract: myContract,\n *  events: [myEvent],\n *  onEvents: (events) => {\n *   // do something with the events\n *  },\n * });\n * ```\n * @contract\n */\nexport function watchContractEvents(options) {\n  // returning this returns the underlying \"unwatch\" function\n  return watchBlockNumber({\n    ...options.contract,\n    /**\n     * This function is called every time a new block is mined.\n     * @param blockNumber - The block number of the new block.\n     * @returns A promise that resolves when the function is finished.\n     * @internal\n     */\n    onNewBlockNumber: async blockNumber => {\n      const logs = await retry(async () => getContractEvents({\n        ...options,\n        // fromBlock is inclusive\n        fromBlock: blockNumber,\n        // toBlock is inclusive\n        toBlock: blockNumber\n      }), {\n        retries: 3,\n        delay: 500\n      });\n      // if there were any logs associated with our event(s)\n      if (logs.length) {\n        options.onEvents(logs);\n      }\n    },\n    latestBlockNumber: options.latestBlockNumber\n  });\n}\n//# sourceMappingURL=watch-events.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}