{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { getChainId } from '../../actions/public/getChainId.js';\nimport { prepareTransactionRequest } from '../../actions/wallet/prepareTransactionRequest.js';\nimport { sendRawTransaction } from '../../actions/wallet/sendRawTransaction.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { assertCurrentChain } from '../../utils/chain/assertCurrentChain.js';\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { assertEip712Request } from '../utils/assertEip712Request.js';\nimport { signTransaction } from './signTransaction.js';\n/**\n * Creates, signs, and sends a new EIP712 transaction to the network.\n *\n * @param client - Client to use\n * @param parameters - {@link SendEip712TransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { zksync } from 'viem/chains'\n * import { sendEip712Transaction } from 'viem/zksync'\n *\n * const client = createWalletClient({\n *   chain: zksync,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendEip712Transaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { zksync } from 'viem/chains'\n * import { sendEip712Transaction } from 'viem/zksync'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: zksync,\n *   transport: http(),\n * })\n *\n * const hash = await sendEip712Transaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendEip712Transaction(client, parameters) {\n  const {\n    chain = client.chain\n  } = parameters;\n  if (!parameters.account) throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/sendTransaction'\n  });\n  const account = parseAccount(parameters.account);\n  try {\n    assertEip712Request(parameters);\n    // Prepare the request for signing (assign appropriate fees, etc.)\n    const request = await prepareTransactionRequest(client, {\n      ...parameters,\n      nonceManager: account.nonceManager,\n      parameters: ['gas', 'nonce', 'fees']\n    });\n    let chainId;\n    if (chain !== null) {\n      chainId = await getAction(client, getChainId, 'getChainId')({});\n      assertCurrentChain({\n        currentChainId: chainId,\n        chain\n      });\n    }\n    const serializedTransaction = await signTransaction(client, {\n      ...request,\n      chainId\n    });\n    return await getAction(client, sendRawTransaction, 'sendRawTransaction')({\n      serializedTransaction\n    });\n  } catch (err) {\n    throw getTransactionError(err, {\n      ...parameters,\n      account,\n      chain: chain\n    });\n  }\n}\n//# sourceMappingURL=sendEip712Transaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}