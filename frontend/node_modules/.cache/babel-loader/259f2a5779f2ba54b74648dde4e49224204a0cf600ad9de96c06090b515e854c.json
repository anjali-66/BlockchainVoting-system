{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import abi from '../abi/VotingSystem.json';\n\n// const VotingSystem = ({ provider, account }) => {\n//   const [contract, setContract] = useState(null);\n//   const [polls, setPolls] = useState([]);\n//   const [newPoll, setNewPoll] = useState({ title: '', options: ['', ''], duration: 60 });\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const contractInstance = new ethers.Contract(\n//         \"0x002A13DF3bB8Ce7D7143bE17223F8893e2152c29\",\n//         abi,\n//         provider\n//       );\n//       setContract(contractInstance);\n//     }\n//   }, [provider]);\n\n//   const createPoll = async () => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.createPoll(\n//         newPoll.title,\n//         newPoll.options.filter(opt => opt !== ''),\n//         newPoll.duration\n//       );\n//       await tx.wait();\n\n//       setNewPoll({ title: '', options: ['', ''], duration: 60 });\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error creating poll:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const castVote = async (pollId, optionIndex) => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error voting:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPolls = async () => {\n//     if (!contract) return;\n//     try {\n//       const pollCount = await contract.pollCount();\n//       const pollsData = [];\n//       for (let i = 0; i < pollCount; i++) {\n//         const details = await contract.getPollDetails(i);\n//         const results = await contract.getPollResults(i);\n//         pollsData.push({ ...details, results });\n//       }\n//       setPolls(pollsData);\n//     } catch (error) {\n//       console.error('Error fetching polls:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPolls();\n//   }, [contract]);\n\n//   return (\n//     <div className=\"max-w-2xl mx-auto p-4\">\n//       <div className=\"mb-8 bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Create New Poll</h2>\n//         <input\n//           type=\"text\"\n//           value={newPoll.title}\n//           onChange={(e) => setNewPoll({ ...newPoll, title: e.target.value })}\n//           placeholder=\"Poll Title\"\n//           className=\"w-full p-2 mb-4 border rounded\"\n//         />\n//         {newPoll.options.map((option, index) => (\n//           <input\n//             key={index}\n//             type=\"text\"\n//             value={option}\n//             onChange={(e) => {\n//               const newOptions = [...newPoll.options];\n//               newOptions[index] = e.target.value;\n//               setNewPoll({ ...newPoll, options: newOptions });\n//             }}\n//             placeholder={`Option ${index + 1}`}\n//             className=\"w-full p-2 mb-2 border rounded\"\n//           />\n//         ))}\n//         <button\n//           onClick={() => setNewPoll({ ...newPoll, options: [...newPoll.options, ''] })}\n//           className=\"bg-gray-500 text-white px-4 py-2 rounded mr-2\"\n//         >\n//           Add Option\n//         </button>\n//         <button\n//           onClick={createPoll}\n//           disabled={loading}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//         >\n//           Create Poll\n//         </button>\n//       </div>\n\n//       <div className=\"bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Active Polls</h2>\n//         {polls.map((poll, index) => (\n//           <div key={index} className=\"border-b py-4\">\n//             <h3 className=\"font-bold\">{poll.title}</h3>\n//             <div className=\"mt-2\">\n//               {poll.options.map((option, optIndex) => (\n//                 <button\n//                   key={optIndex}\n//                   onClick={() => castVote(poll.pollId, optIndex)}\n//                   className=\"bg-blue-100 hover:bg-blue-200 px-4 py-2 rounded mr-2 mb-2\"\n//                 >\n//                   {option} ({poll.results[optIndex].toString()})\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VotingSystem;\n\n//consists all the function to interact with the smart contract\n// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n\n// const SmartContractInterface = ({ contractAddress, abi }) => {\n//   const [pollTitle, setPollTitle] = useState('');\n//   const [pollOptions, setPollOptions] = useState([]);\n//   const [pollDuration, setPollDuration] = useState('');\n//   const [pollId, setPollId] = useState('');\n//   const [optionIndex, setOptionIndex] = useState('');\n//   const [pollDetails, setPollDetails] = useState(null);\n//   const [pollResults, setPollResults] = useState(null);\n//   const [allPolls, setAllPolls] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const provider = new ethers.BrowserProvider(window.ethereum);\n//   const [contract, setContract] = useState(null);\n\n//   useEffect(() => {\n//     if (contractAddress && abi) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, abi, signer));\n//     } else {\n//       console.error(\"Invalid contractAddress or ABI\");\n//     }\n//   }, [contractAddress, abi]);\n\n//   useEffect(() => {\n//     if (contract) fetchAllPolls();\n//   }, [contract]);\n\n//   const createPoll = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.createPoll(pollTitle, pollOptions.filter(opt => opt), pollDuration);\n//       await tx.wait();\n//       alert('Poll created successfully!');\n//       fetchAllPolls();\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error creating poll');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const vote = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       alert('Vote cast successfully!');\n//       fetchPollResults(pollId);\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error casting vote');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollDetails = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll details...\");\n//       const details = await contract.getPollDetails(id || pollId);\n//       console.log(\"Poll details:\", details);\n//       setPollDetails(details);\n//     } catch (error) {\n//       console.error(\"Error fetching poll details:\", error);\n//       alert('Error fetching poll details');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollResults = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll results...\");\n//       const results = await contract.getPollResults(id || pollId);\n//       console.log(\"Poll results:\", results);\n//       setPollResults(results);\n//     } catch (error) {\n//       console.error(\"Error fetching poll results:\", error);\n//       alert('Error fetching poll results');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchAllPolls = async () => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching all polls...\");\n//       const totalPolls = await contract.pollCount();\n//       console.log(\"Total polls:\", totalPolls.toString());\n\n//       const polls = [];\n//       for (let i = 0; i < totalPolls; i++) {\n//         const details = await contract.getPollDetails(i);\n//         console.log(`Poll ${i} details:`, details);\n//         polls.push({ id: i, details });\n//       }\n//       setAllPolls(polls);\n//       console.log(\"All polls:\", polls);\n//     } catch (error) {\n//       console.error(\"Error fetching all polls:\", error);\n//       alert('Error fetching all polls');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Smart Contract Interface</h2>\n\n//       <div>\n//         <h3>Create Poll</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Title\"\n//           value={pollTitle}\n//           onChange={(e) => setPollTitle(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Options (comma separated)\"\n//           value={pollOptions.join(',')}\n//           onChange={(e) => setPollOptions(e.target.value.split(','))}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Duration in Minutes\"\n//           value={pollDuration}\n//           onChange={(e) => setPollDuration(e.target.value)}\n//         />\n//         <button onClick={createPoll} disabled={loading}>Create Poll</button>\n//       </div>\n\n//       <div>\n//         <h3>Vote</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Option Index\"\n//           value={optionIndex}\n//           onChange={(e) => setOptionIndex(e.target.value)}\n//         />\n//         <button onClick={vote} disabled={loading}>Vote</button>\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Details</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollDetails()} disabled={loading}>Fetch Details</button>\n//         {pollDetails && (\n//           <div>\n//             <p>Title: {pollDetails[0]}</p>\n//             <p>Options: {pollDetails[1].join(', ')}</p>\n//             <p>End Time: {new Date(pollDetails[2] * 1000).toLocaleString()}</p>\n//             <p>Creator: {pollDetails[3]}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Results</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollResults()} disabled={loading}>Fetch Results</button>\n//         {pollResults && (\n//           <div>\n//             <p>Results: {pollResults.join(', ')}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>All Polls</h3>\n//         <button onClick={fetchAllPolls} disabled={loading}>Refresh Polls</button>\n//         <ul>\n//           {allPolls.map((poll) => (\n//             <li key={poll.id}>\n//               <p>ID: {poll.id}</p>\n//               <p>Title: {poll.details[0]}</p>\n//               <p>Options: {poll.details[1].join(', ')}</p>\n//               <p>End Time: {new Date(poll.details[2] * 1000).toLocaleString()}</p>\n//               <button onClick={() => fetchPollDetails(poll.id)}>View Details</button>\n//               <button onClick={() => fetchPollResults(poll.id)}>View Results</button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SmartContractInterface;","map":{"version":3,"names":[],"sources":["/Users/sharmaanjali/blockchain-voting-system/frontend/src/components/Votingsystem.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import abi from '../abi/VotingSystem.json';\n\n// const VotingSystem = ({ provider, account }) => {\n//   const [contract, setContract] = useState(null);\n//   const [polls, setPolls] = useState([]);\n//   const [newPoll, setNewPoll] = useState({ title: '', options: ['', ''], duration: 60 });\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const contractInstance = new ethers.Contract(\n//         \"0x002A13DF3bB8Ce7D7143bE17223F8893e2152c29\",\n//         abi,\n//         provider\n//       );\n//       setContract(contractInstance);\n//     }\n//   }, [provider]);\n\n//   const createPoll = async () => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.createPoll(\n//         newPoll.title,\n//         newPoll.options.filter(opt => opt !== ''),\n//         newPoll.duration\n//       );\n//       await tx.wait();\n\n//       setNewPoll({ title: '', options: ['', ''], duration: 60 });\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error creating poll:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const castVote = async (pollId, optionIndex) => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error voting:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPolls = async () => {\n//     if (!contract) return;\n//     try {\n//       const pollCount = await contract.pollCount();\n//       const pollsData = [];\n//       for (let i = 0; i < pollCount; i++) {\n//         const details = await contract.getPollDetails(i);\n//         const results = await contract.getPollResults(i);\n//         pollsData.push({ ...details, results });\n//       }\n//       setPolls(pollsData);\n//     } catch (error) {\n//       console.error('Error fetching polls:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPolls();\n//   }, [contract]);\n\n//   return (\n//     <div className=\"max-w-2xl mx-auto p-4\">\n//       <div className=\"mb-8 bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Create New Poll</h2>\n//         <input\n//           type=\"text\"\n//           value={newPoll.title}\n//           onChange={(e) => setNewPoll({ ...newPoll, title: e.target.value })}\n//           placeholder=\"Poll Title\"\n//           className=\"w-full p-2 mb-4 border rounded\"\n//         />\n//         {newPoll.options.map((option, index) => (\n//           <input\n//             key={index}\n//             type=\"text\"\n//             value={option}\n//             onChange={(e) => {\n//               const newOptions = [...newPoll.options];\n//               newOptions[index] = e.target.value;\n//               setNewPoll({ ...newPoll, options: newOptions });\n//             }}\n//             placeholder={`Option ${index + 1}`}\n//             className=\"w-full p-2 mb-2 border rounded\"\n//           />\n//         ))}\n//         <button\n//           onClick={() => setNewPoll({ ...newPoll, options: [...newPoll.options, ''] })}\n//           className=\"bg-gray-500 text-white px-4 py-2 rounded mr-2\"\n//         >\n//           Add Option\n//         </button>\n//         <button\n//           onClick={createPoll}\n//           disabled={loading}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//         >\n//           Create Poll\n//         </button>\n//       </div>\n\n//       <div className=\"bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Active Polls</h2>\n//         {polls.map((poll, index) => (\n//           <div key={index} className=\"border-b py-4\">\n//             <h3 className=\"font-bold\">{poll.title}</h3>\n//             <div className=\"mt-2\">\n//               {poll.options.map((option, optIndex) => (\n//                 <button\n//                   key={optIndex}\n//                   onClick={() => castVote(poll.pollId, optIndex)}\n//                   className=\"bg-blue-100 hover:bg-blue-200 px-4 py-2 rounded mr-2 mb-2\"\n//                 >\n//                   {option} ({poll.results[optIndex].toString()})\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VotingSystem;\n\n//consists all the function to interact with the smart contract\n// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n\n// const SmartContractInterface = ({ contractAddress, abi }) => {\n//   const [pollTitle, setPollTitle] = useState('');\n//   const [pollOptions, setPollOptions] = useState([]);\n//   const [pollDuration, setPollDuration] = useState('');\n//   const [pollId, setPollId] = useState('');\n//   const [optionIndex, setOptionIndex] = useState('');\n//   const [pollDetails, setPollDetails] = useState(null);\n//   const [pollResults, setPollResults] = useState(null);\n//   const [allPolls, setAllPolls] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const provider = new ethers.BrowserProvider(window.ethereum);\n//   const [contract, setContract] = useState(null);\n\n//   useEffect(() => {\n//     if (contractAddress && abi) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, abi, signer));\n//     } else {\n//       console.error(\"Invalid contractAddress or ABI\");\n//     }\n//   }, [contractAddress, abi]);\n\n//   useEffect(() => {\n//     if (contract) fetchAllPolls();\n//   }, [contract]);\n\n//   const createPoll = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.createPoll(pollTitle, pollOptions.filter(opt => opt), pollDuration);\n//       await tx.wait();\n//       alert('Poll created successfully!');\n//       fetchAllPolls();\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error creating poll');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const vote = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       alert('Vote cast successfully!');\n//       fetchPollResults(pollId);\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error casting vote');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollDetails = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll details...\");\n//       const details = await contract.getPollDetails(id || pollId);\n//       console.log(\"Poll details:\", details);\n//       setPollDetails(details);\n//     } catch (error) {\n//       console.error(\"Error fetching poll details:\", error);\n//       alert('Error fetching poll details');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollResults = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll results...\");\n//       const results = await contract.getPollResults(id || pollId);\n//       console.log(\"Poll results:\", results);\n//       setPollResults(results);\n//     } catch (error) {\n//       console.error(\"Error fetching poll results:\", error);\n//       alert('Error fetching poll results');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchAllPolls = async () => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching all polls...\");\n//       const totalPolls = await contract.pollCount();\n//       console.log(\"Total polls:\", totalPolls.toString());\n\n//       const polls = [];\n//       for (let i = 0; i < totalPolls; i++) {\n//         const details = await contract.getPollDetails(i);\n//         console.log(`Poll ${i} details:`, details);\n//         polls.push({ id: i, details });\n//       }\n//       setAllPolls(polls);\n//       console.log(\"All polls:\", polls);\n//     } catch (error) {\n//       console.error(\"Error fetching all polls:\", error);\n//       alert('Error fetching all polls');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Smart Contract Interface</h2>\n\n//       <div>\n//         <h3>Create Poll</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Title\"\n//           value={pollTitle}\n//           onChange={(e) => setPollTitle(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Options (comma separated)\"\n//           value={pollOptions.join(',')}\n//           onChange={(e) => setPollOptions(e.target.value.split(','))}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Duration in Minutes\"\n//           value={pollDuration}\n//           onChange={(e) => setPollDuration(e.target.value)}\n//         />\n//         <button onClick={createPoll} disabled={loading}>Create Poll</button>\n//       </div>\n\n//       <div>\n//         <h3>Vote</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Option Index\"\n//           value={optionIndex}\n//           onChange={(e) => setOptionIndex(e.target.value)}\n//         />\n//         <button onClick={vote} disabled={loading}>Vote</button>\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Details</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollDetails()} disabled={loading}>Fetch Details</button>\n//         {pollDetails && (\n//           <div>\n//             <p>Title: {pollDetails[0]}</p>\n//             <p>Options: {pollDetails[1].join(', ')}</p>\n//             <p>End Time: {new Date(pollDetails[2] * 1000).toLocaleString()}</p>\n//             <p>Creator: {pollDetails[3]}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Results</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollResults()} disabled={loading}>Fetch Results</button>\n//         {pollResults && (\n//           <div>\n//             <p>Results: {pollResults.join(', ')}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>All Polls</h3>\n//         <button onClick={fetchAllPolls} disabled={loading}>Refresh Polls</button>\n//         <ul>\n//           {allPolls.map((poll) => (\n//             <li key={poll.id}>\n//               <p>ID: {poll.id}</p>\n//               <p>Title: {poll.details[0]}</p>\n//               <p>Options: {poll.details[1].join(', ')}</p>\n//               <p>End Time: {new Date(poll.details[2] * 1000).toLocaleString()}</p>\n//               <button onClick={() => fetchPollDetails(poll.id)}>View Details</button>\n//               <button onClick={() => fetchPollResults(poll.id)}>View Results</button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SmartContractInterface;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}