{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext } from \"react\";\nconst TokenProviderContext = /* @__PURE__ */createContext(undefined);\n/**\n * A React context provider component that supplies Token-related data to its child components.\n *\n * This component serves as a wrapper around the `TokenProviderContext.Provider` and passes\n * the provided token data down to all of its child components through the context API.\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { TokenProvider, TokenIcon, TokenName  } from \"thirdweb/react\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <TokenProvider address=\"0x...\" client={...} chain={ethereum}>\n *   <TokenIcon />\n *   <TokenName />\n * </TokenProvider>\n * ```\n *\n * ### This component also works with native token!\n * ```tsx\n * import { NATIVE_TOKEN_ADDRESS} from \"thirdweb\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <TokenProvider address={NATIVE_TOKEN_ADDRESS} chain={ethereum} client={client}>\n *   <TokenSymbol /> // \"ETH\"\n * </TokenProvider>\n * ```\n *\n * @component\n * @token\n * @beta\n */\nexport function TokenProvider(props) {\n  return _jsx(TokenProviderContext.Provider, {\n    value: props,\n    children: props.children\n  });\n}\n/**\n * @internal\n */\nexport function useTokenContext() {\n  const ctx = useContext(TokenProviderContext);\n  if (!ctx) {\n    throw new Error(\"TokenProviderContext not found. Make sure you are using TokenName, TokenIcon, TokenSymbol etc. inside a <TokenProvider /> component\");\n  }\n  return ctx;\n}\n//# sourceMappingURL=provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}