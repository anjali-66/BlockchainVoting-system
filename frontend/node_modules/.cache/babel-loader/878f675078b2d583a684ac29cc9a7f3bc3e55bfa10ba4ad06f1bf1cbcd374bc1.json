{"ast":null,"code":"import { useQuery } from \"@tanstack/react-query\";\nimport { getBuyWithCryptoStatus } from \"../../../../pay/buyWithCrypto/getStatus.js\";\n/**\n * A hook to get a status of a \"Buy with crypto\" transaction to determine if the transaction is completed, failed or pending.\n *\n * This hook is a React Query wrapper of the [`getBuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoStatus) function.\n * You can also use that function directly.\n * @param params - object of type [`BuyWithCryptoTransaction`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransaction)\n * @returns A react query object which contains the data of type [`BuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoStatus)\n * @example\n * ```tsx\n * import { useSendTransaction, useBuyWithCryptoQuote, useBuyWithCryptoStatus, type BuyWithCryptoStatusQueryParams, useActiveAccount } from \"thirdweb/react\";\n * import { sendTransaction } from 'thirdweb';\n *\n * function Component() {\n *  const buyWithCryptoQuoteQuery = useBuyWithCryptoQuote(swapParams);\n *  const [buyTxHash, setBuyTxHash] = useState<BuyWithCryptoStatusQueryParams | undefined>();\n *  const buyWithCryptoStatusQuery = useBuyWithCryptoStatus(buyTxHash ? {\n *    client,\n *    transactionHash: buyTxHash,\n *  }: undefined);\n *  const account = useActiveAccount();\n *\n *  async function handleBuyWithCrypto() {\n *\n *    // if approval is required\n *    if (buyWithCryptoQuoteQuery.data.approval) {\n *      const approveTx = await sendTransaction({\n *        account: account,\n *        transaction: swapQuote.data.approval,\n *      });\n *      await waitForApproval(approveTx);\n *    }\n *\n *    // send the transaction to buy crypto\n *    // this promise is resolved when user confirms the transaction in the wallet and the transaction is sent to the blockchain\n *    const buyTx = await sendTransactionMutation.mutateAsync({\n *      transaction: swapQuote.data.transactionRequest,\n *      account: account,\n *    });\n *    await waitForApproval(buyTx);\n *\n *    // set buyTx.transactionHash to poll the status of the swap transaction\n *    setBuyWithCryptoTx(buyTx.transactionHash);\n *  }\n *\n *  return <button onClick={handleBuyWithCrypto}>Swap</button>\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyWithCryptoStatus(params) {\n  return useQuery({\n    queryKey: [\"getBuyWithCryptoStatus\", params?.transactionHash],\n    queryFn: async () => {\n      if (!params) {\n        throw new Error(\"No params\");\n      }\n      return getBuyWithCryptoStatus(params);\n    },\n    enabled: !!params,\n    refetchInterval: query => {\n      const status = query.state.data?.status;\n      if (status === \"COMPLETED\" || status === \"FAILED\") {\n        return false;\n      }\n      return 5000;\n    },\n    refetchIntervalInBackground: true,\n    retry: true\n  });\n}\n//# sourceMappingURL=useBuyWithCryptoStatus.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}