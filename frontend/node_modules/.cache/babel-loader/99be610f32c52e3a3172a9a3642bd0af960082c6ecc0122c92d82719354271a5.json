{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getChainMetadata } from \"../../../../../chains/utils.js\";\nimport { getFunctionId } from \"../../../../../utils/function-id.js\";\nimport { useChainContext } from \"./provider.js\";\n/**\n * This component fetches then shows the name of a chain.\n * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>\n *\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { ChainProvider, ChainName } from \"thirdweb/react\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <ChainProvider {...props}>\n *   <ChainName  />\n * </ChainProvider>\n * ```\n * Result:\n * ```html\n * <span>Ethereum Mainnet</span>\n * ```\n *\n * ### Custom name resolver\n * By default ChainName will call the thirdweb API to retrieve the chain name.\n * However if you have a different way to fetch the name, you can pass the function to the `nameResolver` prop.\n * Note: nameResolver should either be a string or a function (async) that returns a string.\n * ```tsx\n * async function fetchNameMethod() {\n *   // your own fetching logic\n *   return \"the chain name\";\n * }\n *\n * <ChainName nameResolver={fetchNameMethod} />\n * ```\n *\n * Alternatively you can also pass in a string directly:\n * ```tsx\n * <ChainName nameResolver=\"ETH Mainnet\" />\n * ```\n *\n *\n * ### Format the name (capitalize, truncate, etc.)\n * The ChainName component accepts a `formatFn` which takes in a string and outputs a string\n * The function is used to modify the name of the chain\n *\n * ```tsx\n * const concatStr = (str: string):string => str + \"Network\"\n *\n * <ChainProvider {...props}>\n *   <ChainName formatFn={concatStr} />\n * </ChainProvider>\n * ```\n *\n * Result:\n * ```html\n * <span>Ethereum Mainnet Network</span>\n * ```\n *\n * ### Show a loading sign when the name is being fetched\n * ```tsx\n * import { ChainProvider, ChainName } from \"thirdweb/react\";\n *\n * <ChainProvider {...props}>\n *   <ChainName loadingComponent={<Spinner />} />\n * </ChainProvider>\n * ```\n *\n * ### Fallback to something when the name fails to resolve\n * ```tsx\n * <ChainProvider {...props}>\n *   <ChainName fallbackComponent={\"Failed to load\"} />\n * </ChainProvider>\n * ```\n *\n * ### Custom query options for useQuery\n * This component uses `@tanstack-query`'s useQuery internally.\n * You can use the `queryOptions` prop for more fine-grained control\n * ```tsx\n * <ChainName\n *   queryOptions={{\n *     enabled: isEnabled,\n *     retry: 4,\n *   }}\n * />\n * ```\n *\n * @component\n * @chain\n * @beta\n */\nexport function ChainName({\n  nameResolver,\n  formatFn,\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  ...restProps\n}) {\n  const {\n    chain\n  } = useChainContext();\n  const nameQuery = useQuery({\n    queryKey: getQueryKeys({\n      chainId: chain.id,\n      nameResolver\n    }),\n    queryFn: async () => fetchChainName({\n      chain,\n      nameResolver\n    }),\n    ...queryOptions\n  });\n  if (nameQuery.isLoading) {\n    return loadingComponent || null;\n  }\n  if (!nameQuery.data) {\n    return fallbackComponent || null;\n  }\n  const displayValue = formatFn ? formatFn(nameQuery.data) : nameQuery.data;\n  return _jsx(\"span\", {\n    ...restProps,\n    children: displayValue\n  });\n}\n/**\n * @internal Exported for tests only\n */\nexport async function fetchChainName(props) {\n  const {\n    nameResolver,\n    chain\n  } = props;\n  if (typeof nameResolver === \"string\") {\n    return nameResolver;\n  }\n  if (typeof nameResolver === \"function\") {\n    return nameResolver();\n  }\n  if (chain.name) {\n    return chain.name;\n  }\n  return getChainMetadata(chain).then(data => data.name);\n}\n/**\n * @internal Exported for tests\n */\nexport function getQueryKeys(props) {\n  if (typeof props.nameResolver === \"function\") {\n    return [\"_internal_chain_name_\", props.chainId, {\n      resolver: getFunctionId(props.nameResolver)\n    }];\n  }\n  return [\"_internal_chain_name_\", props.chainId];\n}\n//# sourceMappingURL=name.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}