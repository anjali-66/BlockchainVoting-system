{"ast":null,"code":"import { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithFiatStatusEndpoint } from \"../utils/definitions.js\";\n/**\n * Once you get a `quote` from [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote)\n * and open the `quote.onRampLink` in a new tab, you can start polling for the transaction status using `getBuyWithFiatStatus`\n *\n * You should keep calling this function at regular intervals while the status is in one of the pending states such as - \"PENDING_PAYMENT\", \"PENDING_ON_RAMP_TRANSFER\", \"ON_RAMP_TRANSFER_IN_PROGRESS\", \"CRYPTO_SWAP_IN_PROGRESS\" etc..\n *\n * If `quote.onRampToken` is same as `quote.toToken` (same chain + same token address) - This means that the token can be directly bought from the on-ramp provider.\n * But if they are different - On-ramp provider will send the `quote.onRampToken` to the user's wallet address and a swap is required to convert it to the desired token.\n * You can use the [`isSwapRequiredPostOnramp`](https://portal.thirdweb.com/references/typescript/v5/isSwapRequiredPostOnramp) utility function to check if a swap is required after the on-ramp is done.\n *\n * #### When no swap is required\n * If there is no swap required - the status will become `\"ON_RAMP_TRANSFER_COMPLETED\"` once the on-ramp provider has sent the tokens to the user's wallet address.\n * Once you receive this status, the process is complete.\n *\n * ### When a swap is required\n * If a swap is required - the status will become `\"CRYPTO_SWAP_REQUIRED\"` once the on-ramp provider has sent the tokens to the user's wallet address.\n * Once you receive this status, you need to start the swap process.\n *\n * On receiving the `\"CRYPTO_SWAP_REQUIRED\"` status, you can use the [`getPostOnRampQuote`](https://portal.thirdweb.com/references/typescript/v5/getPostOnRampQuote) function to get the quote for the swap of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote).\n *\n * Once you have this quote - You can follow the same steps as mentioned in the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) documentation to perform the swap.\n *\n * @param params - Object of type [`GetBuyWithFiatStatusParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithFiatStatusParams)\n * @example\n * ```ts\n * // step 1 - get a quote\n * const fiatQuote = await getBuyWithFiatQuote(fiatQuoteParams)\n *\n * // step 2 - open the on-ramp provider UI\n * window.open(quote.onRampLink, \"_blank\");\n *\n * // step 3 - keep calling getBuyWithFiatStatus while the status is in one of the pending states\n * const fiatStatus = await getBuyWithFiatStatus({\n *    client,\n *    intentId: fiatQuote.intentId,\n * })\n *\n * // when the fiatStatus.status is \"ON_RAMP_TRANSFER_COMPLETED\" - the process is complete\n * // when the fiatStatus.status is \"CRYPTO_SWAP_REQUIRED\" - start the swap process\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithFiatStatus(params) {\n  try {\n    const queryParams = new URLSearchParams({\n      intentId: params.intentId\n    });\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyWithFiatStatusEndpoint()}?${queryString}`;\n    const response = await getClientFetch(params.client)(url);\n    if (!response.ok) {\n      response.body?.cancel();\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return (await response.json()).result;\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n//# sourceMappingURL=getStatus.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}