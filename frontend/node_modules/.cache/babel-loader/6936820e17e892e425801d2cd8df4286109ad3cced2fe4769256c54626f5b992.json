{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { ReloadIcon } from \"@radix-ui/react-icons\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { createWalletConnectClient, createWalletConnectSession, disconnectWalletConnectSession, getActiveWalletConnectSessions } from \"../../../../../wallets/wallet-connect/receiver/index.js\";\nimport { iconSize, spacing } from \"../../../../core/design-system/index.js\";\nimport { useActiveWallet } from \"../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { InputSelectionUI } from \"../../../wallets/in-app/InputSelectionUI.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Container, Line, ModalHeader } from \"../../components/basic.js\";\nimport { Button } from \"../../components/buttons.js\";\nimport { Text } from \"../../components/text.js\";\nimport { WalletConnectDisconnectScreen } from \"./WalletConnectDisconnectScreen.js\";\nimport { WalletLogoSpinner } from \"./WalletLogoSpinner.js\";\n/**\n * @internal\n */\nexport function WalletConnectReceiverScreen(props) {\n  const activeWallet = useActiveWallet();\n  const [loading, setLoading] = useState(false);\n  const [errorConnecting, setErrorConnecting] = useState(false);\n  const queryClient = useQueryClient();\n  const {\n    data: walletConnectClient\n  } = useQuery({\n    queryKey: [\"walletConnectClient\"],\n    queryFn: async () => {\n      if (!activeWallet) return;\n      try {\n        const client = await createWalletConnectClient({\n          wallet: activeWallet,\n          client: props.client,\n          chains: props.chains,\n          onConnect: () => {\n            setLoading(false);\n            queryClient.invalidateQueries({\n              queryKey: [\"walletConnectSession\"]\n            });\n          },\n          onDisconnect: () => {\n            setLoading(false);\n            queryClient.invalidateQueries({\n              queryKey: [\"walletConnectSession\"]\n            });\n          },\n          onError: error => {\n            setErrorConnecting(error.message);\n            setLoading(false);\n          }\n        });\n        return client;\n      } catch {\n        setErrorConnecting(\"Failed to establish WalletConnect connection\");\n        return;\n      }\n    },\n    retry: false,\n    enabled: !!activeWallet\n  });\n  const {\n    data: session,\n    refetch: refetchSession\n  } = useQuery({\n    queryKey: [\"walletConnectSession\"],\n    queryFn: async () => {\n      if (!walletConnectClient) return null;\n      const sessions = await getActiveWalletConnectSessions();\n      return sessions[0] || null;\n    },\n    enabled: !!walletConnectClient\n  });\n  const {\n    mutateAsync: disconnect\n  } = useMutation({\n    mutationFn: async () => {\n      if (!walletConnectClient || !session) throw new Error(\"No session\");\n      await disconnectWalletConnectSession({\n        session: session,\n        walletConnectClient: walletConnectClient\n      });\n    },\n    onSuccess: () => {\n      setErrorConnecting(false);\n      queryClient.invalidateQueries({\n        queryKey: [\"walletConnectSession\"]\n      });\n      refetchSession();\n    },\n    onError: error => {\n      console.error(error);\n      setErrorConnecting(error.message);\n    }\n  });\n  if (session) {\n    return _jsx(WalletConnectDisconnectScreen, {\n      disconnect: disconnect,\n      error: errorConnecting,\n      ...props,\n      session: session\n    });\n  }\n  return _jsxs(Container, {\n    style: {\n      minHeight: \"300px\"\n    },\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: _jsx(ModalHeader, {\n        title: \"Connect an App\",\n        onBack: props.onBack\n      })\n    }), _jsx(Line, {}), _jsx(Container, {\n      px: \"lg\",\n      scrollY: true,\n      style: {\n        maxHeight: \"500px\"\n      },\n      children: _jsxs(Container, {\n        py: \"sm\",\n        style: {\n          position: \"relative\"\n        },\n        children: [_jsx(Container, {\n          py: \"md\",\n          children: _jsx(WalletLogoSpinner, {\n            client: props.client,\n            error: !!errorConnecting,\n            id: \"walletConnect\",\n            hideSpinner: !loading\n          })\n        }), _jsx(Container, {\n          animate: \"fadein\",\n          style: {\n            animationDuration: \"200ms\"\n          },\n          children: !errorConnecting ? _jsxs(_Fragment, {\n            children: [_jsx(Text, {\n              balance: true,\n              center: true,\n              multiline: true,\n              size: \"sm\",\n              children: \"Copy your connection URI from the external app.\"\n            }), _jsx(Spacer, {\n              y: \"xl\"\n            }), _jsx(InputSelectionUI, {\n              type: \"text\",\n              disabled: loading || !!errorConnecting || !walletConnectClient,\n              onSelect: async value => {\n                setLoading(true);\n                if (!walletConnectClient) {\n                  setErrorConnecting(\"No WalletConnect client found\");\n                } else {\n                  try {\n                    createWalletConnectSession({\n                      uri: value,\n                      walletConnectClient\n                    });\n                  } catch {\n                    setErrorConnecting(\"Error creating WalletConnect session\");\n                  }\n                }\n              },\n              placeholder: \"WalletConnect URI\",\n              name: \"wcUri\",\n              emptyErrorMessage: \"Please enter a valid URI\",\n              submitButtonText: \"Connect\"\n            })]\n          }) : _jsxs(_Fragment, {\n            children: [_jsx(Text, {\n              center: true,\n              balance: true,\n              multiline: true,\n              size: \"sm\",\n              children: errorConnecting\n            }), _jsx(Spacer, {\n              y: \"md\"\n            }), _jsx(Container, {\n              flex: \"row\",\n              center: \"x\",\n              animate: \"fadein\",\n              children: _jsxs(Button, {\n                fullWidth: true,\n                variant: \"accent\",\n                onClick: () => setErrorConnecting(false),\n                style: {\n                  gap: spacing.xs,\n                  alignItems: \"center\"\n                },\n                children: [_jsx(ReloadIcon, {\n                  width: iconSize.sm,\n                  height: iconSize.sm\n                }), \"Retry\"]\n              })\n            })]\n          })\n        })]\n      })\n    }), _jsxs(Container, {\n      children: [_jsx(Spacer, {\n        y: \"lg\"\n      }), _jsx(Line, {}), _jsx(Container, {\n        flex: \"row\",\n        center: \"x\",\n        p: \"lg\",\n        children: _jsx(\"a\", {\n          href: \"https://blog.thirdweb.com/p/a62c0ef4-1d8f-424d-95b9-a006e5239849/\",\n          children: _jsx(Button, {\n            variant: \"link\",\n            onClick: () => {},\n            children: \"Where do I find the URI?\"\n          })\n        })\n      })]\n    })]\n  });\n}\n//# sourceMappingURL=WalletConnectReceiverScreen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}