{"ast":null,"code":"import { useQuery } from \"@tanstack/react-query\";\nimport { ethereum } from \"../../../chains/chain-definitions/ethereum.js\";\nimport { resolveAvatar } from \"../../../extensions/ens/resolve-avatar.js\";\nimport { resolveName } from \"../../../extensions/ens/resolve-name.js\";\nimport { shortenAddress } from \"../../../utils/address.js\";\nimport { parseAvatarRecord } from \"../../../utils/ens/avatar.js\";\nimport { getWalletInfo } from \"../../../wallets/__generated__/getWalletInfo.js\";\nimport { isEcosystemWallet } from \"../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { useWalletBalance } from \"../hooks/others/useWalletBalance.js\";\nimport { useSocialProfiles } from \"../social/useSocialProfiles.js\";\n/**\n * Get the ENS name and avatar for an address\n * @param options - the client and address to get the ENS name and avatar for\n * @returns - a query object that resolves to the ENS name\n * @example\n * ```tsx\n * import { useEnsName } from \"thirdweb/react\";\n *\n * const { data: ensName } = useEnsName({\n *  client,\n *  address: \"0x1234...\",\n * });\n * ```\n * @extension ENS\n */\nexport function useEnsName(options) {\n  const {\n    client,\n    address\n  } = options;\n  return useQuery({\n    queryKey: [\"ens-name\", address],\n    enabled: !!address,\n    queryFn: () => resolveName({\n      client,\n      address: address || \"\",\n      resolverChain: ethereum\n    })\n  });\n}\n/**\n * Get the ENS avatar for an ENS name\n * @param options - the client and ENS name to get the avatar for\n * @returns - a query object that resolves to the avatar\n * @example\n * ```tsx\n * import { useEnsAvatar } from \"thirdweb/react\";\n *\n * const { data: ensAvatar } = useEnsAvatar({\n *  client,\n *  ensName: \"my-ens-name.eth\",\n * });\n * ```\n * @extension ENS\n */\nexport function useEnsAvatar(options) {\n  const {\n    client,\n    ensName\n  } = options;\n  return useQuery({\n    queryKey: [\"ens-avatar\", ensName],\n    enabled: !!ensName,\n    queryFn: async () => resolveAvatar({\n      client,\n      name: ensName || \"\"\n    })\n  });\n}\n/**\n * @internal This hook is only being used in our react-native package\n * It can be removed once we migrate the RN UI code to our headless components (AccountProvider, AccountName etc.)\n */\nexport function useConnectedWalletDetails(client, walletChain, activeAccount, displayBalanceToken) {\n  const tokenAddress = walletChain && displayBalanceToken ? displayBalanceToken[Number(walletChain.id)] : undefined;\n  const ensNameQuery = useEnsName({\n    client,\n    address: activeAccount?.address\n  });\n  const ensAvatarQuery = useEnsAvatar({\n    client,\n    ensName: ensNameQuery.data\n  });\n  const socialProfileQuery = useSocialProfiles({\n    client,\n    address: activeAccount?.address\n  });\n  const shortAddress = activeAccount?.address ? shortenAddress(activeAccount.address, 4) : \"\";\n  const balanceQuery = useWalletBalance({\n    chain: walletChain ? walletChain : undefined,\n    tokenAddress,\n    address: activeAccount?.address,\n    client\n  });\n  const addressOrENS = ensNameQuery.data || shortAddress;\n  const pfpUnresolved = socialProfileQuery.data?.filter(p => p.avatar)[0]?.avatar;\n  const {\n    data: pfp\n  } = useQuery({\n    queryKey: [\"ens-avatar\", pfpUnresolved],\n    queryFn: async () => {\n      if (!pfpUnresolved) {\n        return undefined;\n      }\n      return parseAvatarRecord({\n        client,\n        uri: pfpUnresolved\n      });\n    },\n    enabled: !!pfpUnresolved,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false\n  });\n  const name = socialProfileQuery.data?.filter(p => p.name)[0]?.name || addressOrENS;\n  return {\n    socialProfileQuery,\n    ensNameQuery,\n    ensAvatarQuery,\n    addressOrENS,\n    pfp,\n    name,\n    shortAddress,\n    balanceQuery\n  };\n}\n/**\n * Returns the wallet info for the provided wallet id.\n *\n * @example\n * ```tsx\n * import { useWalletInfo } from \"thirdweb/react\";\n *\n * const { data: walletInfo } = useWalletInfo(\"io.metamask\");\n * console.log(\"Walelt name\", walletInfo?.name);\n * ```\n * @wallet\n */\nexport function useWalletInfo(id) {\n  return useQuery({\n    queryKey: [\"wallet-info\", id],\n    queryFn: () => {\n      if (!id) {\n        throw new Error(\"Wallet id is required\");\n      }\n      return getWalletInfo(id, false);\n    },\n    retry: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    enabled: !!id\n  });\n}\n/**\n * Returns the wallet icon for the provided wallet id.\n *\n * @example\n * ```tsx\n * import { useWalletImage } from \"thirdweb/react\";\n *\n * const { data: walletImage } = useWalletImage(\"io.metamask\");\n *\n * return <img src={walletImage} alt=\"MetaMask logo\" />;\n * ```\n *\n * @wallet\n */\nexport function useWalletImage(id) {\n  return useQuery({\n    queryKey: [\"wallet-image\", id],\n    queryFn: () => {\n      if (!id) {\n        throw new Error(\"Wallet id is required\");\n      }\n      return getWalletInfo(id, true);\n    },\n    retry: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    enabled: !!id\n  });\n}\n/**\n * @internal\n */\nexport function hasSponsoredTransactionsEnabled(wallet) {\n  if (!wallet) {\n    return false;\n  }\n  let sponsoredTransactionsEnabled = false;\n  if (wallet && wallet.id === \"smart\") {\n    const options = wallet.getConfig();\n    if (\"sponsorGas\" in options) {\n      sponsoredTransactionsEnabled = options.sponsorGas;\n    }\n    if (\"gasless\" in options) {\n      sponsoredTransactionsEnabled = options.gasless;\n    }\n  }\n  if (wallet && (wallet.id === \"inApp\" || isEcosystemWallet(wallet))) {\n    const options = wallet.getConfig();\n    if (options && \"smartAccount\" in options && options.smartAccount) {\n      const smartOptions = options.smartAccount;\n      if (\"sponsorGas\" in smartOptions) {\n        sponsoredTransactionsEnabled = smartOptions.sponsorGas;\n      }\n      if (\"gasless\" in smartOptions) {\n        sponsoredTransactionsEnabled = smartOptions.gasless;\n      }\n    }\n  }\n  return sponsoredTransactionsEnabled;\n}\n//# sourceMappingURL=wallet.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}