{"ast":null,"code":"import { getTransactionDecorator } from \"../../utils/config.js\";\nimport { addTransactionToStore } from \"../transaction-store.js\";\nimport { toSerializableTransaction } from \"./to-serializable-transaction.js\";\n/**\n * Sends a transaction using the provided account.\n *\n * You can send a transaction with a [prepared contract call](https://portal.thirdweb.com/references/typescript/v5/prepareContractCall), a [prepared transaction](https://portal.thirdweb.com/references/typescript/v5/prepareTransaction), or using a write [Extension](https://portal.thirdweb.com/typescript/v5/extensions/use).\n * @param options - The options for sending the transaction.\n * @returns A promise that resolves to the transaction result.\n * @throws An error if the transaction reverts.\n * @transaction\n * @example\n *\n * ### Using a prepared contract call\n *\n * ```ts\n * import { sendTransaction, getContract, prepareContractCall } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const transaction = prepareContractCall({\n *   contract,\n *   method: \"function transfer(address to, uint256 value)\",\n *   params: [to, value],\n * });\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n * });\n * ```\n *\n * ### Using a write extension\n *\n * ```ts\n * import { sendTransaction, getContract } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n * import { mintTo } from \"thirdweb/extensions/erc721\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const transaction = mintTo({\n *   contract,\n *   to: \"0x...\",\n *   nft: {\n *     name: \"NFT Name\",\n *     description: \"NFT Description\",\n *     image: \"https://example.com/image.png\",\n *   },\n * });\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n * });\n * ```\n *\n * ### Using a prepared transaction\n *\n * ```ts\n * import { sendTransaction, getContract, prepareTransaction } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const transaction = prepareTransaction({\n *   contract,\n *   to: \"0x...\",\n *   value: toWei(\"0.1\"),\n * });\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n * });\n * ```\n *\n * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)\n * ```ts\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n *  gasless: {\n *    provider: \"engine\",\n *    relayerUrl: \"https://thirdweb.engine-***.thirdweb.com/relayer/***\",\n *    relayerForwarderAddress: \"0x...\",\n *  }\n * });\n * ```\n *\n * ### Gasless usage with OpenZeppelin\n * ```ts\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n *  gasless: {\n *    provider: \"openzeppelin\",\n *    relayerUrl: \"https://...\",\n *    relayerForwarderAddress: \"0x...\",\n *  }\n * });\n * ```\n */\nexport async function sendTransaction(options) {\n  let {\n    account,\n    transaction,\n    gasless\n  } = options;\n  const decorator = getTransactionDecorator();\n  if (decorator) {\n    const {\n      account: decoratedAccount,\n      transaction: decoratedTransaction\n    } = await decorator({\n      account,\n      transaction\n    });\n    account = decoratedAccount;\n    transaction = decoratedTransaction;\n  }\n  if (account.onTransactionRequested) {\n    await account.onTransactionRequested(transaction);\n  }\n  // if zksync transaction params are set, send with eip712\n  if (transaction.eip712) {\n    const {\n      sendEip712Transaction\n    } = await import(\"./zksync/send-eip712-transaction.js\");\n    return sendEip712Transaction({\n      account,\n      transaction\n    });\n  }\n  const serializableTransaction = await toSerializableTransaction({\n    transaction: transaction,\n    from: account.address\n  });\n  // branch for gasless transactions\n  if (gasless) {\n    // lazy load the gasless tx function because it's only needed for gasless transactions\n    const {\n      sendGaslessTransaction\n    } = await import(\"./gasless/send-gasless-transaction.js\");\n    return sendGaslessTransaction({\n      account,\n      transaction,\n      serializableTransaction,\n      gasless\n    });\n  }\n  const result = await account.sendTransaction(serializableTransaction);\n  // Store the transaction\n  addTransactionToStore({\n    address: account.address,\n    transactionHash: result.transactionHash,\n    chainId: transaction.chain.id\n  });\n  return {\n    ...result,\n    chain: transaction.chain,\n    client: transaction.client\n  };\n}\n//# sourceMappingURL=send-transaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}