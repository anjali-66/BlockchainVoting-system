{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { CheckCircledIcon } from \"@radix-ui/react-icons\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect, useRef } from \"react\";\nimport { isMobile } from \"../../../../../../../utils/web/isMobile.js\";\nimport { iconSize } from \"../../../../../../core/design-system/index.js\";\nimport { useBuyWithFiatStatus } from \"../../../../../../core/hooks/pay/useBuyWithFiatStatus.js\";\nimport { invalidateWalletBalance } from \"../../../../../../core/providers/invalidateWalletBalance.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Spinner } from \"../../../../components/Spinner.js\";\nimport { StepBar } from \"../../../../components/StepBar.js\";\nimport { Container, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { AccentFailIcon } from \"../../../icons/AccentFailIcon.js\";\nimport { getBuyWithFiatStatusMeta } from \"../pay-transactions/statusMeta.js\";\nimport { OnRampTxDetailsTable } from \"./FiatTxDetailsTable.js\";\n/**\n * Poll for \"Buy with Fiat\" status - when the on-ramp is in progress\n * - Show success screen if swap is not required and on-ramp is completed\n * - Show Failed screen if on-ramp failed\n * - call `onShowSwapFlow` if on-ramp is completed and swap is required\n */\nexport function OnrampStatusScreen(props) {\n  const queryClient = useQueryClient();\n  const {\n    openedWindow,\n    onSuccess\n  } = props;\n  const statusQuery = useBuyWithFiatStatus({\n    intentId: props.intentId,\n    client: props.client\n  });\n  // determine UI status\n  let uiStatus = \"loading\";\n  if (statusQuery.data?.status === \"ON_RAMP_TRANSFER_FAILED\" || statusQuery.data?.status === \"PAYMENT_FAILED\") {\n    uiStatus = \"failed\";\n  } else if (statusQuery.data?.status === \"CRYPTO_SWAP_FALLBACK\") {\n    uiStatus = \"partialSuccess\";\n  } else if (statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\") {\n    uiStatus = \"completed\";\n  }\n  const purchaseCbCalled = useRef(false);\n  useEffect(() => {\n    if (purchaseCbCalled.current || !onSuccess) {\n      return;\n    }\n    if (statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\") {\n      purchaseCbCalled.current = true;\n      onSuccess(statusQuery.data);\n    }\n  }, [onSuccess, statusQuery.data]);\n  // close the onramp popup if onramp is completed\n  useEffect(() => {\n    if (!openedWindow || !statusQuery.data) {\n      return;\n    }\n    if (statusQuery.data?.status === \"CRYPTO_SWAP_REQUIRED\" || statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\") {\n      openedWindow.close();\n    }\n  }, [statusQuery.data, openedWindow]);\n  // invalidate wallet balance when onramp is completed\n  const invalidatedBalance = useRef(false);\n  useEffect(() => {\n    if (!invalidatedBalance.current && statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\") {\n      invalidatedBalance.current = true;\n      invalidateWalletBalance(queryClient);\n    }\n  }, [statusQuery.data, queryClient]);\n  // show swap flow\n  useEffect(() => {\n    if (statusQuery.data?.status === \"CRYPTO_SWAP_REQUIRED\") {\n      props.onShowSwapFlow(statusQuery.data);\n    }\n  }, [statusQuery.data, props.onShowSwapFlow]);\n  return _jsxs(Container, {\n    p: \"lg\",\n    children: [_jsx(ModalHeader, {\n      title: props.title,\n      onBack: props.onBack\n    }), props.hasTwoSteps && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"lg\"\n      }), _jsx(StepBar, {\n        steps: 2,\n        currentStep: 1\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      }), _jsxs(Text, {\n        size: \"xs\",\n        children: [\"Step 1 of 2 - Buying \", props.quote.onRampToken.token.symbol, \" with\", \" \", props.quote.fromCurrencyWithFees.currencySymbol]\n      })]\n    }), _jsx(OnrampStatusScreenUI, {\n      uiStatus: uiStatus,\n      onDone: props.onDone,\n      fiatStatus: statusQuery.data,\n      client: props.client,\n      transactionMode: props.transactionMode,\n      quote: props.quote,\n      isEmbed: props.isEmbed\n    })]\n  });\n}\nfunction OnrampStatusScreenUI(props) {\n  const {\n    uiStatus\n  } = props;\n  const statusMeta = props.fiatStatus ? getBuyWithFiatStatusMeta(props.fiatStatus) : undefined;\n  const fiatStatus = props.fiatStatus && props.fiatStatus.status !== \"NOT_FOUND\" ? props.fiatStatus : undefined;\n  const onRampTokenQuote = props.quote.onRampToken;\n  const txDetails = _jsx(OnRampTxDetailsTable, {\n    client: props.client,\n    token: fiatStatus?.source // source tx is onRamp token\n    ? {\n      chainId: fiatStatus.source.token.chainId,\n      address: fiatStatus.source.token.tokenAddress,\n      symbol: fiatStatus.source.token.symbol || \"\",\n      amount: fiatStatus.source.amount\n    } : {\n      chainId: onRampTokenQuote.token.chainId,\n      address: onRampTokenQuote.token.tokenAddress,\n      symbol: onRampTokenQuote.token.symbol,\n      amount: onRampTokenQuote.amount\n    },\n    fiat: {\n      amount: props.quote.fromCurrencyWithFees.amount,\n      currencySymbol: props.quote.fromCurrencyWithFees.currencySymbol\n    },\n    statusMeta: fiatStatus?.source && statusMeta ? {\n      color: statusMeta?.color,\n      text: statusMeta?.status,\n      txHash: fiatStatus.source.transactionHash\n    } : undefined\n  });\n  return _jsxs(Container, {\n    children: [_jsx(Spacer, {\n      y: \"xl\"\n    }), uiStatus === \"loading\" && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"md\"\n      }), _jsx(Container, {\n        flex: \"row\",\n        center: \"x\",\n        children: _jsx(Spinner, {\n          size: \"xxl\",\n          color: \"accentText\"\n        })\n      }), _jsx(Spacer, {\n        y: \"md\"\n      }), _jsx(Text, {\n        color: \"primaryText\",\n        size: \"lg\",\n        center: true,\n        children: \"Buy Pending\"\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      }), !isMobile() && _jsx(Text, {\n        center: true,\n        children: \"Complete the purchase in popup\"\n      }), _jsx(Spacer, {\n        y: \"xxl\"\n      }), txDetails]\n    }), uiStatus === \"failed\" && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"md\"\n      }), _jsx(Container, {\n        flex: \"row\",\n        center: \"x\",\n        children: _jsx(AccentFailIcon, {\n          size: iconSize[\"3xl\"]\n        })\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      }), _jsx(Text, {\n        color: \"primaryText\",\n        size: \"lg\",\n        center: true,\n        children: \"Transaction Failed\"\n      }), _jsx(Spacer, {\n        y: \"xxl\"\n      }), txDetails]\n    }), uiStatus === \"completed\" && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"md\"\n      }), _jsx(Container, {\n        flex: \"row\",\n        center: \"x\",\n        color: \"success\",\n        children: _jsx(CheckCircledIcon, {\n          width: iconSize[\"3xl\"],\n          height: iconSize[\"3xl\"]\n        })\n      }), _jsx(Spacer, {\n        y: \"md\"\n      }), _jsx(Text, {\n        color: \"primaryText\",\n        size: \"lg\",\n        center: true,\n        children: \"Buy Complete\"\n      }), props.fiatStatus && props.fiatStatus.status !== \"NOT_FOUND\" && _jsxs(_Fragment, {\n        children: [_jsx(Spacer, {\n          y: \"xxl\"\n        }), txDetails, _jsx(Spacer, {\n          y: \"sm\"\n        })]\n      }), !props.isEmbed && _jsx(Button, {\n        variant: \"accent\",\n        fullWidth: true,\n        onClick: props.onDone,\n        children: props.transactionMode ? \"Continue Transaction\" : \"Done\"\n      })]\n    })]\n  });\n}\n//# sourceMappingURL=FiatStatusScreen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}