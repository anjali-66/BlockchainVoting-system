{"ast":null,"code":"import { useQueries, useQuery } from \"@tanstack/react-query\";\nimport { useMemo } from \"react\";\nimport { convertApiChainToChain, getChainMetadata } from \"../../../../chains/utils.js\";\nimport { pLimit } from \"../../../../utils/promise/p-limit.js\";\nexport function useChainName(chain) {\n  // only if we have a chain and no chain name!\n  const isEnabled = !!chain && !chain.name;\n  const chainQuery = useQuery({\n    queryKey: [\"chain\", chain?.id],\n    enabled: isEnabled,\n    retry: false,\n    // 1 hour\n    staleTime: 60 * 60 * 1000,\n    queryFn: async () => {\n      if (!chain) {\n        throw new Error(\"chain is required\");\n      }\n      return convertApiChainToChain(await getChainMetadata(chain));\n    }\n  });\n  return {\n    name: chain?.name ?? chainQuery.data?.name,\n    isLoading: isEnabled && chainQuery.isLoading\n  };\n}\nexport function useChainIconUrl(chain) {\n  // only if we have a chain and no chain icon url!\n  const isEnabled = !!chain && !chain.icon?.url;\n  const chainQuery = useQuery({\n    queryKey: [\"chain\", chain?.id],\n    // only if we have a chain and no chain icon url!\n    enabled: isEnabled,\n    retry: false,\n    // 1 hour\n    staleTime: 60 * 60 * 1000,\n    queryFn: async () => {\n      if (!chain) {\n        throw new Error(\"chain is required\");\n      }\n      return convertApiChainToChain(await getChainMetadata(chain));\n    }\n  });\n  return {\n    url: chain?.icon?.url ?? chainQuery.data?.icon?.url,\n    isLoading: isEnabled && chainQuery.isLoading\n  };\n}\nexport function useChainFaucets(chain) {\n  // only if we have a chain and it might be a testnet and no faucets and its not localhost\n  const isEnabled = !!chain && \"testnet\" in chain && !chain.faucets?.length && chain.id !== 1337;\n  const chainQuery = useQuery({\n    queryKey: [\"chain\", chain?.id],\n    enabled: isEnabled,\n    retry: false,\n    // 1 hour\n    staleTime: 60 * 60 * 1000,\n    queryFn: async () => {\n      if (!chain) {\n        throw new Error(\"chain is required\");\n      }\n      return convertApiChainToChain(await getChainMetadata(chain));\n    }\n  });\n  return {\n    faucets: chain?.faucets ?? chainQuery.data?.faucets ?? [],\n    isLoading: isEnabled && chainQuery.isLoading\n  };\n}\nexport function useChainSymbol(chain) {\n  // only if we have a chain and no chain icon url!\n  const isEnabled = !!chain && !chain.nativeCurrency?.symbol;\n  const chainQuery = useQuery({\n    queryKey: [\"chain\", chain?.id],\n    // only if we have a chain and no chain icon url!\n    enabled: isEnabled,\n    retry: false,\n    // 1 hour\n    staleTime: 60 * 60 * 1000,\n    queryFn: async () => {\n      if (!chain) {\n        throw new Error(\"chain is required\");\n      }\n      return convertApiChainToChain(await getChainMetadata(chain));\n    }\n  });\n  return {\n    symbol: chain?.nativeCurrency?.symbol ?? chainQuery.data?.nativeCurrency?.symbol,\n    isLoading: isEnabled && chainQuery.isLoading\n  };\n}\nexport function useChainExplorers(chain) {\n  // only if we have a chain and it might be a testnet and no faucets and its not localhost\n  const isEnabled = !!chain && !chain.blockExplorers?.length;\n  const chainQuery = useQuery({\n    queryKey: [\"chain\", chain?.id],\n    enabled: isEnabled,\n    retry: false,\n    // 1 hour\n    staleTime: 60 * 60 * 1000,\n    queryFn: async () => {\n      if (!chain) {\n        throw new Error(\"chain is required\");\n      }\n      return convertApiChainToChain(await getChainMetadata(chain));\n    }\n  });\n  return {\n    explorers: chain?.blockExplorers ?? chainQuery.data?.blockExplorers ?? [],\n    isLoading: isEnabled && chainQuery.isLoading\n  };\n}\nfunction getQueryOptions(chain) {\n  return {\n    queryKey: [\"chain\", chain],\n    enabled: !!chain,\n    staleTime: 1000 * 60 * 60 // 1 hour\n  };\n}\n/**\n * Retrieves metadata for a chain such as name, icon, available faucets, block explorers, etc.\n *\n * @param chain - Chain to retrieve metadata for, see [defineChain](https://portal.thirdweb.com/references/typescript/v5/defineChain) for how to create a chain from a chain ID.\n * @returns A React Query result containing the chain metadata\n *\n * @example\n * ```\n * import { useChainMetadata } from \"thirdweb/react\";\n *\n * const { data: chainMetadata } = useChainMetadata(defineChain(11155111));\n *\n * console.log(\"Name:\", chainMetadata.name); // Sepolia\n * console.log(\"Faucets:\", chainMetadata.faucets); // [\"https://thirdweb.com/sepolia/faucet\"]\n * console.log(\"Explorers:\", chainMetadata.explorers); // [\"https://sepolia.etherscan.io/\"]\n * ```\n *\n * @chain\n */\nexport function useChainMetadata(chain) {\n  return useQuery({\n    ...getQueryOptions(chain),\n    queryFn: async () => {\n      if (!chain) {\n        throw new Error(\"chainId is required\");\n      }\n      return getChainMetadata(chain);\n    }\n  });\n}\n/**\n * @param chains - array of `Chains`\n * @param maxConcurrency - maximum number of concurrent requests to make\n * @internal\n */\nexport function useChainsQuery(chains, maxConcurrency) {\n  const queryList = useMemo(() => {\n    const limit = pLimit(maxConcurrency);\n    return chains.map(chain => {\n      return {\n        ...getQueryOptions(chain),\n        queryFn: () => limit(() => getChainMetadata(chain))\n      };\n    });\n  }, [chains, maxConcurrency]);\n  return useQueries({\n    queries: queryList\n  });\n}\n//# sourceMappingURL=useChainQuery.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}