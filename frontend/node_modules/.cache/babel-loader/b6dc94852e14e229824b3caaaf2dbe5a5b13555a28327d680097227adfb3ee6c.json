{"ast":null,"code":"import { signLoginPayload } from \"../../../../auth/core/sign-login-payload.js\";\nimport { getClientFetch } from \"../../../../utils/fetch.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nimport { getLoginCallbackUrl, getLoginUrl } from \"./getLoginPath.js\";\n/**\n * @internal\n */\nexport async function siweAuthenticate(args) {\n  const {\n    wallet,\n    chain\n  } = args;\n  // only connect if the wallet doesn't already have an account\n  const account = wallet.getAccount() || (await wallet.connect({\n    client: args.client\n  }));\n  const clientFetch = getClientFetch(args.client, args.ecosystem);\n  const payload = await (async () => {\n    const path = getLoginUrl({\n      authOption: \"wallet\",\n      client: args.client,\n      ecosystem: args.ecosystem\n    });\n    const res = await clientFetch(`${path}&address=${account.address}&chainId=${chain.id}`);\n    if (!res.ok) throw new Error(\"Failed to generate SIWE login payload\");\n    return await res.json();\n  })();\n  const {\n    signature\n  } = await signLoginPayload({\n    payload,\n    account\n  });\n  const authResult = await (async () => {\n    const path = getLoginCallbackUrl({\n      authOption: \"wallet\",\n      client: args.client,\n      ecosystem: args.ecosystem\n    });\n    const res = await clientFetch(`${path}&signature=${signature}&payload=${encodeURIComponent(payload)}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: stringify({\n        signature,\n        payload\n      })\n    });\n    if (!res.ok) throw new Error(\"Failed to verify SIWE signature\");\n    return await res.json();\n  })();\n  return authResult;\n}\n//# sourceMappingURL=siwe.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}