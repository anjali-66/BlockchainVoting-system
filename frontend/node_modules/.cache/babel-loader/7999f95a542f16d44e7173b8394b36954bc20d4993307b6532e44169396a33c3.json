{"ast":null,"code":"import { getClaimParams } from \"../../../../utils/extensions/drops/get-claim-params.js\";\nimport { isGetContractMetadataSupported } from \"../../../common/read/getContractMetadata.js\";\nimport { claim, isClaimSupported } from \"../../__generated__/IDrop/write/claim.js\";\nimport { isClaimConditionSupported } from \"../../__generated__/IDropSinglePhase/read/claimCondition.js\";\nimport { isGetActiveClaimConditionSupported } from \"../read/getActiveClaimCondition.js\";\n/**\n * Claim ERC721 NFTs to a specified address\n * @param options - The options for the transaction\n * @extension ERC721\n * @example\n *\n * ### Basic usage\n * ```ts\n * import { claimTo } from \"thirdweb/extensions/erc721\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const transaction = claimTo({\n *   contract,\n *   to: \"0x...\",\n *   quantity: 1n,\n * });\n *\n * await sendTransaction({ transaction, account });\n * ```\n *\n * ### For Drops with allowlists\n * You need to specify the claimer address as the `from` param to avoid any issue with the allowlist\n * ```ts\n * const transaction = claimTo({\n *   contract,\n *   to: \"0x...\",\n *   quantity: 1n,\n *   from: \"0x...\", // address of the one claiming\n * });\n * ```\n * @throws If no claim condition is set\n * @returns A promise that resolves with the submitted transaction hash.\n */\nexport function claimTo(options) {\n  return claim({\n    contract: options.contract,\n    asyncParams: () => getClaimParams({\n      type: \"erc721\",\n      contract: options.contract,\n      to: options.to,\n      quantity: options.quantity,\n      from: options.from,\n      singlePhaseDrop: options.singlePhaseDrop\n    })\n  });\n}\n/**\n * Checks if the `claimTo` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `claimTo` method is supported.\n * @extension ERC721\n * @example\n * ```ts\n * import { isClaimToSupported } from \"thirdweb/extensions/erc721\";\n *\n * const supported = isClaimToSupported([\"0x...\"]);\n * ```\n */\nexport function isClaimToSupported(availableSelectors) {\n  return isClaimSupported(availableSelectors) &&\n  // requires contractMetadata for claimer proofs\n  isGetContractMetadataSupported(availableSelectors) && (\n  // required to check if the contract supports the getActiveClaimCondition method\n  isGetActiveClaimConditionSupported(availableSelectors) || isClaimConditionSupported(availableSelectors));\n}\n//# sourceMappingURL=claimTo.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}