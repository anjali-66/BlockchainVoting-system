{"ast":null,"code":"import * as Authorization from './Authorization.js';\nimport * as Hex from './Hex.js';\nimport * as Signature from './Signature.js';\n/** Type to RPC Type mapping. */\nexport const toRpcType = {\n  legacy: '0x0',\n  eip2930: '0x1',\n  eip1559: '0x2',\n  eip4844: '0x3',\n  eip7702: '0x4'\n};\n/** RPC Type to Type mapping. */\nexport const fromRpcType = {\n  '0x0': 'legacy',\n  '0x1': 'eip2930',\n  '0x2': 'eip1559',\n  '0x3': 'eip4844',\n  '0x4': 'eip7702'\n};\n/**\n * Converts an {@link ox#Transaction.Rpc} to an {@link ox#Transaction.Transaction}.\n *\n * @example\n * ```ts twoslash\n * import { Transaction } from 'ox'\n *\n * const transaction = Transaction.fromRpc({\n *   hash: '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   nonce: '0x357',\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: '0x12f296f',\n *   transactionIndex: '0x2',\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   value: '0x9b6e64a8ec60000',\n *   gas: '0x43f5d',\n *   maxFeePerGas: '0x2ca6ae494',\n *   maxPriorityFeePerGas: '0x41cc3c0',\n *   input:\n *     '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006643504700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000019124bb5ae978c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000190240001b9872b',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n *   chainId: '0x1',\n *   accessList: [],\n *   type: '0x2',\n * })\n * ```\n *\n * @param transaction - The RPC transaction to convert.\n * @returns An instantiated {@link ox#Transaction.Transaction}.\n */\nexport function fromRpc(transaction, _options = {}) {\n  if (!transaction) return null;\n  const signature = Signature.extract(transaction);\n  const transaction_ = {\n    ...transaction,\n    ...signature\n  };\n  transaction_.blockNumber = transaction.blockNumber ? BigInt(transaction.blockNumber) : null;\n  transaction_.data = transaction.input;\n  transaction_.gas = BigInt(transaction.gas ?? 0n);\n  transaction_.nonce = BigInt(transaction.nonce ?? 0n);\n  transaction_.transactionIndex = transaction.transactionIndex ? Number(transaction.transactionIndex) : null;\n  transaction_.value = BigInt(transaction.value ?? 0n);\n  if (transaction.authorizationList) transaction_.authorizationList = Authorization.fromRpcList(transaction.authorizationList);\n  if (transaction.chainId) transaction_.chainId = Number(transaction.chainId);\n  if (transaction.gasPrice) transaction_.gasPrice = BigInt(transaction.gasPrice);\n  if (transaction.maxFeePerBlobGas) transaction_.maxFeePerBlobGas = BigInt(transaction.maxFeePerBlobGas);\n  if (transaction.maxFeePerGas) transaction_.maxFeePerGas = BigInt(transaction.maxFeePerGas);\n  if (transaction.maxPriorityFeePerGas) transaction_.maxPriorityFeePerGas = BigInt(transaction.maxPriorityFeePerGas);\n  if (transaction.type) transaction_.type = fromRpcType[transaction.type] ?? transaction.type;\n  if (signature) transaction_.v = Signature.yParityToV(signature.yParity);\n  return transaction_;\n}\n/**\n * Converts an {@link ox#Transaction.Transaction} to an {@link ox#Transaction.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Transaction } from 'ox'\n *\n * const transaction = Transaction.toRpc({\n *   accessList: [],\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: 19868015n,\n *   chainId: 1,\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   gas: 278365n,\n *   hash: '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   input:\n *     '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006643504700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000019124bb5ae978c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000190240001b9872b',\n *   maxFeePerGas: 11985937556n,\n *   maxPriorityFeePerGas: 68993984n,\n *   nonce: 855n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   transactionIndex: 2,\n *   type: 'eip1559',\n *   v: 27,\n *   value: 700000000000000000n,\n *   yParity: 0,\n * })\n * ```\n *\n * @param transaction - The transaction to convert.\n * @returns An RPC-formatted transaction.\n */\nexport function toRpc(transaction, _options) {\n  const rpc = {};\n  rpc.blockHash = transaction.blockHash;\n  rpc.blockNumber = typeof transaction.blockNumber === 'bigint' ? Hex.fromNumber(transaction.blockNumber) : null;\n  rpc.from = transaction.from;\n  rpc.gas = Hex.fromNumber(transaction.gas ?? 0n);\n  rpc.hash = transaction.hash;\n  rpc.input = transaction.input;\n  rpc.nonce = Hex.fromNumber(transaction.nonce ?? 0n);\n  rpc.to = transaction.to;\n  rpc.transactionIndex = transaction.transactionIndex ? Hex.fromNumber(transaction.transactionIndex) : null;\n  rpc.type = toRpcType[transaction.type] ?? transaction.type;\n  rpc.value = Hex.fromNumber(transaction.value ?? 0n);\n  if (transaction.accessList) rpc.accessList = transaction.accessList;\n  if (transaction.authorizationList) rpc.authorizationList = Authorization.toRpcList(transaction.authorizationList);\n  if (transaction.blobVersionedHashes) rpc.blobVersionedHashes = transaction.blobVersionedHashes;\n  if (transaction.chainId) rpc.chainId = Hex.fromNumber(transaction.chainId);\n  if (typeof transaction.gasPrice === 'bigint') rpc.gasPrice = Hex.fromNumber(transaction.gasPrice);\n  if (typeof transaction.maxFeePerBlobGas === 'bigint') rpc.maxFeePerBlobGas = Hex.fromNumber(transaction.maxFeePerBlobGas);\n  if (typeof transaction.maxFeePerGas === 'bigint') rpc.maxFeePerGas = Hex.fromNumber(transaction.maxFeePerGas);\n  if (typeof transaction.maxPriorityFeePerGas === 'bigint') rpc.maxPriorityFeePerGas = Hex.fromNumber(transaction.maxPriorityFeePerGas);\n  if (typeof transaction.r === 'bigint') rpc.r = Hex.fromNumber(transaction.r, {\n    size: 32\n  });\n  if (typeof transaction.s === 'bigint') rpc.s = Hex.fromNumber(transaction.s, {\n    size: 32\n  });\n  if (typeof transaction.v === 'number') rpc.v = Hex.fromNumber(transaction.v, {\n    size: 1\n  });\n  if (typeof transaction.yParity === 'number') rpc.yParity = transaction.yParity === 0 ? '0x0' : '0x1';\n  return rpc;\n}\n//# sourceMappingURL=Transaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}