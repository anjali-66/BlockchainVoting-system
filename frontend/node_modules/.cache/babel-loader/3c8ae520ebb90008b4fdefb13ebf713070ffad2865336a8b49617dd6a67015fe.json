{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { wait } from \"../../../../utils/promise/wait.js\";\nimport { formatWalletConnectUrl } from \"../../../../utils/url.js\";\nimport { isAndroid, isIOS, isMobile } from \"../../../../utils/web/isMobile.js\";\nimport { openWindow } from \"../../../../utils/web/openWindow.js\";\nimport { ConnectingScreen } from \"./ConnectingScreen.js\";\nimport { ScanScreen } from \"./ScanScreen.js\";\n/**\n * QR Scan UI for connecting a specific wallet on desktop.\n * shows a \"Connecting\" screen and opens the app on mobile.\n * @internal\n */\nexport const WalletConnectConnection = props => {\n  const {\n    onBack,\n    onGetStarted,\n    wallet,\n    walletInfo,\n    locale,\n    done\n  } = props;\n  const [qrCodeUri, setQrCodeUri] = useState();\n  const [errorConnecting, setErrorConnecting] = useState(false);\n  const connect = useCallback(() => {\n    setErrorConnecting(false);\n    wallet.connect({\n      chain: props.chain,\n      client: props.client,\n      walletConnect: {\n        projectId: props.walletConnect?.projectId,\n        showQrModal: false,\n        onDisplayUri(uri) {\n          const preferNative = walletInfo.mobile.native || walletInfo.mobile.universal;\n          try {\n            if (isMobile()) {\n              if (isAndroid()) {\n                if (preferNative) {\n                  openWindow(formatWalletConnectUrl(preferNative, uri).redirect);\n                }\n              } else if (isIOS()) {\n                if (preferNative) {\n                  openWindow(formatWalletConnectUrl(preferNative, uri).redirect);\n                }\n              } else {\n                const preferUniversal = walletInfo.mobile.universal || walletInfo.mobile.native;\n                if (preferUniversal) {\n                  openWindow(formatWalletConnectUrl(preferUniversal, uri).redirect);\n                }\n              }\n            } else {\n              setQrCodeUri(uri);\n            }\n          } catch {\n            setErrorConnecting(true);\n          }\n        },\n        optionalChains: props.chains\n      }\n    }).then(() => {\n      done();\n    }).catch(e => {\n      setErrorConnecting(true);\n      console.error(e);\n    });\n  }, [props.walletConnect, walletInfo.mobile.native, walletInfo.mobile.universal, wallet, props.chain, props.client, props.chains, done]);\n  const scanStarted = useRef(false);\n  useEffect(() => {\n    if (scanStarted.current) {\n      return;\n    }\n    scanStarted.current = true;\n    connect();\n  }, [connect]);\n  if (isMobile()) {\n    return _jsx(ConnectingScreen, {\n      locale: {\n        getStartedLink: locale.getStartedLink,\n        instruction: locale.connectionScreen.instruction,\n        tryAgain: locale.connectionScreen.retry,\n        inProgress: locale.connectionScreen.inProgress,\n        failed: locale.connectionScreen.failed\n      },\n      onBack: onBack,\n      walletName: walletInfo.name,\n      walletId: wallet.id,\n      errorConnecting: errorConnecting,\n      onRetry: connect,\n      onGetStarted: onGetStarted,\n      client: props.client,\n      size: props.size\n    });\n  }\n  return _jsx(ScanScreen, {\n    qrScanInstruction: locale.scanScreen.instruction,\n    onBack: onBack,\n    onGetStarted: onGetStarted,\n    qrCodeUri: qrCodeUri,\n    walletName: walletInfo.name,\n    walletId: wallet.id,\n    getStartedLink: locale.getStartedLink,\n    error: errorConnecting,\n    onRetry: connect,\n    client: props.client,\n    connectModalSize: props.size\n  });\n};\n/**\n * QR Scan UI for connecting a specific wallet on desktop.\n * shows a \"Connecting\" screen and opens the app on mobile.\n * @internal\n */\nexport const WalletConnectStandaloneConnection = props => {\n  const {\n    onBack,\n    wallet,\n    walletInfo,\n    locale,\n    done,\n    setModalVisibility\n  } = props;\n  const [qrCodeUri, setQrCodeUri] = useState();\n  const [errorConnecting, setErrorConnecting] = useState(false);\n  const connect = useCallback(() => {\n    setErrorConnecting(false);\n    if (isMobile()) {\n      let wcModalClosed = false;\n      // show spinner while the wallet connect modal loads in the background\n      wait(2000).then(() => {\n        // don't hide the modal if wc closed already\n        if (!wcModalClosed) {\n          setModalVisibility(false);\n        }\n      });\n      wallet.connect({\n        chain: props.chain,\n        client: props.client,\n        projectId: props.walletConnect?.projectId,\n        showQrModal: true,\n        optionalChains: props.chains\n      }).then(() => {\n        wcModalClosed = true;\n        setModalVisibility(true);\n        done();\n      }).catch(e => {\n        wcModalClosed = true;\n        setModalVisibility(true);\n        setErrorConnecting(true);\n        console.error(e);\n      });\n    } else {\n      wallet.connect({\n        chain: props.chain,\n        client: props.client,\n        projectId: props.walletConnect?.projectId,\n        showQrModal: false,\n        onDisplayUri(uri) {\n          const platformUris = {\n            ios: walletInfo.mobile.native || \"\",\n            android: walletInfo.mobile.universal || \"\",\n            other: walletInfo.mobile.universal || \"\"\n          };\n          setQrCodeUri(uri);\n          if (isMobile()) {\n            if (isAndroid()) {\n              openWindow(`${platformUris.android}wc?uri=${encodeURIComponent(uri)}`);\n            } else if (isIOS()) {\n              openWindow(`${platformUris.ios}wc?uri=${encodeURIComponent(uri)}`);\n            } else {\n              openWindow(`${platformUris.other}wc?uri=${encodeURIComponent(uri)}`);\n            }\n          }\n        },\n        optionalChains: props.chains\n      }).then(() => {\n        done();\n      }).catch(e => {\n        setErrorConnecting(true);\n        console.error(e);\n      });\n    }\n  }, [props.walletConnect, walletInfo.mobile.native, walletInfo.mobile.universal, wallet, props.chain, props.client, props.chains, done, setModalVisibility]);\n  const scanStarted = useRef(false);\n  useEffect(() => {\n    if (scanStarted.current) {\n      return;\n    }\n    scanStarted.current = true;\n    connect();\n  }, [connect]);\n  if (isMobile()) {\n    return _jsx(ConnectingScreen, {\n      locale: {\n        getStartedLink: locale.getStartedLink,\n        instruction: locale.connectionScreen.instruction,\n        tryAgain: locale.connectionScreen.retry,\n        inProgress: locale.connectionScreen.inProgress,\n        failed: locale.connectionScreen.failed\n      },\n      onBack: onBack,\n      walletName: walletInfo.name,\n      walletId: wallet.id,\n      errorConnecting: errorConnecting,\n      onRetry: connect,\n      client: props.client,\n      size: props.size\n    });\n  }\n  return _jsx(ScanScreen, {\n    qrScanInstruction: locale.scanScreen.instruction,\n    onBack: onBack,\n    qrCodeUri: qrCodeUri,\n    walletName: walletInfo.name,\n    walletId: wallet.id,\n    getStartedLink: locale.getStartedLink,\n    error: errorConnecting,\n    onRetry: connect,\n    client: props.client,\n    connectModalSize: props.size\n  });\n};\n//# sourceMappingURL=WalletConnectConnection.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}