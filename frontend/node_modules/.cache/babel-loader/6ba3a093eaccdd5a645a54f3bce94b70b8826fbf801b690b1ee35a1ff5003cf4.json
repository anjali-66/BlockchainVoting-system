{"ast":null,"code":"import { createStore } from \"mipd\";\nimport { isBrowser } from \"../../utils/platform.js\";\nimport { METAMASK } from \"../constants.js\";\n// if we're in the browser -> create the store once immediately\nconst mipdStore = /* @__PURE__ */(() => isBrowser() ? createStore() : undefined)();\n/**\n * Get Injected Provider for given wallet by passing a wallet ID (rdns) using [EIP-6963](https://eips.ethereum.org/EIPS/eip-6963) Provider Discovery.\n * @param walletId - The Wallet Id (rdns) to check.\n * @example\n * ```ts\n * import { injectedProvider } from \"thirdweb/wallets\";\n *\n * const metamaskProvider = injectedProvider(\"io.metamask\");\n *\n * if (metamaskProvider) {\n *  console.log(\"Metamask is installed\");\n * }\n * ```\n * @returns The details of the Injected Provider if it exists. `undefined` otherwise.\n * @walletUtils\n */\nexport function injectedProvider(walletId) {\n  const injectedProviderDetail = getInstalledWalletProviders().find(p => p.info.rdns === walletId);\n  return injectedProviderDetail?.provider;\n}\n/**\n * Get Injected Provider Details for given wallet ID (rdns)\n * @internal\n */\nfunction getMIPDStore() {\n  if (!mipdStore) {\n    return undefined;\n  }\n  return mipdStore;\n}\nexport function getInstalledWalletProviders() {\n  const providers = getMIPDStore()?.getProviders() || [];\n  for (const provider of providers) {\n    // Map io.metamask.mobile to io.metamask rdns to fix double entry issue in MetaMask mobile browser\n    if (provider.info.rdns === \"io.metamask.mobile\") {\n      provider.info.rdns = METAMASK;\n      break;\n    }\n  }\n  return providers;\n}\n//# sourceMappingURL=mipdStore.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}