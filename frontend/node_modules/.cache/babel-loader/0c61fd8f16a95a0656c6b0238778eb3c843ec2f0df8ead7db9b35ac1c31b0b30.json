{"ast":null,"code":"import { getCachedChain } from \"../../chains/utils.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { approve } from \"../../extensions/erc20/write/approve.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { stringify } from \"../../utils/json.js\";\nimport { getPayBuyWithCryptoQuoteEndpoint } from \"../utils/definitions.js\";\n/**\n * Get a quote of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) to buy any given token with crypto.\n * This quote contains the information about the swap such as token amounts, processing fees, estimated time etc.\n *\n * Once you have the quote, you can use `prepareTransaction` and prepare the transaction for submission.\n * @param params - object of type [`GetBuyWithCryptoQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithCryptoQuoteParams)\n * @returns Object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @example\n *\n * ```ts\n * import { getBuyWithCryptoQuote } from \"thirdweb/pay\";\n *\n * const quote = await getBuyWithCryptoQuote({\n *  client,\n *  fromAddress: \"0x...\", // wallet address\n *  fromChainId: 137, // chain id of the source token\n *  fromTokenAddress: \"0x...\", // token address of the source token\n *  fromAmount: \"10\", // amount of source token to swap\n *  // optionally, you can use `toAmount` instead if you only want a certain amount of destination token\n *  toChainId: 10, // chain id of the destination token\n *  toTokenAddress: \"0x...\", // token address of the destination token\n *  toAddress: \"0x...\", // optional: send the tokens to a different address\n *  maxSlippageBPS: 50, // optional: max 0.5% slippage\n * });\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithCryptoQuote(params) {\n  try {\n    const clientFetch = getClientFetch(params.client);\n    const response = await clientFetch(getPayBuyWithCryptoQuoteEndpoint(), {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: stringify({\n        fromAddress: params.fromAddress,\n        toAddress: params.toAddress,\n        fromChainId: params.fromChainId.toString(),\n        fromTokenAddress: params.fromTokenAddress,\n        toChainId: params.toChainId.toString(),\n        toTokenAddress: params.toTokenAddress,\n        fromAmount: params.fromAmount,\n        toAmount: params.toAmount,\n        maxSlippageBPS: params.maxSlippageBPS,\n        intentId: params.intentId,\n        purchaseData: params.purchaseData\n      })\n    });\n    // Assuming the response directly matches the SwapResponse interface\n    if (!response.ok) {\n      const errorObj = await response.json();\n      if (errorObj && \"error\" in errorObj) {\n        throw errorObj;\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = (await response.json()).result;\n    const swapRoute = {\n      transactionRequest: {\n        chain: getCachedChain(data.transactionRequest.chainId),\n        client: params.client,\n        data: data.transactionRequest.data,\n        to: data.transactionRequest.to,\n        value: BigInt(data.transactionRequest.value),\n        gas: BigInt(data.transactionRequest.gasLimit),\n        gasPrice: BigInt(data.transactionRequest.gasPrice)\n      },\n      approval: data.approval ? approve({\n        contract: getContract({\n          client: params.client,\n          address: data.approval.tokenAddress,\n          chain: getCachedChain(data.approval.chainId)\n        }),\n        spender: data.approval?.spenderAddress,\n        amountWei: BigInt(data.approval.amountWei)\n      }) : undefined,\n      swapDetails: {\n        fromAddress: data.fromAddress,\n        toAddress: data.toAddress,\n        fromToken: data.fromToken,\n        toToken: data.toToken,\n        fromAmount: data.fromAmount,\n        fromAmountWei: data.fromAmountWei,\n        toAmountMinWei: data.toAmountMinWei,\n        toAmountMin: data.toAmountMin,\n        toAmountWei: data.toAmountWei,\n        toAmount: data.toAmount,\n        estimated: data.estimated,\n        maxSlippageBPS: data.maxSlippageBPS\n      },\n      paymentTokens: data.paymentTokens,\n      processingFees: data.processingFees,\n      client: params.client\n    };\n    return swapRoute;\n  } catch (error) {\n    console.error(\"Error getting buy with crypto quote\", error);\n    throw error;\n  }\n}\n//# sourceMappingURL=getQuote.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}