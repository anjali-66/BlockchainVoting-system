{"ast":null,"code":"import { queryOptions as defineQuery, useQuery } from \"@tanstack/react-query\";\nimport { readContract } from \"../../../../transaction/read-contract.js\";\nimport { getFunctionId } from \"../../../../utils/function-id.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nexport function useReadContract(extensionOrOptions, options) {\n  // extension case\n  if (typeof extensionOrOptions === \"function\") {\n    if (!options) {\n      throw new Error(`Missing second argument for \"useReadContract(<extension>, <options>)\" hook.`);\n    }\n    const {\n      queryOptions,\n      contract,\n      ...params\n    } = options;\n    const query = defineQuery({\n      queryKey: [\"readContract\", contract.chain.id, contract.address, getFunctionId(extensionOrOptions), stringify(params)],\n      // @ts-expect-error - TODO: clean up the type issues here\n      queryFn: () => extensionOrOptions({\n        ...params,\n        contract\n      }),\n      ...queryOptions\n    });\n    // TODO - FIX LATER\n    // biome-ignore lint/correctness/useHookAtTopLevel: <explanation>\n    return useQuery(query);\n  }\n  // raw tx case\n  if (\"method\" in extensionOrOptions) {\n    const {\n      queryOptions,\n      ...tx\n    } = extensionOrOptions;\n    const query = defineQuery({\n      queryKey: [\"readContract\", tx.contract.chain.id, tx.contract.address, tx.method, stringify(tx.params)],\n      queryFn: () => readContract(extensionOrOptions),\n      ...queryOptions\n    });\n    // TODO - FIX LATER\n    // biome-ignore lint/correctness/useHookAtTopLevel: <explanation>\n    return useQuery(query);\n  }\n  throw new Error(`Invalid \"useReadContract\" options. Expected either a read extension or a transaction object.`);\n}\n//# sourceMappingURL=useReadContract.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}