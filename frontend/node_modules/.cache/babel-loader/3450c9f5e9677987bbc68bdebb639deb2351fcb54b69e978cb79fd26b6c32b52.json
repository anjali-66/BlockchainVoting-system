{"ast":null,"code":"import { isOpStackChain } from \"../../chains/constants.js\";\nimport { getDefaultGasOverrides } from \"../../gas/fee-data.js\";\nimport { resolvePromisedValue } from \"../../utils/promise/resolve-promised-value.js\";\nimport { toEther } from \"../../utils/units.js\";\nimport { estimateGas } from \"./estimate-gas.js\";\n/**\n * Estimate the gas cost of a transaction in ether and wei.\n * @example\n * ```ts\n * import { estimateGasCost } from \"thirdweb\";\n *\n * const gasCost = await estimateGasCost({ transaction });\n * ```\n * @transaction\n */\nexport async function estimateGasCost(options) {\n  const {\n    transaction\n  } = options;\n  const from = options.from ?? options.account?.address ?? undefined;\n  const gasLimit = (await resolvePromisedValue(transaction.gas)) || (await estimateGas({\n    transaction,\n    from\n  }));\n  const fees = await getDefaultGasOverrides(transaction.client, transaction.chain);\n  const gasPrice = fees.maxFeePerGas || fees.gasPrice;\n  if (!gasPrice) {\n    throw new Error(`Unable to determine gas price for chain ${transaction.chain.id}`);\n  }\n  let l1Fee;\n  if (isOpStackChain(transaction.chain)) {\n    const {\n      estimateL1Fee\n    } = await import(\"../../gas/estimate-l1-fee.js\");\n    l1Fee = await estimateL1Fee({\n      transaction\n    });\n  } else {\n    l1Fee = 0n;\n  }\n  const wei = gasLimit * gasPrice + l1Fee;\n  return {\n    ether: toEther(wei),\n    wei\n  };\n}\n//# sourceMappingURL=estimate-gas-cost.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}