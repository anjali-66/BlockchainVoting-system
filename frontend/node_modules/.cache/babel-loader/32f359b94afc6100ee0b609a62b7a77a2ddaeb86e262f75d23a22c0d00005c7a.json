{"ast":null,"code":"import { getThirdwebBaseUrl } from \"../../utils/domains.js\";\nimport { withCache } from \"../../utils/promise/withCache.js\";\n/**\n * Retrieves the specified auth options for a given ecosystem wallet, if any.\n * @param walletId The ecosystem wallet ID.\n * @returns {AuthOption[] | undefined} The auth options for the ecosystem wallet.\n * @internal\n */\nexport async function getEcosystemInfo(walletId) {\n  return withCache(async () => {\n    const res = await fetch(`${getThirdwebBaseUrl(\"inAppWallet\")}/api/2024-05-05/ecosystem-wallet`, {\n      headers: {\n        \"x-ecosystem-id\": walletId\n      }\n    });\n    const data = await res.json();\n    if (!data || data.code === \"UNAUTHORIZED\") {\n      throw new Error(data.message || `Could not find ecosystem wallet with id ${walletId}, please check your ecosystem wallet configuration.`);\n    }\n    // siwe is the auth option in the backend, but we want to use wallet as the auth option in the frontend\n    if (data.authOptions?.includes(\"siwe\")) {\n      data.authOptions = data.authOptions.filter(o => o !== \"siwe\");\n      data.authOptions.push(\"wallet\");\n    }\n    return data;\n  }, {\n    cacheKey: `ecosystem-wallet-options-${walletId}`,\n    cacheTime: 1000 * 60 * 5 // 5 mins\n  });\n}\n//# sourceMappingURL=get-ecosystem-wallet-auth-options.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}