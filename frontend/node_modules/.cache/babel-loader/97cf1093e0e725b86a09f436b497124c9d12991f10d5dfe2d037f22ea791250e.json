{"ast":null,"code":"var _jsxFileName = \"/Users/sharmaanjali/blockchain-voting-system/frontend/src/components/Votingsystem.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import abi from '../abi/VotingSystem.json';\n\n// const VotingSystem = ({ provider, account }) => {\n//   const [contract, setContract] = useState(null);\n//   const [polls, setPolls] = useState([]);\n//   const [newPoll, setNewPoll] = useState({ title: '', options: ['', ''], duration: 60 });\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const contractInstance = new ethers.Contract(\n//         \"0x002A13DF3bB8Ce7D7143bE17223F8893e2152c29\",\n//         abi,\n//         provider\n//       );\n//       setContract(contractInstance);\n//     }\n//   }, [provider]);\n\n//   const createPoll = async () => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.createPoll(\n//         newPoll.title,\n//         newPoll.options.filter(opt => opt !== ''),\n//         newPoll.duration\n//       );\n//       await tx.wait();\n\n//       setNewPoll({ title: '', options: ['', ''], duration: 60 });\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error creating poll:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const castVote = async (pollId, optionIndex) => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error voting:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPolls = async () => {\n//     if (!contract) return;\n//     try {\n//       const pollCount = await contract.pollCount();\n//       const pollsData = [];\n//       for (let i = 0; i < pollCount; i++) {\n//         const details = await contract.getPollDetails(i);\n//         const results = await contract.getPollResults(i);\n//         pollsData.push({ ...details, results });\n//       }\n//       setPolls(pollsData);\n//     } catch (error) {\n//       console.error('Error fetching polls:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPolls();\n//   }, [contract]);\n\n//   return (\n//     <div className=\"max-w-2xl mx-auto p-4\">\n//       <div className=\"mb-8 bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Create New Poll</h2>\n//         <input\n//           type=\"text\"\n//           value={newPoll.title}\n//           onChange={(e) => setNewPoll({ ...newPoll, title: e.target.value })}\n//           placeholder=\"Poll Title\"\n//           className=\"w-full p-2 mb-4 border rounded\"\n//         />\n//         {newPoll.options.map((option, index) => (\n//           <input\n//             key={index}\n//             type=\"text\"\n//             value={option}\n//             onChange={(e) => {\n//               const newOptions = [...newPoll.options];\n//               newOptions[index] = e.target.value;\n//               setNewPoll({ ...newPoll, options: newOptions });\n//             }}\n//             placeholder={`Option ${index + 1}`}\n//             className=\"w-full p-2 mb-2 border rounded\"\n//           />\n//         ))}\n//         <button\n//           onClick={() => setNewPoll({ ...newPoll, options: [...newPoll.options, ''] })}\n//           className=\"bg-gray-500 text-white px-4 py-2 rounded mr-2\"\n//         >\n//           Add Option\n//         </button>\n//         <button\n//           onClick={createPoll}\n//           disabled={loading}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//         >\n//           Create Poll\n//         </button>\n//       </div>\n\n//       <div className=\"bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Active Polls</h2>\n//         {polls.map((poll, index) => (\n//           <div key={index} className=\"border-b py-4\">\n//             <h3 className=\"font-bold\">{poll.title}</h3>\n//             <div className=\"mt-2\">\n//               {poll.options.map((option, optIndex) => (\n//                 <button\n//                   key={optIndex}\n//                   onClick={() => castVote(poll.pollId, optIndex)}\n//                   className=\"bg-blue-100 hover:bg-blue-200 px-4 py-2 rounded mr-2 mb-2\"\n//                 >\n//                   {option} ({poll.results[optIndex].toString()})\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VotingSystem;\n\n//consists all the function to interact with the smart contract\n// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n\n// const SmartContractInterface = ({ contractAddress, abi }) => {\n//   const [pollTitle, setPollTitle] = useState('');\n//   const [pollOptions, setPollOptions] = useState([]);\n//   const [pollDuration, setPollDuration] = useState('');\n//   const [pollId, setPollId] = useState('');\n//   const [optionIndex, setOptionIndex] = useState('');\n//   const [pollDetails, setPollDetails] = useState(null);\n//   const [pollResults, setPollResults] = useState(null);\n//   const [allPolls, setAllPolls] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const provider = new ethers.BrowserProvider(window.ethereum);\n//   const [contract, setContract] = useState(null);\n\n//   useEffect(() => {\n//     if (contractAddress && abi) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, abi, signer));\n//     } else {\n//       console.error(\"Invalid contractAddress or ABI\");\n//     }\n//   }, [contractAddress, abi]);\n\n//   useEffect(() => {\n//     if (contract) fetchAllPolls();\n//   }, [contract]);\n\n//   const createPoll = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.createPoll(pollTitle, pollOptions.filter(opt => opt), pollDuration);\n//       await tx.wait();\n//       alert('Poll created successfully!');\n//       fetchAllPolls();\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error creating poll');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const vote = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       alert('Vote cast successfully!');\n//       fetchPollResults(pollId);\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error casting vote');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollDetails = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll details...\");\n//       const details = await contract.getPollDetails(id || pollId);\n//       console.log(\"Poll details:\", details);\n//       setPollDetails(details);\n//     } catch (error) {\n//       console.error(\"Error fetching poll details:\", error);\n//       alert('Error fetching poll details');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollResults = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll results...\");\n//       const results = await contract.getPollResults(id || pollId);\n//       console.log(\"Poll results:\", results);\n//       setPollResults(results);\n//     } catch (error) {\n//       console.error(\"Error fetching poll results:\", error);\n//       alert('Error fetching poll results');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchAllPolls = async () => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching all polls...\");\n//       const totalPolls = await contract.pollCount();\n//       console.log(\"Total polls:\", totalPolls.toString());\n\n//       const polls = [];\n//       for (let i = 0; i < totalPolls; i++) {\n//         const details = await contract.getPollDetails(i);\n//         console.log(`Poll ${i} details:`, details);\n//         polls.push({ id: i, details });\n//       }\n//       setAllPolls(polls);\n//       console.log(\"All polls:\", polls);\n//     } catch (error) {\n//       console.error(\"Error fetching all polls:\", error);\n//       alert('Error fetching all polls');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Smart Contract Interface</h2>\n\n//       <div>\n//         <h3>Create Poll</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Title\"\n//           value={pollTitle}\n//           onChange={(e) => setPollTitle(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Options (comma separated)\"\n//           value={pollOptions.join(',')}\n//           onChange={(e) => setPollOptions(e.target.value.split(','))}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Duration in Minutes\"\n//           value={pollDuration}\n//           onChange={(e) => setPollDuration(e.target.value)}\n//         />\n//         <button onClick={createPoll} disabled={loading}>Create Poll</button>\n//       </div>\n\n//       <div>\n//         <h3>Vote</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Option Index\"\n//           value={optionIndex}\n//           onChange={(e) => setOptionIndex(e.target.value)}\n//         />\n//         <button onClick={vote} disabled={loading}>Vote</button>\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Details</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollDetails()} disabled={loading}>Fetch Details</button>\n//         {pollDetails && (\n//           <div>\n//             <p>Title: {pollDetails[0]}</p>\n//             <p>Options: {pollDetails[1].join(', ')}</p>\n//             <p>End Time: {new Date(pollDetails[2] * 1000).toLocaleString()}</p>\n//             <p>Creator: {pollDetails[3]}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Results</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollResults()} disabled={loading}>Fetch Results</button>\n//         {pollResults && (\n//           <div>\n//             <p>Results: {pollResults.join(', ')}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>All Polls</h3>\n//         <button onClick={fetchAllPolls} disabled={loading}>Refresh Polls</button>\n//         <ul>\n//           {allPolls.map((poll) => (\n//             <li key={poll.id}>\n//               <p>ID: {poll.id}</p>\n//               <p>Title: {poll.details[0]}</p>\n//               <p>Options: {poll.details[1].join(', ')}</p>\n//               <p>End Time: {new Date(poll.details[2] * 1000).toLocaleString()}</p>\n//               <button onClick={() => fetchPollDetails(poll.id)}>View Details</button>\n//               <button onClick={() => fetchPollResults(poll.id)}>View Results</button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SmartContractInterface;\n\n// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n\n// const SmartContractInterface = ({ contractAddress, abi }) => {\n//   const [pollTitle, setPollTitle] = useState('');\n//   const [pollOptions, setPollOptions] = useState([]);\n//   const [pollDuration, setPollDuration] = useState('');\n//   const [pollId, setPollId] = useState('');\n//   const [optionIndex, setOptionIndex] = useState('');\n//   const [pollDetails, setPollDetails] = useState(null);\n//   const [pollResults, setPollResults] = useState(null);\n//   const [allPolls, setAllPolls] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const provider = new ethers.BrowserProvider(window.ethereum);\n//   const [contract, setContract] = useState(null);\n\n//   useEffect(() => {\n//     if (contractAddress && abi) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, abi, signer));\n//     } else {\n//       console.error(\"Invalid contractAddress or ABI\");\n//     }\n//   }, [contractAddress, abi]);\n\n//   useEffect(() => {\n//     if (contract) fetchAllPolls();\n//   }, [contract]);\n\n//   const createPoll = async () => {\n//     if (!pollTitle.trim()) {\n//       alert(\"Poll title is required.\");\n//       return;\n//     }\n\n//     if (!pollOptions.length || pollOptions.some(opt => !opt.trim())) {\n//       alert(\"At least one valid poll option is required.\");\n//       return;\n//     }\n\n//     if (!pollDuration || pollDuration <= 0) {\n//       alert(\"Poll duration must be a positive number.\");\n//       return;\n//     }\n\n//     if (!contract) {\n//       alert(\"Smart contract is not connected. Please check the connection.\");\n//       return;\n//     }\n\n//     try {\n//       setLoading(true);\n//       console.log(\"Creating poll with:\", pollTitle, pollOptions, pollDuration);\n\n//       const tx = await contract.createPoll(\n//         pollTitle,\n//         pollOptions.filter(opt => opt.trim()),\n//         parseInt(pollDuration),\n//         { gasLimit: 300000 }\n//       );\n\n//       await tx.wait();\n//       alert('Poll created successfully!');\n//       fetchAllPolls();\n//     } catch (error) {\n//       console.error(\"Detailed Error:\", error);\n//       alert(`Error creating poll: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const vote = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       alert('Vote cast successfully!');\n//       fetchPollResults(pollId);\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error casting vote');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollDetails = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll details...\");\n//       const details = await contract.getPollDetails(id || pollId);\n//       console.log(\"Poll details:\", details);\n//       setPollDetails(details);\n//     } catch (error) {\n//       console.error(\"Error fetching poll details:\", error);\n//       alert('Error fetching poll details');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollResults = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll results...\");\n//       const results = await contract.getPollResults(id || pollId);\n//       console.log(\"Poll results:\", results);\n//       setPollResults(results);\n//     } catch (error) {\n//       console.error(\"Error fetching poll results:\", error);\n//       alert('Error fetching poll results');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchAllPolls = async () => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching all polls...\");\n//       const totalPolls = await contract.pollCount();\n//       console.log(\"Total polls:\", totalPolls.toString());\n\n//       const polls = [];\n//       for (let i = 0; i < totalPolls; i++) {\n//         const details = await contract.getPollDetails(i);\n//         console.log(`Poll ${i} details:`, details);\n//         polls.push({ id: i, details });\n//       }\n//       setAllPolls(polls);\n//       console.log(\"All polls:\", polls);\n//     } catch (error) {\n//       console.error(\"Error fetching all polls:\", error);\n//       alert('Error fetching all polls');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Smart Contract Interface</h2>\n\n//       <div>\n//         <h3>Create Poll</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Title\"\n//           value={pollTitle}\n//           onChange={(e) => setPollTitle(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Options (comma separated)\"\n//           value={pollOptions.join(',')}\n//           onChange={(e) => setPollOptions(e.target.value.split(','))}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Duration in Minutes\"\n//           value={pollDuration}\n//           onChange={(e) => setPollDuration(e.target.value)}\n//         />\n//         <button onClick={createPoll} disabled={loading}>Create Poll</button>\n//       </div>\n\n//       <div>\n//         <h3>Vote</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Option Index\"\n//           value={optionIndex}\n//           onChange={(e) => setOptionIndex(e.target.value)}\n//         />\n//         <button onClick={vote} disabled={loading}>Vote</button>\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Details</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollDetails()} disabled={loading}>Fetch Details</button>\n//         {pollDetails && (\n//           <div>\n//             <p>Title: {pollDetails[0]}</p>\n//             <p>Options: {pollDetails[1].join(', ')}</p>\n//             <p>End Time: {new Date(pollDetails[2] * 1000).toLocaleString()}</p>\n//             <p>Creator: {pollDetails[3]}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Results</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollResults()} disabled={loading}>Fetch Results</button>\n//         {pollResults && (\n//           <div>\n//             <p>Results: {pollResults.join(', ')}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>All Polls</h3>\n//         <button onClick={fetchAllPolls} disabled={loading}>Refresh Polls</button>\n//         <ul>\n//           {allPolls.map((poll) => (\n//             <li key={poll.id}>\n//               <p>ID: {poll.id}</p>\n//               <p>Title: {poll.details[0]}</p>\n//               <p>Options: {poll.details[1].join(', ')}</p>\n//               <p>End Time: {new Date(poll.details[2] * 1000).toLocaleString()}</p>\n//               <button onClick={() => fetchPollDetails(poll.id)}>View Details</button>\n//               <button onClick={() => fetchPollResults(poll.id)}>View Results</button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SmartContractInterface;\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SmartContractInterface = ({\n  contractAddress,\n  abi\n}) => {\n  _s();\n  const [pollTitle, setPollTitle] = useState('');\n  const [pollOptions, setPollOptions] = useState([]);\n  const [pollDuration, setPollDuration] = useState('');\n  const [pollId, setPollId] = useState('');\n  const [optionIndex, setOptionIndex] = useState('');\n  const [pollDetails, setPollDetails] = useState(null);\n  const [pollResults, setPollResults] = useState(null);\n  const [allPolls, setAllPolls] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const [contract, setContract] = useState(null);\n  useEffect(() => {\n    if (contractAddress && abi) {\n      const initializeContract = async () => {\n        try {\n          const signer = await provider.getSigner();\n          const initializedContract = new ethers.Contract(contractAddress, abi, signer);\n          setContract(initializedContract);\n          console.log(\"Smart contract connected:\", initializedContract);\n        } catch (error) {\n          console.error(\"Error initializing contract:\", error);\n          alert(\"Failed to connect to the smart contract. Please check your configuration.\");\n        }\n      };\n      initializeContract();\n    } else {\n      console.error(\"Invalid contractAddress or ABI\");\n      alert(\"Invalid contract address or ABI. Please verify your setup.\");\n    }\n  }, [contractAddress, abi]);\n  useEffect(() => {\n    if (contract) fetchAllPolls();\n  }, [contract]);\n  const createPoll = async () => {\n    if (!pollTitle.trim()) {\n      alert(\"Poll title is required.\");\n      return;\n    }\n    if (!pollOptions.length || pollOptions.some(opt => !opt.trim())) {\n      alert(\"At least one valid poll option is required.\");\n      return;\n    }\n    if (!pollDuration || pollDuration <= 0) {\n      alert(\"Poll duration must be a positive number.\");\n      return;\n    }\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n    try {\n      setLoading(true);\n      console.log(\"Creating poll with:\", pollTitle, pollOptions, pollDuration);\n      const tx = await contract.createPoll(pollTitle, pollOptions.filter(opt => opt.trim()), parseInt(pollDuration), {\n        gasLimit: 300000\n      });\n      await tx.wait();\n      alert('Poll created successfully!');\n      fetchAllPolls();\n    } catch (error) {\n      console.error(\"Detailed Error:\", error);\n      alert(`Error creating poll: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const vote = async () => {\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n    try {\n      setLoading(true);\n      const tx = await contract.vote(pollId, optionIndex);\n      await tx.wait();\n      alert('Vote cast successfully!');\n      fetchPollResults(pollId);\n    } catch (error) {\n      console.error(error);\n      alert('Error casting vote');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPollDetails = async id => {\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n    try {\n      setLoading(true);\n      console.log(\"Fetching poll details...\");\n      const details = await contract.getPollDetails(id || pollId);\n      console.log(\"Poll details:\", details);\n      setPollDetails(details);\n    } catch (error) {\n      console.error(\"Error fetching poll details:\", error);\n      alert('Error fetching poll details');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPollResults = async id => {\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n    try {\n      setLoading(true);\n      console.log(\"Fetching poll results...\");\n      const results = await contract.getPollResults(id || pollId);\n      console.log(\"Poll results:\", results);\n      setPollResults(results);\n    } catch (error) {\n      console.error(\"Error fetching poll results:\", error);\n      alert('Error fetching poll results');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchAllPolls = async () => {\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n    try {\n      setLoading(true);\n      console.log(\"Fetching all polls...\");\n      const totalPolls = await contract.pollCount();\n      console.log(\"Total polls:\", totalPolls.toString());\n      const polls = [];\n      for (let i = 0; i < totalPolls; i++) {\n        const details = await contract.getPollDetails(i);\n        console.log(`Poll ${i} details:`, details);\n        polls.push({\n          id: i,\n          details\n        });\n      }\n      setAllPolls(polls);\n      console.log(\"All polls:\", polls);\n    } catch (error) {\n      console.error(\"Error fetching all polls:\", error);\n      alert('Error fetching all polls');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Smart Contract Interface\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 780,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Create Poll\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Poll Title\",\n        value: pollTitle,\n        onChange: e => setPollTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Poll Options (comma separated)\",\n        value: pollOptions.join(','),\n        onChange: e => setPollOptions(e.target.value.split(','))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Duration in Minutes\",\n        value: pollDuration,\n        onChange: e => setPollDuration(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createPoll,\n        disabled: loading,\n        children: \"Create Poll\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 782,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Poll ID\",\n        value: pollId,\n        onChange: e => setPollId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Option Index\",\n        value: optionIndex,\n        onChange: e => setOptionIndex(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: vote,\n        disabled: loading,\n        children: \"Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 805,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Get Poll Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Poll ID\",\n        value: pollId,\n        onChange: e => setPollId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchPollDetails(),\n        disabled: loading,\n        children: \"Fetch Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 9\n      }, this), pollDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Title: \", pollDetails[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Options: \", pollDetails[1].join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 834,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"End Time: \", new Date(pollDetails[2] * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 835,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Creator: \", pollDetails[3]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 822,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Get Poll Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Poll ID\",\n        value: pollId,\n        onChange: e => setPollId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 843,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchPollResults(),\n        disabled: loading,\n        children: \"Fetch Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 849,\n        columnNumber: 9\n      }, this), pollResults && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Results: \", pollResults.join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 851,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"All Polls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchAllPolls,\n        disabled: loading,\n        children: \"Refresh Polls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: allPolls.map(poll => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"ID: \", poll.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 863,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Title: \", poll.details[0]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 864,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Options: \", poll.details[1].join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 865,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"End Time: \", new Date(poll.details[2] * 1000).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => fetchPollDetails(poll.id),\n            children: \"View Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 867,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => fetchPollResults(poll.id),\n            children: \"View Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 15\n          }, this)]\n        }, poll.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 857,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 779,\n    columnNumber: 5\n  }, this);\n};\n_s(SmartContractInterface, \"GMQyPpmB4WQEHrpsFLEL5x+4SHA=\");\n_c = SmartContractInterface;\nexport default SmartContractInterface;\nvar _c;\n$RefreshReg$(_c, \"SmartContractInterface\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","SmartContractInterface","contractAddress","abi","_s","pollTitle","setPollTitle","pollOptions","setPollOptions","pollDuration","setPollDuration","pollId","setPollId","optionIndex","setOptionIndex","pollDetails","setPollDetails","pollResults","setPollResults","allPolls","setAllPolls","loading","setLoading","provider","BrowserProvider","window","ethereum","contract","setContract","initializeContract","signer","getSigner","initializedContract","Contract","console","log","error","alert","fetchAllPolls","createPoll","trim","length","some","opt","tx","filter","parseInt","gasLimit","wait","message","vote","fetchPollResults","fetchPollDetails","id","details","getPollDetails","results","getPollResults","totalPolls","pollCount","toString","polls","i","push","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","join","split","onClick","disabled","Date","toLocaleString","map","poll","_c","$RefreshReg$"],"sources":["/Users/sharmaanjali/blockchain-voting-system/frontend/src/components/Votingsystem.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import abi from '../abi/VotingSystem.json';\n\n// const VotingSystem = ({ provider, account }) => {\n//   const [contract, setContract] = useState(null);\n//   const [polls, setPolls] = useState([]);\n//   const [newPoll, setNewPoll] = useState({ title: '', options: ['', ''], duration: 60 });\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const contractInstance = new ethers.Contract(\n//         \"0x002A13DF3bB8Ce7D7143bE17223F8893e2152c29\",\n//         abi,\n//         provider\n//       );\n//       setContract(contractInstance);\n//     }\n//   }, [provider]);\n\n//   const createPoll = async () => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.createPoll(\n//         newPoll.title,\n//         newPoll.options.filter(opt => opt !== ''),\n//         newPoll.duration\n//       );\n//       await tx.wait();\n\n//       setNewPoll({ title: '', options: ['', ''], duration: 60 });\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error creating poll:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const castVote = async (pollId, optionIndex) => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error voting:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPolls = async () => {\n//     if (!contract) return;\n//     try {\n//       const pollCount = await contract.pollCount();\n//       const pollsData = [];\n//       for (let i = 0; i < pollCount; i++) {\n//         const details = await contract.getPollDetails(i);\n//         const results = await contract.getPollResults(i);\n//         pollsData.push({ ...details, results });\n//       }\n//       setPolls(pollsData);\n//     } catch (error) {\n//       console.error('Error fetching polls:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPolls();\n//   }, [contract]);\n\n//   return (\n//     <div className=\"max-w-2xl mx-auto p-4\">\n//       <div className=\"mb-8 bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Create New Poll</h2>\n//         <input\n//           type=\"text\"\n//           value={newPoll.title}\n//           onChange={(e) => setNewPoll({ ...newPoll, title: e.target.value })}\n//           placeholder=\"Poll Title\"\n//           className=\"w-full p-2 mb-4 border rounded\"\n//         />\n//         {newPoll.options.map((option, index) => (\n//           <input\n//             key={index}\n//             type=\"text\"\n//             value={option}\n//             onChange={(e) => {\n//               const newOptions = [...newPoll.options];\n//               newOptions[index] = e.target.value;\n//               setNewPoll({ ...newPoll, options: newOptions });\n//             }}\n//             placeholder={`Option ${index + 1}`}\n//             className=\"w-full p-2 mb-2 border rounded\"\n//           />\n//         ))}\n//         <button\n//           onClick={() => setNewPoll({ ...newPoll, options: [...newPoll.options, ''] })}\n//           className=\"bg-gray-500 text-white px-4 py-2 rounded mr-2\"\n//         >\n//           Add Option\n//         </button>\n//         <button\n//           onClick={createPoll}\n//           disabled={loading}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//         >\n//           Create Poll\n//         </button>\n//       </div>\n\n//       <div className=\"bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Active Polls</h2>\n//         {polls.map((poll, index) => (\n//           <div key={index} className=\"border-b py-4\">\n//             <h3 className=\"font-bold\">{poll.title}</h3>\n//             <div className=\"mt-2\">\n//               {poll.options.map((option, optIndex) => (\n//                 <button\n//                   key={optIndex}\n//                   onClick={() => castVote(poll.pollId, optIndex)}\n//                   className=\"bg-blue-100 hover:bg-blue-200 px-4 py-2 rounded mr-2 mb-2\"\n//                 >\n//                   {option} ({poll.results[optIndex].toString()})\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VotingSystem;\n\n//consists all the function to interact with the smart contract\n// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n\n// const SmartContractInterface = ({ contractAddress, abi }) => {\n//   const [pollTitle, setPollTitle] = useState('');\n//   const [pollOptions, setPollOptions] = useState([]);\n//   const [pollDuration, setPollDuration] = useState('');\n//   const [pollId, setPollId] = useState('');\n//   const [optionIndex, setOptionIndex] = useState('');\n//   const [pollDetails, setPollDetails] = useState(null);\n//   const [pollResults, setPollResults] = useState(null);\n//   const [allPolls, setAllPolls] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const provider = new ethers.BrowserProvider(window.ethereum);\n//   const [contract, setContract] = useState(null);\n\n//   useEffect(() => {\n//     if (contractAddress && abi) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, abi, signer));\n//     } else {\n//       console.error(\"Invalid contractAddress or ABI\");\n//     }\n//   }, [contractAddress, abi]);\n\n//   useEffect(() => {\n//     if (contract) fetchAllPolls();\n//   }, [contract]);\n\n//   const createPoll = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.createPoll(pollTitle, pollOptions.filter(opt => opt), pollDuration);\n//       await tx.wait();\n//       alert('Poll created successfully!');\n//       fetchAllPolls();\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error creating poll');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const vote = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       alert('Vote cast successfully!');\n//       fetchPollResults(pollId);\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error casting vote');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollDetails = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll details...\");\n//       const details = await contract.getPollDetails(id || pollId);\n//       console.log(\"Poll details:\", details);\n//       setPollDetails(details);\n//     } catch (error) {\n//       console.error(\"Error fetching poll details:\", error);\n//       alert('Error fetching poll details');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollResults = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll results...\");\n//       const results = await contract.getPollResults(id || pollId);\n//       console.log(\"Poll results:\", results);\n//       setPollResults(results);\n//     } catch (error) {\n//       console.error(\"Error fetching poll results:\", error);\n//       alert('Error fetching poll results');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchAllPolls = async () => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching all polls...\");\n//       const totalPolls = await contract.pollCount();\n//       console.log(\"Total polls:\", totalPolls.toString());\n\n//       const polls = [];\n//       for (let i = 0; i < totalPolls; i++) {\n//         const details = await contract.getPollDetails(i);\n//         console.log(`Poll ${i} details:`, details);\n//         polls.push({ id: i, details });\n//       }\n//       setAllPolls(polls);\n//       console.log(\"All polls:\", polls);\n//     } catch (error) {\n//       console.error(\"Error fetching all polls:\", error);\n//       alert('Error fetching all polls');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Smart Contract Interface</h2>\n\n//       <div>\n//         <h3>Create Poll</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Title\"\n//           value={pollTitle}\n//           onChange={(e) => setPollTitle(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Options (comma separated)\"\n//           value={pollOptions.join(',')}\n//           onChange={(e) => setPollOptions(e.target.value.split(','))}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Duration in Minutes\"\n//           value={pollDuration}\n//           onChange={(e) => setPollDuration(e.target.value)}\n//         />\n//         <button onClick={createPoll} disabled={loading}>Create Poll</button>\n//       </div>\n\n//       <div>\n//         <h3>Vote</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Option Index\"\n//           value={optionIndex}\n//           onChange={(e) => setOptionIndex(e.target.value)}\n//         />\n//         <button onClick={vote} disabled={loading}>Vote</button>\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Details</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollDetails()} disabled={loading}>Fetch Details</button>\n//         {pollDetails && (\n//           <div>\n//             <p>Title: {pollDetails[0]}</p>\n//             <p>Options: {pollDetails[1].join(', ')}</p>\n//             <p>End Time: {new Date(pollDetails[2] * 1000).toLocaleString()}</p>\n//             <p>Creator: {pollDetails[3]}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Results</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollResults()} disabled={loading}>Fetch Results</button>\n//         {pollResults && (\n//           <div>\n//             <p>Results: {pollResults.join(', ')}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>All Polls</h3>\n//         <button onClick={fetchAllPolls} disabled={loading}>Refresh Polls</button>\n//         <ul>\n//           {allPolls.map((poll) => (\n//             <li key={poll.id}>\n//               <p>ID: {poll.id}</p>\n//               <p>Title: {poll.details[0]}</p>\n//               <p>Options: {poll.details[1].join(', ')}</p>\n//               <p>End Time: {new Date(poll.details[2] * 1000).toLocaleString()}</p>\n//               <button onClick={() => fetchPollDetails(poll.id)}>View Details</button>\n//               <button onClick={() => fetchPollResults(poll.id)}>View Results</button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SmartContractInterface;\n\n\n// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n\n// const SmartContractInterface = ({ contractAddress, abi }) => {\n//   const [pollTitle, setPollTitle] = useState('');\n//   const [pollOptions, setPollOptions] = useState([]);\n//   const [pollDuration, setPollDuration] = useState('');\n//   const [pollId, setPollId] = useState('');\n//   const [optionIndex, setOptionIndex] = useState('');\n//   const [pollDetails, setPollDetails] = useState(null);\n//   const [pollResults, setPollResults] = useState(null);\n//   const [allPolls, setAllPolls] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const provider = new ethers.BrowserProvider(window.ethereum);\n//   const [contract, setContract] = useState(null);\n\n//   useEffect(() => {\n//     if (contractAddress && abi) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, abi, signer));\n//     } else {\n//       console.error(\"Invalid contractAddress or ABI\");\n//     }\n//   }, [contractAddress, abi]);\n\n//   useEffect(() => {\n//     if (contract) fetchAllPolls();\n//   }, [contract]);\n\n//   const createPoll = async () => {\n//     if (!pollTitle.trim()) {\n//       alert(\"Poll title is required.\");\n//       return;\n//     }\n\n//     if (!pollOptions.length || pollOptions.some(opt => !opt.trim())) {\n//       alert(\"At least one valid poll option is required.\");\n//       return;\n//     }\n\n//     if (!pollDuration || pollDuration <= 0) {\n//       alert(\"Poll duration must be a positive number.\");\n//       return;\n//     }\n\n//     if (!contract) {\n//       alert(\"Smart contract is not connected. Please check the connection.\");\n//       return;\n//     }\n\n//     try {\n//       setLoading(true);\n//       console.log(\"Creating poll with:\", pollTitle, pollOptions, pollDuration);\n\n//       const tx = await contract.createPoll(\n//         pollTitle,\n//         pollOptions.filter(opt => opt.trim()),\n//         parseInt(pollDuration),\n//         { gasLimit: 300000 }\n//       );\n\n//       await tx.wait();\n//       alert('Poll created successfully!');\n//       fetchAllPolls();\n//     } catch (error) {\n//       console.error(\"Detailed Error:\", error);\n//       alert(`Error creating poll: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const vote = async () => {\n//     try {\n//       setLoading(true);\n//       const tx = await contract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       alert('Vote cast successfully!');\n//       fetchPollResults(pollId);\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error casting vote');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollDetails = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll details...\");\n//       const details = await contract.getPollDetails(id || pollId);\n//       console.log(\"Poll details:\", details);\n//       setPollDetails(details);\n//     } catch (error) {\n//       console.error(\"Error fetching poll details:\", error);\n//       alert('Error fetching poll details');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPollResults = async (id) => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching poll results...\");\n//       const results = await contract.getPollResults(id || pollId);\n//       console.log(\"Poll results:\", results);\n//       setPollResults(results);\n//     } catch (error) {\n//       console.error(\"Error fetching poll results:\", error);\n//       alert('Error fetching poll results');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchAllPolls = async () => {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching all polls...\");\n//       const totalPolls = await contract.pollCount();\n//       console.log(\"Total polls:\", totalPolls.toString());\n\n//       const polls = [];\n//       for (let i = 0; i < totalPolls; i++) {\n//         const details = await contract.getPollDetails(i);\n//         console.log(`Poll ${i} details:`, details);\n//         polls.push({ id: i, details });\n//       }\n//       setAllPolls(polls);\n//       console.log(\"All polls:\", polls);\n//     } catch (error) {\n//       console.error(\"Error fetching all polls:\", error);\n//       alert('Error fetching all polls');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Smart Contract Interface</h2>\n\n//       <div>\n//         <h3>Create Poll</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Title\"\n//           value={pollTitle}\n//           onChange={(e) => setPollTitle(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Poll Options (comma separated)\"\n//           value={pollOptions.join(',')}\n//           onChange={(e) => setPollOptions(e.target.value.split(','))}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Duration in Minutes\"\n//           value={pollDuration}\n//           onChange={(e) => setPollDuration(e.target.value)}\n//         />\n//         <button onClick={createPoll} disabled={loading}>Create Poll</button>\n//       </div>\n\n//       <div>\n//         <h3>Vote</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <input\n//           type=\"number\"\n//           placeholder=\"Option Index\"\n//           value={optionIndex}\n//           onChange={(e) => setOptionIndex(e.target.value)}\n//         />\n//         <button onClick={vote} disabled={loading}>Vote</button>\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Details</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollDetails()} disabled={loading}>Fetch Details</button>\n//         {pollDetails && (\n//           <div>\n//             <p>Title: {pollDetails[0]}</p>\n//             <p>Options: {pollDetails[1].join(', ')}</p>\n//             <p>End Time: {new Date(pollDetails[2] * 1000).toLocaleString()}</p>\n//             <p>Creator: {pollDetails[3]}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>Get Poll Results</h3>\n//         <input\n//           type=\"number\"\n//           placeholder=\"Poll ID\"\n//           value={pollId}\n//           onChange={(e) => setPollId(e.target.value)}\n//         />\n//         <button onClick={() => fetchPollResults()} disabled={loading}>Fetch Results</button>\n//         {pollResults && (\n//           <div>\n//             <p>Results: {pollResults.join(', ')}</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div>\n//         <h3>All Polls</h3>\n//         <button onClick={fetchAllPolls} disabled={loading}>Refresh Polls</button>\n//         <ul>\n//           {allPolls.map((poll) => (\n//             <li key={poll.id}>\n//               <p>ID: {poll.id}</p>\n//               <p>Title: {poll.details[0]}</p>\n//               <p>Options: {poll.details[1].join(', ')}</p>\n//               <p>End Time: {new Date(poll.details[2] * 1000).toLocaleString()}</p>\n//               <button onClick={() => fetchPollDetails(poll.id)}>View Details</button>\n//               <button onClick={() => fetchPollResults(poll.id)}>View Results</button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SmartContractInterface;\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\nconst SmartContractInterface = ({ contractAddress, abi }) => {\n  const [pollTitle, setPollTitle] = useState('');\n  const [pollOptions, setPollOptions] = useState([]);\n  const [pollDuration, setPollDuration] = useState('');\n  const [pollId, setPollId] = useState('');\n  const [optionIndex, setOptionIndex] = useState('');\n  const [pollDetails, setPollDetails] = useState(null);\n  const [pollResults, setPollResults] = useState(null);\n  const [allPolls, setAllPolls] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const [contract, setContract] = useState(null);\n\n  useEffect(() => {\n    if (contractAddress && abi) {\n      const initializeContract = async () => {\n        try {\n          const signer = await provider.getSigner();\n          const initializedContract = new ethers.Contract(contractAddress, abi, signer);\n          setContract(initializedContract);\n          console.log(\"Smart contract connected:\", initializedContract);\n        } catch (error) {\n          console.error(\"Error initializing contract:\", error);\n          alert(\"Failed to connect to the smart contract. Please check your configuration.\");\n        }\n      };\n\n      initializeContract();\n    } else {\n      console.error(\"Invalid contractAddress or ABI\");\n      alert(\"Invalid contract address or ABI. Please verify your setup.\");\n    }\n  }, [contractAddress, abi]);\n\n  useEffect(() => {\n    if (contract) fetchAllPolls();\n  }, [contract]);\n\n  const createPoll = async () => {\n    if (!pollTitle.trim()) {\n      alert(\"Poll title is required.\");\n      return;\n    }\n\n    if (!pollOptions.length || pollOptions.some(opt => !opt.trim())) {\n      alert(\"At least one valid poll option is required.\");\n      return;\n    }\n\n    if (!pollDuration || pollDuration <= 0) {\n      alert(\"Poll duration must be a positive number.\");\n      return;\n    }\n\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      console.log(\"Creating poll with:\", pollTitle, pollOptions, pollDuration);\n\n      const tx = await contract.createPoll(\n        pollTitle,\n        pollOptions.filter(opt => opt.trim()),\n        parseInt(pollDuration),\n        { gasLimit: 300000 }\n      );\n\n      await tx.wait();\n      alert('Poll created successfully!');\n      fetchAllPolls();\n    } catch (error) {\n      console.error(\"Detailed Error:\", error);\n      alert(`Error creating poll: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const vote = async () => {\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const tx = await contract.vote(pollId, optionIndex);\n      await tx.wait();\n      alert('Vote cast successfully!');\n      fetchPollResults(pollId);\n    } catch (error) {\n      console.error(error);\n      alert('Error casting vote');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchPollDetails = async (id) => {\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      console.log(\"Fetching poll details...\");\n      const details = await contract.getPollDetails(id || pollId);\n      console.log(\"Poll details:\", details);\n      setPollDetails(details);\n    } catch (error) {\n      console.error(\"Error fetching poll details:\", error);\n      alert('Error fetching poll details');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchPollResults = async (id) => {\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      console.log(\"Fetching poll results...\");\n      const results = await contract.getPollResults(id || pollId);\n      console.log(\"Poll results:\", results);\n      setPollResults(results);\n    } catch (error) {\n      console.error(\"Error fetching poll results:\", error);\n      alert('Error fetching poll results');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchAllPolls = async () => {\n    if (!contract) {\n      alert(\"Smart contract is not connected. Please check the connection.\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      console.log(\"Fetching all polls...\");\n      const totalPolls = await contract.pollCount();\n      console.log(\"Total polls:\", totalPolls.toString());\n\n      const polls = [];\n      for (let i = 0; i < totalPolls; i++) {\n        const details = await contract.getPollDetails(i);\n        console.log(`Poll ${i} details:`, details);\n        polls.push({ id: i, details });\n      }\n      setAllPolls(polls);\n      console.log(\"All polls:\", polls);\n    } catch (error) {\n      console.error(\"Error fetching all polls:\", error);\n      alert('Error fetching all polls');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Smart Contract Interface</h2>\n\n      <div>\n        <h3>Create Poll</h3>\n        <input\n          type=\"text\"\n          placeholder=\"Poll Title\"\n          value={pollTitle}\n          onChange={(e) => setPollTitle(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Poll Options (comma separated)\"\n          value={pollOptions.join(',')}\n          onChange={(e) => setPollOptions(e.target.value.split(','))}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Duration in Minutes\"\n          value={pollDuration}\n          onChange={(e) => setPollDuration(e.target.value)}\n        />\n        <button onClick={createPoll} disabled={loading}>Create Poll</button>\n      </div>\n\n      <div>\n        <h3>Vote</h3>\n        <input\n          type=\"number\"\n          placeholder=\"Poll ID\"\n          value={pollId}\n          onChange={(e) => setPollId(e.target.value)}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Option Index\"\n          value={optionIndex}\n          onChange={(e) => setOptionIndex(e.target.value)}\n        />\n        <button onClick={vote} disabled={loading}>Vote</button>\n      </div>\n\n      <div>\n        <h3>Get Poll Details</h3>\n        <input\n          type=\"number\"\n          placeholder=\"Poll ID\"\n          value={pollId}\n          onChange={(e) => setPollId(e.target.value)}\n        />\n        <button onClick={() => fetchPollDetails()} disabled={loading}>Fetch Details</button>\n        {pollDetails && (\n          <div>\n            <p>Title: {pollDetails[0]}</p>\n            <p>Options: {pollDetails[1].join(', ')}</p>\n            <p>End Time: {new Date(pollDetails[2] * 1000).toLocaleString()}</p>\n            <p>Creator: {pollDetails[3]}</p>\n          </div>\n        )}\n      </div>\n\n      <div>\n        <h3>Get Poll Results</h3>\n        <input\n          type=\"number\"\n          placeholder=\"Poll ID\"\n          value={pollId}\n          onChange={(e) => setPollId(e.target.value)}\n        />\n        <button onClick={() => fetchPollResults()} disabled={loading}>Fetch Results</button>\n        {pollResults && (\n          <div>\n            <p>Results: {pollResults.join(', ')}</p>\n          </div>\n        )}\n      </div>\n\n      <div>\n        <h3>All Polls</h3>\n        <button onClick={fetchAllPolls} disabled={loading}>Refresh Polls</button>\n        <ul>\n          {allPolls.map((poll) => (\n            <li key={poll.id}>\n              <p>ID: {poll.id}</p>\n              <p>Title: {poll.details[0]}</p>\n              <p>Options: {poll.details[1].join(', ')}</p>\n              <p>End Time: {new Date(poll.details[2] * 1000).toLocaleString()}</p>\n              <button onClick={() => fetchPollDetails(poll.id)}>View Details</button>\n              <button onClick={() => fetchPollResults(poll.id)}>View Results</button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default SmartContractInterface;\n"],"mappingslD,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,sBAAsB,GAAGA,CAAC;EAAEC,eAAe;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EAC3D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAM2B,QAAQ,GAAG,IAAIzB,MAAM,CAAC0B,eAAe,CAACC,MAAM,CAACC,QAAQ,CAAC;EAC5D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,IAAIK,eAAe,IAAIC,GAAG,EAAE;MAC1B,MAAM0B,kBAAkB,GAAG,MAAAA,CAAA,KAAY;QACrC,IAAI;UACF,MAAMC,MAAM,GAAG,MAAMP,QAAQ,CAACQ,SAAS,CAAC,CAAC;UACzC,MAAMC,mBAAmB,GAAG,IAAIlC,MAAM,CAACmC,QAAQ,CAAC/B,eAAe,EAAEC,GAAG,EAAE2B,MAAM,CAAC;UAC7EF,WAAW,CAACI,mBAAmB,CAAC;UAChCE,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEH,mBAAmB,CAAC;QAC/D,CAAC,CAAC,OAAOI,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;UACpDC,KAAK,CAAC,2EAA2E,CAAC;QACpF;MACF,CAAC;MAEDR,kBAAkB,CAAC,CAAC;IACtB,CAAC,MAAM;MACLK,OAAO,CAACE,KAAK,CAAC,gCAAgC,CAAC;MAC/CC,KAAK,CAAC,4DAA4D,CAAC;IACrE;EACF,CAAC,EAAE,CAACnC,eAAe,EAAEC,GAAG,CAAC,CAAC;EAE1BN,SAAS,CAAC,MAAM;IACd,IAAI8B,QAAQ,EAAEW,aAAa,CAAC,CAAC;EAC/B,CAAC,EAAE,CAACX,QAAQ,CAAC,CAAC;EAEd,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAAClC,SAAS,CAACmC,IAAI,CAAC,CAAC,EAAE;MACrBH,KAAK,CAAC,yBAAyB,CAAC;MAChC;IACF;IAEA,IAAI,CAAC9B,WAAW,CAACkC,MAAM,IAAIlC,WAAW,CAACmC,IAAI,CAACC,GAAG,IAAI,CAACA,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC,EAAE;MAC/DH,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAI,CAAC5B,YAAY,IAAIA,YAAY,IAAI,CAAC,EAAE;MACtC4B,KAAK,CAAC,0CAA0C,CAAC;MACjD;IACF;IAEA,IAAI,CAACV,QAAQ,EAAE;MACbU,KAAK,CAAC,+DAA+D,CAAC;MACtE;IACF;IAEA,IAAI;MACFf,UAAU,CAAC,IAAI,CAAC;MAChBY,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE9B,SAAS,EAAEE,WAAW,EAAEE,YAAY,CAAC;MAExE,MAAMmC,EAAE,GAAG,MAAMjB,QAAQ,CAACY,UAAU,CAClClC,SAAS,EACTE,WAAW,CAACsC,MAAM,CAACF,GAAG,IAAIA,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC,EACrCM,QAAQ,CAACrC,YAAY,CAAC,EACtB;QAAEsC,QAAQ,EAAE;MAAO,CACrB,CAAC;MAED,MAAMH,EAAE,CAACI,IAAI,CAAC,CAAC;MACfX,KAAK,CAAC,4BAA4B,CAAC;MACnCC,aAAa,CAAC,CAAC;IACjB,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvCC,KAAK,CAAC,wBAAwBD,KAAK,CAACa,OAAO,EAAE,CAAC;IAChD,CAAC,SAAS;MACR3B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM4B,IAAI,GAAG,MAAAA,CAAA,KAAY;IACvB,IAAI,CAACvB,QAAQ,EAAE;MACbU,KAAK,CAAC,+DAA+D,CAAC;MACtE;IACF;IAEA,IAAI;MACFf,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMsB,EAAE,GAAG,MAAMjB,QAAQ,CAACuB,IAAI,CAACvC,MAAM,EAAEE,WAAW,CAAC;MACnD,MAAM+B,EAAE,CAACI,IAAI,CAAC,CAAC;MACfX,KAAK,CAAC,yBAAyB,CAAC;MAChCc,gBAAgB,CAACxC,MAAM,CAAC;IAC1B,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MACpBC,KAAK,CAAC,oBAAoB,CAAC;IAC7B,CAAC,SAAS;MACRf,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM8B,gBAAgB,GAAG,MAAOC,EAAE,IAAK;IACrC,IAAI,CAAC1B,QAAQ,EAAE;MACbU,KAAK,CAAC,+DAA+D,CAAC;MACtE;IACF;IAEA,IAAI;MACFf,UAAU,CAAC,IAAI,CAAC;MAChBY,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,MAAMmB,OAAO,GAAG,MAAM3B,QAAQ,CAAC4B,cAAc,CAACF,EAAE,IAAI1C,MAAM,CAAC;MAC3DuB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEmB,OAAO,CAAC;MACrCtC,cAAc,CAACsC,OAAO,CAAC;IACzB,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDC,KAAK,CAAC,6BAA6B,CAAC;IACtC,CAAC,SAAS;MACRf,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM6B,gBAAgB,GAAG,MAAOE,EAAE,IAAK;IACrC,IAAI,CAAC1B,QAAQ,EAAE;MACbU,KAAK,CAAC,+DAA+D,CAAC;MACtE;IACF;IAEA,IAAI;MACFf,UAAU,CAAC,IAAI,CAAC;MAChBY,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,MAAMqB,OAAO,GAAG,MAAM7B,QAAQ,CAAC8B,cAAc,CAACJ,EAAE,IAAI1C,MAAM,CAAC;MAC3DuB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEqB,OAAO,CAAC;MACrCtC,cAAc,CAACsC,OAAO,CAAC;IACzB,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDC,KAAK,CAAC,6BAA6B,CAAC;IACtC,CAAC,SAAS;MACRf,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACX,QAAQ,EAAE;MACbU,KAAK,CAAC,+DAA+D,CAAC;MACtE;IACF;IAEA,IAAI;MACFf,UAAU,CAAC,IAAI,CAAC;MAChBY,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,MAAMuB,UAAU,GAAG,MAAM/B,QAAQ,CAACgC,SAAS,CAAC,CAAC;MAC7CzB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEuB,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC;MAElD,MAAMC,KAAK,GAAG,EAAE;MAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,EAAEI,CAAC,EAAE,EAAE;QACnC,MAAMR,OAAO,GAAG,MAAM3B,QAAQ,CAAC4B,cAAc,CAACO,CAAC,CAAC;QAChD5B,OAAO,CAACC,GAAG,CAAC,QAAQ2B,CAAC,WAAW,EAAER,OAAO,CAAC;QAC1CO,KAAK,CAACE,IAAI,CAAC;UAAEV,EAAE,EAAES,CAAC;UAAER;QAAQ,CAAC,CAAC;MAChC;MACAlC,WAAW,CAACyC,KAAK,CAAC;MAClB3B,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE0B,KAAK,CAAC;IAClC,CAAC,CAAC,OAAOzB,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDC,KAAK,CAAC,0BAA0B,CAAC;IACnC,CAAC,SAAS;MACRf,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEtB,OAAA;IAAAgE,QAAA,gBACEhE,OAAA;MAAAgE,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEjCpE,OAAA;MAAAgE,QAAA,gBACEhE,OAAA;QAAAgE,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBpE,OAAA;QACEqE,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,YAAY;QACxBC,KAAK,EAAElE,SAAU;QACjBmE,QAAQ,EAAGC,CAAC,IAAKnE,YAAY,CAACmE,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eACFpE,OAAA;QACEqE,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,gCAAgC;QAC5CC,KAAK,EAAEhE,WAAW,CAACoE,IAAI,CAAC,GAAG,CAAE;QAC7BH,QAAQ,EAAGC,CAAC,IAAKjE,cAAc,CAACiE,CAAC,CAACC,MAAM,CAACH,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC;MAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D,CAAC,eACFpE,OAAA;QACEqE,IAAI,EAAC,QAAQ;QACbC,WAAW,EAAC,qBAAqB;QACjCC,KAAK,EAAE9D,YAAa;QACpB+D,QAAQ,EAAGC,CAAC,IAAK/D,eAAe,CAAC+D,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC,eACFpE,OAAA;QAAQ6E,OAAO,EAAEtC,UAAW;QAACuC,QAAQ,EAAEzD,OAAQ;QAAA2C,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC,eAENpE,OAAA;MAAAgE,QAAA,gBACEhE,OAAA;QAAAgE,QAAA,EAAI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACbpE,OAAA;QACEqE,IAAI,EAAC,QAAQ;QACbC,WAAW,EAAC,SAAS;QACrBC,KAAK,EAAE5D,MAAO;QACd6D,QAAQ,EAAGC,CAAC,IAAK7D,SAAS,CAAC6D,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,eACFpE,OAAA;QACEqE,IAAI,EAAC,QAAQ;QACbC,WAAW,EAAC,cAAc;QAC1BC,KAAK,EAAE1D,WAAY;QACnB2D,QAAQ,EAAGC,CAAC,IAAK3D,cAAc,CAAC2D,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eACFpE,OAAA;QAAQ6E,OAAO,EAAE3B,IAAK;QAAC4B,QAAQ,EAAEzD,OAAQ;QAAA2C,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,eAENpE,OAAA;MAAAgE,QAAA,gBACEhE,OAAA;QAAAgE,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBpE,OAAA;QACEqE,IAAI,EAAC,QAAQ;QACbC,WAAW,EAAC,SAAS;QACrBC,KAAK,EAAE5D,MAAO;QACd6D,QAAQ,EAAGC,CAAC,IAAK7D,SAAS,CAAC6D,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,eACFpE,OAAA;QAAQ6E,OAAO,EAAEA,CAAA,KAAMzB,gBAAgB,CAAC,CAAE;QAAC0B,QAAQ,EAAEzD,OAAQ;QAAA2C,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACnFrD,WAAW,iBACVf,OAAA;QAAAgE,QAAA,gBACEhE,OAAA;UAAAgE,QAAA,GAAG,SAAO,EAACjD,WAAW,CAAC,CAAC,CAAC;QAAA;UAAAkD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9BpE,OAAA;UAAAgE,QAAA,GAAG,WAAS,EAACjD,WAAW,CAAC,CAAC,CAAC,CAAC4D,IAAI,CAAC,IAAI,CAAC;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3CpE,OAAA;UAAAgE,QAAA,GAAG,YAAU,EAAC,IAAIe,IAAI,CAAChE,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAACiE,cAAc,CAAC,CAAC;QAAA;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnEpE,OAAA;UAAAgE,QAAA,GAAG,WAAS,EAACjD,WAAW,CAAC,CAAC,CAAC;QAAA;UAAAkD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAENpE,OAAA;MAAAgE,QAAA,gBACEhE,OAAA;QAAAgE,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBpE,OAAA;QACEqE,IAAI,EAAC,QAAQ;QACbC,WAAW,EAAC,SAAS;QACrBC,KAAK,EAAE5D,MAAO;QACd6D,QAAQ,EAAGC,CAAC,IAAK7D,SAAS,CAAC6D,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,eACFpE,OAAA;QAAQ6E,OAAO,EAAEA,CAAA,KAAM1B,gBAAgB,CAAC,CAAE;QAAC2B,QAAQ,EAAEzD,OAAQ;QAAA2C,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACnFnD,WAAW,iBACVjB,OAAA;QAAAgE,QAAA,eACEhE,OAAA;UAAAgE,QAAA,GAAG,WAAS,EAAC/C,WAAW,CAAC0D,IAAI,CAAC,IAAI,CAAC;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAENpE,OAAA;MAAAgE,QAAA,gBACEhE,OAAA;QAAAgE,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBpE,OAAA;QAAQ6E,OAAO,EAAEvC,aAAc;QAACwC,QAAQ,EAAEzD,OAAQ;QAAA2C,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzEpE,OAAA;QAAAgE,QAAA,EACG7C,QAAQ,CAAC8D,GAAG,CAAEC,IAAI,iBACjBlF,OAAA;UAAAgE,QAAA,gBACEhE,OAAA;YAAAgE,QAAA,GAAG,MAAI,EAACkB,IAAI,CAAC7B,EAAE;UAAA;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBpE,OAAA;YAAAgE,QAAA,GAAG,SAAO,EAACkB,IAAI,CAAC5B,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC/BpE,OAAA;YAAAgE,QAAA,GAAG,WAAS,EAACkB,IAAI,CAAC5B,OAAO,CAAC,CAAC,CAAC,CAACqB,IAAI,CAAC,IAAI,CAAC;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5CpE,OAAA;YAAAgE,QAAA,GAAG,YAAU,EAAC,IAAIe,IAAI,CAACG,IAAI,CAAC5B,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC0B,cAAc,CAAC,CAAC;UAAA;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpEpE,OAAA;YAAQ6E,OAAO,EAAEA,CAAA,KAAMzB,gBAAgB,CAAC8B,IAAI,CAAC7B,EAAE,CAAE;YAAAW,QAAA,EAAC;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACvEpE,OAAA;YAAQ6E,OAAO,EAAEA,CAAA,KAAM1B,gBAAgB,CAAC+B,IAAI,CAAC7B,EAAE,CAAE;YAAAW,QAAA,EAAC;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GANhEc,IAAI,CAAC7B,EAAE;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOZ,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChE,EAAA,CA3QIH,sBAAsB;AAAAkF,EAAA,GAAtBlF,sBAAsB;AA6Q5B,eAAeA,sBAAsB;AAAC,IAAAkF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}