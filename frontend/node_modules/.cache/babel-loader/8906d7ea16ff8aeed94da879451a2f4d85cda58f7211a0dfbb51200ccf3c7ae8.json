{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { getChainId } from '../../actions/public/getChainId.js';\nimport { signTypedData } from '../../actions/wallet/signTypedData.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { BaseError } from '../../errors/base.js';\nimport { assertCurrentChain } from '../../utils/chain/assertCurrentChain.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { assertEip712Request } from '../utils/assertEip712Request.js';\n/**\n * Signs an EIP712 transaction.\n *\n * @param args - {@link SignTransactionParameters}\n * @returns The signed serialized transaction. {@link SignTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { zksync } from 'viem/chains'\n * import { signEip712Transaction } from 'viem/zksync'\n *\n * const client = createWalletClient({\n *   chain: zksync,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signEip712Transaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { zksync } from 'viem/chains'\n * import { signEip712Transaction } from 'viem/zksync'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: zksync,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signEip712Transaction(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function signEip712Transaction(client, args) {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    ...transaction\n  } = args;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/signTransaction'\n  });\n  const account = parseAccount(account_);\n  assertEip712Request({\n    account,\n    chain,\n    ...args\n  });\n  if (!chain?.custom?.getEip712Domain) throw new BaseError('`getEip712Domain` not found on chain.');\n  if (!chain?.serializers?.transaction) throw new BaseError('transaction serializer not found on chain.');\n  const chainId = await getAction(client, getChainId, 'getChainId')({});\n  if (chain !== null) assertCurrentChain({\n    currentChainId: chainId,\n    chain: chain\n  });\n  const eip712Domain = chain?.custom.getEip712Domain({\n    ...transaction,\n    chainId,\n    from: account.address,\n    type: 'eip712'\n  });\n  const customSignature = await signTypedData(client, {\n    ...eip712Domain,\n    account\n  });\n  return chain?.serializers?.transaction({\n    chainId,\n    ...transaction,\n    customSignature,\n    type: 'eip712'\n  }, {\n    r: '0x0',\n    s: '0x0',\n    v: 0n\n  });\n}\n//# sourceMappingURL=signEip712Transaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}