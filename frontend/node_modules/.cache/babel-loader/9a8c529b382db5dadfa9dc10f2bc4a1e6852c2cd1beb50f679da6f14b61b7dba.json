{"ast":null,"code":"import { getThirdwebBaseUrl } from \"../../../../utils/domains.js\";\nimport { getClientFetch } from \"../../../../utils/fetch.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nexport async function signMessage({\n  client,\n  payload: {\n    message,\n    isRaw\n  },\n  storage\n}) {\n  const authToken = await storage.getAuthCookie();\n  const ecosystem = storage.ecosystem;\n  const clientFetch = getClientFetch(client, ecosystem);\n  if (!authToken) {\n    throw new Error(\"No auth token found when signing message\");\n  }\n  const response = await clientFetch(`${getThirdwebBaseUrl(\"inAppWallet\")}/api/v1/enclave-wallet/sign-message`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-thirdweb-client-id\": client.clientId,\n      Authorization: `Bearer embedded-wallet-token:${authToken}`\n    },\n    body: stringify({\n      messagePayload: {\n        message,\n        isRaw\n      }\n    })\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to sign message - ${response.status} ${response.statusText}`);\n  }\n  const signedMessage = await response.json();\n  return signedMessage;\n}\n//# sourceMappingURL=sign-message.enclave.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}