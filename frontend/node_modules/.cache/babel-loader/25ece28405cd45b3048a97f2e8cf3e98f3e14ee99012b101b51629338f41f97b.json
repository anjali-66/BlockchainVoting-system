{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { ShuffleIcon } from \"@radix-ui/react-icons\";\nimport { isInAppWallet } from \"../../../../../wallets/in-app/core/wallet/index.js\";\nimport { injectedProvider } from \"../../../../../wallets/injected/mipdStore.js\";\nimport { fontSize, iconSize } from \"../../../../core/design-system/index.js\";\nimport { useActiveWallet } from \"../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useAdminWallet } from \"../../../../core/hooks/wallets/useAdminWallet.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Container, Line, ModalHeader } from \"../../components/basic.js\";\nimport { Text } from \"../../components/text.js\";\nimport { MenuButton } from \"../MenuButton.js\";\nimport { KeyIcon } from \"../icons/KeyIcon.js\";\nimport { MultiUserIcon } from \"../icons/MultiUserIcon.js\";\nimport { WalletConnectIcon } from \"../icons/WalletConnectIcon.js\";\n/**\n * @internal\n */\nexport function ManageWalletScreen(props) {\n  const activeWallet = useAdminWallet();\n  return _jsxs(Container, {\n    style: {\n      minHeight: \"300px\"\n    },\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: _jsx(ModalHeader, {\n        title: props.locale.manageWallet.title,\n        onBack: props.onBack\n      })\n    }), _jsx(Line, {}), _jsxs(Container, {\n      px: \"sm\",\n      scrollY: true,\n      style: {\n        maxHeight: \"500px\"\n      },\n      children: [_jsx(Spacer, {\n        y: \"md\"\n      }), _jsxs(Container, {\n        style: {\n          position: \"relative\",\n          height: \"250px\"\n        },\n        children: [_jsx(SwitchMetamaskAccount, {\n          closeModal: props.closeModal,\n          connectLocale: props.locale\n        }), typeof activeWallet !== \"undefined\" && props.manageWallet?.allowLinkingProfiles !== false && _jsxs(MenuButton, {\n          onClick: () => {\n            props.setScreen(\"linked-profiles\");\n          },\n          style: {\n            fontSize: fontSize.sm\n          },\n          children: [_jsx(MultiUserIcon, {\n            size: iconSize.md\n          }), _jsx(Text, {\n            color: \"primaryText\",\n            children: props.locale.manageWallet.linkedProfiles\n          })]\n        }), _jsxs(MenuButton, {\n          onClick: () => {\n            props.setScreen(\"wallet-connect-receiver\");\n          },\n          style: {\n            fontSize: fontSize.sm\n          },\n          children: [_jsx(WalletConnectIcon, {\n            size: iconSize.md\n          }), _jsx(Text, {\n            color: \"primaryText\",\n            children: props.locale.manageWallet.connectAnApp\n          })]\n        }), activeWallet && isInAppWallet(activeWallet) && !activeWallet.getConfig()?.hidePrivateKeyExport && _jsxs(MenuButton, {\n          onClick: () => {\n            props.setScreen(\"private-key\");\n          },\n          style: {\n            fontSize: fontSize.sm\n          },\n          children: [_jsx(KeyIcon, {\n            size: iconSize.md\n          }), _jsx(Text, {\n            color: \"primaryText\",\n            children: props.locale.manageWallet.exportPrivateKey\n          })]\n        })]\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      })]\n    })]\n  });\n}\nfunction SwitchMetamaskAccount(props) {\n  const wallet = useActiveWallet();\n  const connectLocale = props.connectLocale;\n  if (wallet?.id !== \"io.metamask\") {\n    return null;\n  }\n  const injectedMetamaskProvider = injectedProvider(\"io.metamask\");\n  if (!injectedMetamaskProvider) {\n    return null;\n  }\n  return _jsxs(MenuButton, {\n    type: \"button\",\n    onClick: async () => {\n      await injectedMetamaskProvider.request({\n        method: \"wallet_requestPermissions\",\n        params: [{\n          eth_accounts: {}\n        }]\n      });\n      props.closeModal();\n    },\n    children: [_jsx(ShuffleIcon, {\n      width: iconSize.md,\n      height: iconSize.md\n    }), _jsx(Text, {\n      color: \"primaryText\",\n      children: connectLocale.switchAccount\n    })]\n  });\n}\n//# sourceMappingURL=ManageWalletScreen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}