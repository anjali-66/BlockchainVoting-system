{"ast":null,"code":"import { eth_getTransactionReceipt } from \"../../../../rpc/actions/eth_getTransactionReceipt.js\";\nimport { getRpcClient } from \"../../../../rpc/rpc.js\";\nimport { sendAndConfirmTransaction } from \"../../../../transaction/actions/send-and-confirm-transaction.js\";\nimport { sendBatchTransaction } from \"../../../../transaction/actions/send-batch-transaction.js\";\nimport { LruMap } from \"../../../../utils/caching/lru.js\";\nimport { randomBytesHex } from \"../../../../utils/random.js\";\nconst bundlesToTransactions = new LruMap(1000);\n/**\n * @internal\n */\nexport async function inAppWalletSendCalls(args) {\n  const {\n    account,\n    calls\n  } = args;\n  const hashes = [];\n  const bundleId = randomBytesHex(65);\n  bundlesToTransactions.set(bundleId, hashes);\n  if (account.sendBatchTransaction) {\n    const receipt = await sendBatchTransaction({\n      account,\n      transactions: calls\n    });\n    hashes.push(receipt.transactionHash);\n    bundlesToTransactions.set(bundleId, hashes);\n  } else {\n    for (const tx of calls) {\n      const receipt = await sendAndConfirmTransaction({\n        account,\n        transaction: tx\n      });\n      hashes.push(receipt.transactionHash);\n      bundlesToTransactions.set(bundleId, hashes);\n    }\n  }\n  return bundleId;\n}\n/**\n * @internal\n */\nexport async function inAppWalletGetCallsStatus(args) {\n  const {\n    wallet,\n    client,\n    bundleId\n  } = args;\n  const chain = wallet.getChain();\n  if (!chain) {\n    throw new Error(\"Failed to get calls status, no active chain found\");\n  }\n  const bundle = bundlesToTransactions.get(bundleId);\n  if (!bundle) {\n    throw new Error(\"Failed to get calls status, unknown bundle id\");\n  }\n  const request = getRpcClient({\n    client,\n    chain\n  });\n  let status = \"CONFIRMED\";\n  const receipts = await Promise.all(bundle.map(hash => eth_getTransactionReceipt(request, {\n    hash\n  }).then(receipt => ({\n    logs: receipt.logs.map(l => ({\n      address: l.address,\n      data: l.data,\n      topics: l.topics\n    })),\n    status: receipt.status,\n    blockHash: receipt.blockHash,\n    blockNumber: receipt.blockNumber,\n    gasUsed: receipt.gasUsed,\n    transactionHash: receipt.transactionHash\n  })).catch(() => {\n    status = \"PENDING\";\n    return null; // Return null if there's an error to filter out later\n  })));\n  return {\n    status,\n    receipts: receipts.filter(r => r !== null) // ts 5.5 please come we need you\n  };\n}\n//# sourceMappingURL=in-app-wallet-calls.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}