{"ast":null,"code":"import { EventEmitter } from 'events';\nimport { ConnectorEvent } from '@web3-react/types';\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nvar AbstractConnector = /*#__PURE__*/\nfunction (_EventEmitter) {\n  _inheritsLoose(AbstractConnector, _EventEmitter);\n  function AbstractConnector(_temp) {\n    var _this;\n    var _ref = _temp === void 0 ? {} : _temp,\n      supportedChainIds = _ref.supportedChainIds;\n    _this = _EventEmitter.call(this) || this;\n    _this.supportedChainIds = supportedChainIds;\n    return _this;\n  }\n  var _proto = AbstractConnector.prototype;\n  _proto.emitUpdate = function emitUpdate(update) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Update + \"' with payload\", update);\n    }\n    this.emit(ConnectorEvent.Update, update);\n  };\n  _proto.emitError = function emitError(error) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Error + \"' with payload\", error);\n    }\n    this.emit(ConnectorEvent.Error, error);\n  };\n  _proto.emitDeactivate = function emitDeactivate() {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Deactivate + \"'\");\n    }\n    this.emit(ConnectorEvent.Deactivate);\n  };\n  return AbstractConnector;\n}(EventEmitter);\nexport { AbstractConnector };\n//# sourceMappingURL=abstract-connector.esm.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}