{"ast":null,"code":"import { getClientFetch } from \"../utils/fetch.js\";\nimport { resolveScheme } from \"../utils/ipfs.js\";\n/**\n * @description Downloads a file from the specified IPFS, Arweave, or HTTP URI.\n *\n * `download` will parse the provided URI based on its scheme (ipfs://, ar://, https://) and convert it to a URL to fetch the file from thirdweb's storage service.\n *\n * @param options - The download options.\n * @param options.client - The Thirdweb client. See [createThirdwebClient](https://portal.thirdweb.com/references/typescript/v5/createThirdwebClient).\n * @param options.uri - The URI of the file to download. Can be IPFS, Arweave, or HTTP.\n * @param [options.requestTimeoutMs] - The maximum time in milliseconds to wait for the request to complete. Defaults to 60 seconds (60,000 milliseconds).\n *\n * @returns Asynchronously returns the network response from fetching the file.\n * @throws An error if the URI scheme is invalid or if the request fails.\n *\n * @example\n * Download a file from IPFS:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"@thirdweb-dev/sdk\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"ipfs://Qm...\",\n * });\n * ```\n *\n * Download a file from Arweave:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"@thirdweb-dev/sdk\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"ar://{arweave-transaction-id}\",\n * });\n * ```\n *\n * Download a file from HTTP:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"@thirdweb-dev/sdk\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"https://example.com/file.txt\",\n * });\n * ```\n *\n * @storage\n */\nexport async function download(options) {\n  let url;\n  if (options.uri.startsWith(\"ar://\")) {\n    const {\n      resolveArweaveScheme\n    } = await import(\"../utils/arweave.js\");\n    url = resolveArweaveScheme(options);\n  } else {\n    url = resolveScheme(options);\n  }\n  const res = await getClientFetch(options.client)(url, {\n    keepalive: options.client.config?.storage?.fetch?.keepalive,\n    headers: options.client.config?.storage?.fetch?.headers,\n    requestTimeoutMs: options.requestTimeoutMs ?? options.client.config?.storage?.fetch?.requestTimeoutMs ?? 60000\n  });\n  if (!res.ok) {\n    res.body?.cancel();\n    throw new Error(`Failed to download file: ${res.statusText}`);\n  }\n  return res;\n}\n//# sourceMappingURL=download.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}