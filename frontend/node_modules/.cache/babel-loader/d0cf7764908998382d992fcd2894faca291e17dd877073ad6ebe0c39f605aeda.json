{"ast":null,"code":"import { useMutation } from \"@tanstack/react-query\";\nimport { sendTransaction } from \"../../../../transaction/actions/send-transaction.js\";\nimport { getTransactionGasCost } from \"../../../../transaction/utils.js\";\nimport { resolvePromisedValue } from \"../../../../utils/promise/resolve-promised-value.js\";\nimport { getTokenBalance } from \"../../../../wallets/utils/getTokenBalance.js\";\nimport { getWalletBalance } from \"../../../../wallets/utils/getWalletBalance.js\";\nimport { fetchBuySupportedDestinations } from \"../../../web/ui/ConnectWallet/screens/Buy/swap/useSwapSupportedChains.js\";\nimport { hasSponsoredTransactionsEnabled } from \"../../utils/wallet.js\";\n/**\n * A hook to send a transaction.\n * @returns A mutation object to send a transaction.\n * @example\n * ```jsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * // later\n * sendTx(tx);\n * ```\n * @internal\n */\nexport function useSendTransactionCore(args) {\n  const {\n    showPayModal,\n    gasless,\n    wallet,\n    switchChain\n  } = args;\n  let _account = wallet?.getAccount();\n  return useMutation({\n    mutationFn: async tx => {\n      // switch chain if needed\n      if (wallet && tx.chain.id !== wallet.getChain()?.id) {\n        await switchChain(tx.chain);\n        // in smart wallet case, account may change after chain switch\n        _account = wallet.getAccount();\n      }\n      const account = _account;\n      if (!account) {\n        throw new Error(\"No active account\");\n      }\n      if (!showPayModal) {\n        return sendTransaction({\n          transaction: tx,\n          account,\n          gasless\n        });\n      }\n      return new Promise((resolve, reject) => {\n        const sendTx = async () => {\n          try {\n            const res = await sendTransaction({\n              transaction: tx,\n              account,\n              gasless\n            });\n            resolve(res);\n          } catch (e) {\n            reject(e);\n          }\n        };\n        (async () => {\n          try {\n            const [_nativeValue, _erc20Value, supportedDestinations] = await Promise.all([resolvePromisedValue(tx.value), resolvePromisedValue(tx.erc20Value), fetchBuySupportedDestinations(tx.client).catch(() => null)]);\n            if (!supportedDestinations) {\n              // could not fetch supported destinations, just send the tx\n              sendTx();\n              return;\n            }\n            if (!supportedDestinations.map(x => x.chain.id).includes(tx.chain.id) || _erc20Value && !supportedDestinations.some(x => x.chain.id === tx.chain.id && x.tokens.find(t => t.address.toLowerCase() === _erc20Value.tokenAddress.toLowerCase()))) {\n              // chain/token not supported, just send the tx\n              sendTx();\n              return;\n            }\n            const nativeValue = _nativeValue || 0n;\n            const erc20Value = _erc20Value?.amountWei || 0n;\n            const [nativeBalance, erc20Balance, gasCost] = await Promise.all([getWalletBalance({\n              client: tx.client,\n              address: account.address,\n              chain: tx.chain\n            }), _erc20Value?.tokenAddress ? getTokenBalance({\n              client: tx.client,\n              account,\n              chain: tx.chain,\n              tokenAddress: _erc20Value.tokenAddress\n            }) : undefined, getTransactionGasCost(tx, account.address)]);\n            const gasSponsored = hasSponsoredTransactionsEnabled(wallet);\n            const txGasCost = gasSponsored ? 0n : gasCost;\n            const nativeCost = nativeValue + txGasCost;\n            const shouldShowModal = erc20Value > 0n && erc20Balance && erc20Balance.value < erc20Value || nativeCost > 0n && nativeBalance.value < nativeCost;\n            if (shouldShowModal) {\n              showPayModal({\n                tx,\n                sendTx,\n                rejectTx: reject,\n                resolveTx: resolve\n              });\n            } else {\n              sendTx();\n            }\n          } catch (e) {\n            console.error(\"Failed to estimate cost\", e);\n            // send it anyway?\n            sendTx();\n          }\n        })();\n      });\n    }\n  });\n}\n//# sourceMappingURL=useSendTransaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}