{"ast":null,"code":"import { useQueries } from \"@tanstack/react-query\";\nimport { useState, useSyncExternalStore } from \"react\";\nimport { getBuyWithCryptoStatus } from \"../../../../../../../pay/buyWithCrypto/getStatus.js\";\nimport { getBuyWithFiatStatus } from \"../../../../../../../pay/buyWithFiat/getStatus.js\";\nimport { useBuyHistory } from \"../../../../../../core/hooks/pay/useBuyHistory.js\";\nimport { useActiveAccount } from \"../../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { pendingTransactions } from \"../swap/pendingSwapTx.js\";\nexport function useBuyTransactionsToShow(client) {\n  const account = useActiveAccount();\n  const [pageIndex, setPageIndex] = useState(0);\n  const txStatusList = [];\n  const PAGE_SIZE = 10;\n  const buyHistory = useBuyHistory({\n    walletAddress: account?.address || \"\",\n    start: pageIndex * PAGE_SIZE,\n    count: PAGE_SIZE,\n    client\n  }, {\n    refetchInterval: 10 * 1000 // 10 seconds\n  });\n  const pendingTxStoreValue = useSyncExternalStore(pendingTransactions.subscribe, pendingTransactions.getValue);\n  const pendingStatusQueries = useQueries({\n    queries: pendingTxStoreValue.map(tx => {\n      return {\n        queryKey: [\"pending-tx-status\", tx],\n        queryFn: async () => {\n          if (tx.type === \"swap\") {\n            const swapStatus = await getBuyWithCryptoStatus({\n              client: client,\n              transactionHash: tx.txHash\n            });\n            if (swapStatus.status === \"NOT_FOUND\" || swapStatus.status === \"NONE\") {\n              return null;\n            }\n            return {\n              type: \"swap\",\n              status: swapStatus\n            };\n          }\n          const fiatStatus = await getBuyWithFiatStatus({\n            client: client,\n            intentId: tx.intentId\n          });\n          if (fiatStatus.status === \"NOT_FOUND\" || fiatStatus.status === \"NONE\") {\n            return null;\n          }\n          return {\n            type: \"fiat\",\n            status: fiatStatus\n          };\n        },\n        refetchInterval: 10 * 1000 // 10 seconds\n      };\n    })\n  });\n  if (pendingStatusQueries.length > 0 && pageIndex === 0) {\n    for (const query of pendingStatusQueries) {\n      if (query.data) {\n        const txStatusInfo = query.data;\n        // if already present in endpoint - don't add it\n        if (buyHistory.data) {\n          if (txStatusInfo.type === \"swap\") {\n            const isPresent = buyHistory.data.page.find(tx => {\n              if (\"buyWithCryptoStatus\" in tx && tx.buyWithCryptoStatus.status !== \"NOT_FOUND\") {\n                return tx.buyWithCryptoStatus.source?.transactionHash === txStatusInfo.status.source?.transactionHash;\n              }\n              return false;\n            });\n            if (!isPresent) {\n              txStatusList.push(txStatusInfo);\n            }\n          }\n          if (txStatusInfo.type === \"fiat\") {\n            const isPresent = buyHistory.data.page.find(tx => {\n              if (\"buyWithFiatStatus\" in tx && tx.buyWithFiatStatus.status !== \"NOT_FOUND\") {\n                return tx.buyWithFiatStatus.intentId === txStatusInfo.status.intentId;\n              }\n              return false;\n            });\n            if (!isPresent) {\n              txStatusList.push(txStatusInfo);\n            }\n          }\n        } else {\n          // if no buy history available for this walllet - add without duplicate check\n          txStatusList.push(txStatusInfo);\n        }\n      }\n    }\n  }\n  if (buyHistory.data) {\n    for (const tx of buyHistory.data.page) {\n      if (\"buyWithCryptoStatus\" in tx) {\n        if (tx.buyWithCryptoStatus.status !== \"NOT_FOUND\" && tx.buyWithCryptoStatus.status !== \"NONE\") {\n          txStatusList.push({\n            type: \"swap\",\n            status: tx.buyWithCryptoStatus\n          });\n        }\n      } else {\n        if (tx.buyWithFiatStatus.status !== \"NOT_FOUND\" && tx.buyWithFiatStatus.status !== \"NONE\") {\n          txStatusList.push({\n            type: \"fiat\",\n            status: tx.buyWithFiatStatus\n          });\n        }\n      }\n    }\n  }\n  const hidePagination = !buyHistory.data || buyHistory.data && !buyHistory.data.hasNextPage && pageIndex === 0;\n  return {\n    pageIndex,\n    setPageIndex,\n    txInfosToShow: txStatusList,\n    hidePagination,\n    isLoading: buyHistory.isLoading,\n    pagination: buyHistory.data ? {\n      hasNextPage: buyHistory.data.hasNextPage\n    } : undefined\n  };\n}\n//# sourceMappingURL=useBuyTransactionsToShow.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}