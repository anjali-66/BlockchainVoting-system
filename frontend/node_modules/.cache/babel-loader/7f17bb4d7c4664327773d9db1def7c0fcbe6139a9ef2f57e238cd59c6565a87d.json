{"ast":null,"code":"import { getClientFetch } from \"../../../../utils/fetch.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nimport { randomBytesHex } from \"../../../../utils/random.js\";\nimport { ClientScopedStorage } from \"./client-scoped-storage.js\";\nimport { getLoginCallbackUrl } from \"./getLoginPath.js\";\n/**\n * Does no real authentication, just issues a temporary token for the user.\n * @internal\n */\nexport async function guestAuthenticate(args) {\n  const storage = new ClientScopedStorage({\n    storage: args.storage,\n    clientId: args.client.clientId,\n    ecosystem: args.ecosystem\n  });\n  let sessionId = await storage.getGuestSessionId();\n  if (!sessionId) {\n    sessionId = randomBytesHex(32);\n    storage.saveGuestSessionId(sessionId);\n  }\n  const clientFetch = getClientFetch(args.client, args.ecosystem);\n  const path = getLoginCallbackUrl({\n    authOption: \"guest\",\n    client: args.client,\n    ecosystem: args.ecosystem\n  });\n  const res = await clientFetch(`${path}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: stringify({\n      sessionId\n    })\n  });\n  if (!res.ok) throw new Error(\"Failed to generate guest account\");\n  return await res.json();\n}\n//# sourceMappingURL=guest.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}