{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { ExclamationTriangleIcon } from \"@radix-ui/react-icons\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { fontSize, iconSize, spacing } from \"../../../../core/design-system/index.js\";\nimport { useConnectionManager } from \"../../../../core/providers/connection-manager.js\";\nimport { useWalletInfo } from \"../../../../core/utils/wallet.js\";\nimport { LoadingScreen } from \"../../../wallets/shared/LoadingScreen.js\";\nimport { getSmartWalletLocale } from \"../../../wallets/smartWallet/locale/getSmartWalletLocale.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Spinner } from \"../../components/Spinner.js\";\nimport { Container, ModalHeader } from \"../../components/basic.js\";\nimport { Button } from \"../../components/buttons.js\";\nimport { Text } from \"../../components/text.js\";\nimport { AnyWalletConnectUI } from \"./AnyWalletConnectUI.js\";\n/**\n * @internal\n */\nexport function SmartConnectUI(props) {\n  const personalWalletInfo = useWalletInfo(props.personalWallet.id);\n  const [keyConnected, setKeyConnected] = useState(false);\n  if (!personalWalletInfo.data) {\n    return _jsx(LoadingScreen, {});\n  }\n  // connect personal wallet\n  if (!keyConnected) {\n    return _jsx(AnyWalletConnectUI, {\n      wallet: props.personalWallet,\n      done: () => {\n        setKeyConnected(true);\n      },\n      onBack: props.onBack,\n      setModalVisibility: props.setModalVisibility,\n      chain: props.chain,\n      chains: props.chains,\n      client: props.client,\n      meta: props.meta,\n      size: props.size,\n      walletConnect: props.walletConnect,\n      connectLocale: props.connectLocale\n    });\n  }\n  return _jsx(SmartWalletConnecting, {\n    done: props.done,\n    personalWallet: props.personalWallet,\n    accountAbstraction: props.accountAbstraction,\n    onBack: props.onBack,\n    personalWalletInfo: personalWalletInfo.data,\n    localeId: props.connectLocale.id,\n    size: props.size,\n    client: props.client\n  });\n}\nfunction SmartWalletConnecting(props) {\n  const localeQuery = useQuery({\n    queryKey: [\"getSmartWalletLocale\", props.localeId],\n    queryFn: () => getSmartWalletLocale(props.localeId)\n  });\n  const {\n    chain: smartWalletChain\n  } = props.accountAbstraction;\n  const {\n    personalWallet\n  } = props;\n  const {\n    done\n  } = props;\n  const [personalWalletChainId, setPersonalWalletChainId] = useState(personalWallet.getChain()?.id);\n  useEffect(() => {\n    const unsubChainChanged = personalWallet.subscribe(\"chainChanged\", chain => setPersonalWalletChainId(chain.id));\n    return () => {\n      unsubChainChanged();\n    };\n  }, [personalWallet]);\n  const wrongNetwork = personalWalletChainId !== smartWalletChain.id;\n  const [smartWalletConnectionStatus, setSmartWalletConnectionStatus] = useState(\"idle\");\n  const [personalWalletChainSwitchStatus, setPersonalWalletChainSwitchStatus] = useState(\"idle\");\n  const connectionManager = useConnectionManager();\n  const handleConnect = useCallback(async () => {\n    if (!personalWallet) {\n      throw new Error(\"No personal wallet\");\n    }\n    setSmartWalletConnectionStatus(\"connecting\");\n    try {\n      const connected = await connectionManager.handleConnection(personalWallet, {\n        accountAbstraction: props.accountAbstraction,\n        client: props.client\n      });\n      done(connected);\n      setSmartWalletConnectionStatus(\"idle\");\n    } catch (e) {\n      console.error(e);\n      setSmartWalletConnectionStatus(\"connect-error\");\n    }\n  }, [done, personalWallet, props.client, props.accountAbstraction, connectionManager]);\n  const connectStarted = useRef(false);\n  useEffect(() => {\n    if (!wrongNetwork && !connectStarted.current) {\n      handleConnect();\n      connectStarted.current = true;\n    }\n  }, [handleConnect, wrongNetwork]);\n  if (!localeQuery.data) {\n    return _jsx(LoadingScreen, {});\n  }\n  if (wrongNetwork) {\n    return _jsxs(Container, {\n      fullHeight: true,\n      animate: \"fadein\",\n      flex: \"column\",\n      children: [_jsx(Container, {\n        p: \"lg\",\n        children: _jsx(ModalHeader, {\n          title: props.personalWalletInfo.name,\n          onBack: props.onBack\n        })\n      }), props.size === \"compact\" && _jsx(Spacer, {\n        y: \"lg\"\n      }), _jsx(Container, {\n        expand: true,\n        flex: \"column\",\n        center: \"both\",\n        p: \"lg\",\n        children: _jsxs(Container, {\n          p: props.size === \"wide\" ? \"lg\" : undefined,\n          children: [_jsx(Container, {\n            flex: \"row\",\n            center: \"x\",\n            color: \"danger\",\n            children: _jsx(ExclamationTriangleIcon, {\n              width: iconSize.lg,\n              height: iconSize.lg\n            })\n          }), _jsx(Spacer, {\n            y: \"md\"\n          }), _jsx(Text, {\n            size: \"lg\",\n            color: \"primaryText\",\n            center: true,\n            weight: 500,\n            children: localeQuery.data.wrongNetworkScreen.title\n          }), _jsx(Spacer, {\n            y: \"lg\"\n          }), _jsx(Text, {\n            multiline: true,\n            center: true,\n            children: localeQuery.data.wrongNetworkScreen.subtitle\n          }), _jsx(Spacer, {\n            y: \"xl\"\n          }), _jsxs(Container, {\n            flex: \"column\",\n            gap: \"md\",\n            children: [_jsxs(Button, {\n              type: \"button\",\n              fullWidth: true,\n              variant: \"accent\",\n              style: {\n                display: \"flex\",\n                alignItems: \"center\",\n                gap: spacing.sm\n              },\n              onClick: async () => {\n                if (!personalWallet.switchChain) {\n                  setPersonalWalletChainSwitchStatus(\"switch-error\");\n                  throw new Error(\"No switchChain method\");\n                }\n                try {\n                  setPersonalWalletChainSwitchStatus(\"switching\");\n                  await personalWallet.switchChain(smartWalletChain);\n                  const newChain = personalWallet.getChain();\n                  if (newChain) {\n                    setPersonalWalletChainId(newChain.id);\n                  }\n                  setPersonalWalletChainSwitchStatus(\"idle\");\n                } catch (e) {\n                  console.error(e);\n                  setPersonalWalletChainSwitchStatus(\"switch-error\");\n                }\n              },\n              children: [personalWalletChainSwitchStatus === \"switching\" ? \"Switching\" : \"Switch Network\", personalWalletChainSwitchStatus === \"switching\" && _jsx(Spinner, {\n                size: \"sm\",\n                color: \"accentButtonText\"\n              })]\n            }), _jsxs(Container, {\n              flex: \"row\",\n              gap: \"sm\",\n              center: \"both\",\n              color: \"danger\",\n              style: {\n                textAlign: \"center\",\n                fontSize: fontSize.sm,\n                opacity: personalWalletChainSwitchStatus === \"switch-error\" ? 1 : 0,\n                transition: \"opacity 200ms ease\"\n              },\n              children: [_jsx(ExclamationTriangleIcon, {\n                width: iconSize.sm,\n                height: iconSize.sm\n              }), _jsx(\"span\", {\n                children: localeQuery.data.wrongNetworkScreen.failedToSwitch\n              })]\n            })]\n          })]\n        })\n      })]\n    });\n  }\n  if (smartWalletConnectionStatus === \"connect-error\") {\n    return _jsx(Container, {\n      fullHeight: true,\n      animate: \"fadein\",\n      flex: \"column\",\n      center: \"both\",\n      p: \"lg\",\n      style: {\n        minHeight: \"300px\"\n      },\n      children: _jsx(Text, {\n        color: \"danger\",\n        children: localeQuery.data.failedToConnect\n      })\n    });\n  }\n  return _jsxs(Container, {\n    fullHeight: true,\n    flex: \"column\",\n    center: \"both\",\n    style: {\n      minHeight: \"300px\"\n    },\n    children: [_jsx(Text, {\n      color: \"primaryText\",\n      multiline: true,\n      center: true,\n      children: localeQuery.data.connecting\n    }), _jsx(Spacer, {\n      y: \"lg\"\n    }), _jsx(Spinner, {\n      color: \"accentText\",\n      size: \"lg\"\n    })]\n  });\n}\n//# sourceMappingURL=SmartWalletConnectUI.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}