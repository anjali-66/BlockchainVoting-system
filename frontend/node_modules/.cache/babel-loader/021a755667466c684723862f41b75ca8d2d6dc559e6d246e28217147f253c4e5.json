{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { ChevronLeftIcon } from \"@radix-ui/react-icons\";\nimport { Suspense, lazy, useEffect, useRef, useState } from \"react\";\nimport { createWallet } from \"../../../../wallets/create-wallet.js\";\nimport { getInstalledWalletProviders } from \"../../../../wallets/injected/mipdStore.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { fontSize, iconSize, radius, spacing } from \"../../../core/design-system/index.js\";\nimport { useSetSelectionData } from \"../../providers/wallet-ui-states-provider.js\";\nimport { sortWallets } from \"../../utils/sortWallets.js\";\nimport { LoadingScreen } from \"../../wallets/shared/LoadingScreen.js\";\nimport { Img } from \"../components/Img.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { TextDivider } from \"../components/TextDivider.js\";\nimport { Container, Line, ModalHeader, ScreenBottomContainer, noScrollBar } from \"../components/basic.js\";\nimport { Button, IconButton } from \"../components/buttons.js\";\nimport { ModalTitle } from \"../components/modalElements.js\";\nimport { Link } from \"../components/text.js\";\nimport { Text } from \"../components/text.js\";\nimport { StyledDiv, StyledUl } from \"../design-system/elements.js\";\nimport { SmartConnectUI } from \"./Modal/SmartWalletConnectUI.js\";\nimport { TOS } from \"./Modal/TOS.js\";\nimport { useScreenContext } from \"./Modal/screen.js\";\nimport { PoweredByThirdweb } from \"./PoweredByTW.js\";\nimport { WalletButtonEl, WalletEntryButton } from \"./WalletEntryButton.js\";\nimport { WalletTypeRowButton } from \"./WalletTypeRowButton.js\";\nimport { compactModalMaxHeight } from \"./constants.js\";\nimport { OutlineWalletIcon } from \"./icons/OutlineWalletIcon.js\";\nconst InAppWalletSelectionUI = /* @__PURE__ */lazy(() => import(\"../../wallets/in-app/InAppWalletSelectionUI.js\"));\n// const localWalletId = \"local\";\nconst inAppWalletId = \"inApp\";\n/**\n * @internal\n */\nexport function WalletSelector(props) {\n  const [personalWallet, setPersonalWallet] = useState(null);\n  if (!props.accountAbstraction) {\n    return _jsx(WalletSelectorInner, {\n      ...props\n    });\n  }\n  if (personalWallet) {\n    return _jsx(SmartConnectUI, {\n      accountAbstraction: props.accountAbstraction,\n      done: props.done,\n      personalWallet: personalWallet,\n      setModalVisibility: props.setModalVisibility,\n      onBack: props.goBack,\n      meta: props.meta,\n      size: props.size,\n      chain: props.chain,\n      chains: props.chains,\n      client: props.client,\n      walletConnect: props.walletConnect,\n      connectLocale: props.connectLocale\n    });\n  }\n  return _jsx(WalletSelectorInner, {\n    ...props,\n    done: w => {\n      setPersonalWallet(w);\n    }\n  });\n}\n/**\n * @internal\n */\nconst WalletSelectorInner = props => {\n  const {\n    walletIdsToHide\n  } = props;\n  const isCompact = props.size === \"compact\";\n  const [isWalletGroupExpanded, setIsWalletGroupExpanded] = useState(false);\n  // This is only used if requireApproval is true\n  const [approvedTOS, setApprovedTOS] = useState(false);\n  const installedWallets = getInstalledWallets();\n  const propsWallets = props.wallets;\n  let _wallets = [...propsWallets];\n  for (const iW of installedWallets) {\n    if (!propsWallets.find(w => w.id === iW.id)) {\n      _wallets.push(iW);\n    }\n  }\n  if (walletIdsToHide) {\n    _wallets = _wallets.filter(w => !walletIdsToHide?.includes(w.id));\n  }\n  const localWalletConfig = false; // _wallets.find((w) => w.id === localWalletId);\n  const nonLocalWalletConfigs = _wallets; // _wallets.filter((w) => w.id !== localWalletId);\n  const socialWallets = nonLocalWalletConfigs.filter(w => w.id === inAppWalletId);\n  const eoaWallets = sortWallets(nonLocalWalletConfigs.filter(w => w.id !== inAppWalletId), props.recommendedWallets);\n  const continueAsGuest = localWalletConfig && _jsx(Button, {\n    fullWidth: true,\n    variant: isCompact ? \"outline\" : \"link\",\n    style: !isCompact ? {\n      textAlign: \"left\",\n      justifyContent: \"flex-start\"\n    } : undefined,\n    onClick: () => {\n      props.selectWallet(localWalletConfig);\n    },\n    \"data-test\": \"continue-as-guest-button\",\n    children: props.connectLocale.continueAsGuest\n  });\n  // prevent accidental clicks on the TW icon when clicking on back icon from previous screen\n  const enableTWIconLink = useRef(false);\n  useEffect(() => {\n    setTimeout(() => {\n      enableTWIconLink.current = true;\n    }, 1000);\n  }, []);\n  const twTitle = props.modalHeader ? _jsx(ModalHeader, {\n    title: props.modalHeader.title,\n    onBack: props.modalHeader.onBack\n  }) : _jsxs(Container, {\n    gap: \"xxs\",\n    center: \"y\",\n    flex: \"row\",\n    children: [!props.meta.titleIconUrl ? null : _jsx(Img, {\n      src: props.meta.titleIconUrl,\n      width: iconSize.md,\n      height: iconSize.md,\n      client: props.client\n    }), _jsxs(ModalTitle, {\n      children: [\" \", props.title, \" \"]\n    })]\n  });\n  const handleSelect = async wallet => {\n    // if (connectionStatus !== \"disconnected\") {\n    //   await disconnect();\n    // }\n    props.selectWallet(wallet);\n  };\n  const connectAWallet = _jsx(WalletTypeRowButton, {\n    client: props.client,\n    icon: OutlineWalletIcon,\n    onClick: () => {\n      setIsWalletGroupExpanded(true);\n    },\n    title: props.connectLocale.connectAWallet\n  });\n  const newToWallets = _jsxs(Container, {\n    flex: \"row\",\n    style: {\n      justifyContent: \"space-between\"\n    },\n    children: [_jsx(Text, {\n      color: \"secondaryText\",\n      size: \"sm\",\n      weight: 500,\n      children: props.connectLocale.newToWallets\n    }), _jsx(Link, {\n      weight: 500,\n      size: \"sm\",\n      target: \"_blank\",\n      href: \"https://blog.thirdweb.com/web3-wallet/\",\n      children: props.connectLocale.getStarted\n    })]\n  });\n  const tos = props.meta.requireApproval || props.meta.termsOfServiceUrl || props.meta.privacyPolicyUrl ? _jsx(TOS, {\n    termsOfServiceUrl: props.meta.termsOfServiceUrl,\n    privacyPolicyUrl: props.meta.privacyPolicyUrl,\n    locale: props.connectLocale.agreement,\n    requireApproval: props.meta.requireApproval,\n    isApproved: approvedTOS,\n    onApprove: () => setApprovedTOS(!approvedTOS)\n  }) : undefined;\n  let topSection;\n  let bottomSection;\n  // wide modal\n  if (!isCompact) {\n    topSection = _jsx(WalletSelection, {\n      wallets: nonLocalWalletConfigs,\n      selectWallet: handleSelect,\n      done: props.done,\n      goBack: props.goBack,\n      onShowAll: props.onShowAll,\n      client: props.client,\n      connectLocale: props.connectLocale,\n      size: props.size,\n      recommendedWallets: props.recommendedWallets,\n      chain: props.chain,\n      showAllWallets: props.showAllWallets,\n      diableSelectionDataReset: props.disableSelectionDataReset,\n      disabled: props.meta.requireApproval && !approvedTOS\n    });\n    if (continueAsGuest) {\n      bottomSection = _jsx(ScreenBottomContainer, {\n        children: continueAsGuest\n      });\n    }\n  }\n  // compact\n  else {\n    // no social logins\n    if (socialWallets.length === 0) {\n      topSection = _jsx(WalletSelection, {\n        wallets: nonLocalWalletConfigs,\n        selectWallet: handleSelect,\n        done: props.done,\n        goBack: props.goBack,\n        onShowAll: props.onShowAll,\n        client: props.client,\n        connectLocale: props.connectLocale,\n        size: props.size,\n        recommendedWallets: props.recommendedWallets,\n        chain: props.chain,\n        showAllWallets: props.showAllWallets,\n        diableSelectionDataReset: props.disableSelectionDataReset,\n        disabled: props.meta.requireApproval && !approvedTOS\n      });\n      bottomSection = _jsxs(_Fragment, {\n        children: [_jsx(Line, {}), _jsxs(Container, {\n          flex: \"column\",\n          p: \"md\",\n          gap: \"md\",\n          children: [newToWallets, continueAsGuest]\n        }), !continueAsGuest && _jsx(Line, {}), tos && _jsx(Container, {\n          px: \"md\",\n          style: {\n            paddingBottom: spacing.md,\n            paddingTop: continueAsGuest ? 0 : spacing.md\n          },\n          children: tos\n        })]\n      });\n    }\n    // social logins\n    else {\n      // not expanded state\n      if (!isWalletGroupExpanded) {\n        topSection = _jsxs(Container, {\n          px: \"xs\",\n          children: [_jsx(WalletSelection, {\n            wallets: socialWallets,\n            selectWallet: handleSelect,\n            done: props.done,\n            goBack: props.goBack,\n            client: props.client,\n            connectLocale: props.connectLocale,\n            size: props.size,\n            recommendedWallets: props.recommendedWallets,\n            chain: props.chain,\n            showAllWallets: props.showAllWallets,\n            diableSelectionDataReset: props.disableSelectionDataReset,\n            disabled: props.meta.requireApproval && !approvedTOS\n          }), eoaWallets.length > 0 && _jsxs(_Fragment, {\n            children: [_jsx(TextDivider, {\n              text: props.connectLocale.or\n            }), _jsx(Spacer, {\n              y: \"lg\"\n            })]\n          })]\n        });\n        // only social login - no eoa wallets\n        if (eoaWallets.length === 0) {\n          bottomSection = tos || continueAsGuest ? _jsxs(_Fragment, {\n            children: [_jsx(Spacer, {\n              y: \"md\"\n            }), _jsx(Line, {}), continueAsGuest && _jsxs(Container, {\n              p: \"lg\",\n              children: [\" \", continueAsGuest]\n            }), tos && _jsxs(Container, {\n              p: \"md\",\n              children: [\" \", tos, \" \"]\n            })]\n          }) : _jsx(Spacer, {\n            y: \"sm\"\n          });\n        }\n        // social login + eoa wallets\n        else {\n          // social login + More than 1 eoa wallets\n          if (eoaWallets.length > 1) {\n            bottomSection = _jsxs(Container, {\n              flex: \"column\",\n              style: {\n                position: \"relative\"\n              },\n              gap: \"sm\",\n              children: [_jsx(GradientDiv, {}), _jsxs(Container, {\n                px: \"lg\",\n                flex: \"column\",\n                gap: \"md\",\n                children: [connectAWallet, continueAsGuest]\n              }), tos ? _jsxs(Container, {\n                p: \"md\",\n                children: [\" \", tos, \" \"]\n              }) : _jsx(Spacer, {\n                y: \"xxs\"\n              })]\n            });\n          }\n          // social login + single eoa wallet\n          else {\n            bottomSection = _jsxs(_Fragment, {\n              children: [_jsx(Container, {\n                px: \"lg\",\n                children: _jsx(WalletSelection, {\n                  wallets: eoaWallets,\n                  selectWallet: handleSelect,\n                  done: props.done,\n                  goBack: props.goBack,\n                  onShowAll: props.onShowAll,\n                  client: props.client,\n                  connectLocale: props.connectLocale,\n                  size: props.size,\n                  recommendedWallets: props.recommendedWallets,\n                  chain: props.chain,\n                  showAllWallets: props.showAllWallets,\n                  diableSelectionDataReset: props.disableSelectionDataReset,\n                  disabled: props.meta.requireApproval && !approvedTOS\n                })\n              }), continueAsGuest && _jsx(Container, {\n                flex: \"column\",\n                px: \"lg\",\n                gap: \"lg\",\n                children: continueAsGuest\n              }), tos ? _jsxs(_Fragment, {\n                children: [continueAsGuest ? _jsx(Spacer, {\n                  y: \"md\"\n                }) : _jsx(Line, {}), _jsxs(Container, {\n                  p: \"md\",\n                  children: [\" \", tos, \" \"]\n                })]\n              }) : _jsx(_Fragment, {\n                children: continueAsGuest && _jsx(Spacer, {\n                  y: \"xl\"\n                })\n              })]\n            });\n          }\n        }\n      }\n      // expanded state\n      else {\n        topSection = _jsx(WalletSelection, {\n          wallets: eoaWallets,\n          selectWallet: handleSelect,\n          done: props.done,\n          goBack: props.goBack,\n          onShowAll: props.onShowAll,\n          client: props.client,\n          connectLocale: props.connectLocale,\n          size: props.size,\n          recommendedWallets: props.recommendedWallets,\n          chain: props.chain,\n          showAllWallets: props.showAllWallets,\n          diableSelectionDataReset: props.disableSelectionDataReset,\n          disabled: props.meta.requireApproval && !approvedTOS\n        });\n        bottomSection = _jsx(ScreenBottomContainer, {\n          children: newToWallets\n        });\n      }\n    }\n  }\n  // hide the header for embed - unless it's customized\n  const showHeader = !props.hideHeader || props.modalHeader;\n  return _jsxs(Container, {\n    scrollY: true,\n    flex: \"column\",\n    animate: \"fadein\",\n    fullHeight: true,\n    style: {\n      maxHeight: props.size === \"compact\" ? compactModalMaxHeight : undefined\n    },\n    children: [showHeader && _jsx(Container, {\n      p: \"lg\",\n      children: isWalletGroupExpanded ? _jsx(ModalHeader, {\n        title: twTitle,\n        onBack: () => {\n          setIsWalletGroupExpanded(false);\n        }\n      }) : twTitle\n    }), _jsxs(Container, {\n      expand: true,\n      scrollY: true,\n      px: \"md\",\n      style: !showHeader ? {\n        paddingTop: spacing.lg\n      } : {\n        paddingTop: \"2px\"\n      },\n      children: [!showHeader && isWalletGroupExpanded && _jsx(Container, {\n        flex: \"row\",\n        center: \"y\",\n        style: {\n          padding: spacing.sm,\n          paddingTop: 0\n        },\n        children: _jsxs(IconButton, {\n          onClick: () => {\n            setIsWalletGroupExpanded(false);\n          },\n          style: {\n            gap: spacing.xxs,\n            transform: `translateX(-${spacing.xs})`,\n            paddingBlock: spacing.xxs,\n            paddingRight: spacing.xs\n          },\n          children: [_jsx(ChevronLeftIcon, {\n            width: iconSize.sm,\n            height: iconSize.sm\n          }), props.connectLocale.goBackButton]\n        })\n      }), topSection]\n    }), bottomSection, isCompact && props.meta.showThirdwebBranding !== false && _jsx(Container, {\n      py: \"md\",\n      children: _jsx(PoweredByThirdweb, {})\n    })]\n  });\n};\nlet _installedWallets = [];\nfunction getInstalledWallets() {\n  if (_installedWallets.length === 0) {\n    const providers = getInstalledWalletProviders();\n    const walletIds = providers.map(provider => provider.info.rdns);\n    _installedWallets = walletIds.map(w => createWallet(w));\n  }\n  return _installedWallets;\n}\n/**\n * @internal\n */\nconst WalletSelection = props => {\n  const wallets = sortWallets(props.wallets, props.recommendedWallets);\n  const {\n    screen\n  } = useScreenContext();\n  const setSelectionData = useSetSelectionData();\n  return _jsxs(WalletList, {\n    style: {\n      minHeight: \"100%\",\n      maxHeight: \"370px\"\n    },\n    children: [wallets.map(wallet => {\n      const isActive = screen ? typeof screen === \"object\" && screen.id === wallet.id : false;\n      return _jsx(\"li\", {\n        children: wallet.id === \"inApp\" && props.size === \"compact\" ? _jsx(Suspense, {\n          fallback: _jsx(LoadingScreen, {\n            height: \"195px\"\n          }),\n          children: _jsx(InAppWalletSelectionUI, {\n            done: () => props.done(wallet),\n            select: () => props.selectWallet(wallet),\n            wallet: wallet,\n            goBack: props.goBack,\n            client: props.client,\n            connectLocale: props.connectLocale,\n            size: props.size,\n            recommendedWallets: props.recommendedWallets,\n            chain: props.chain,\n            disabled: props.disabled\n          })\n        }) : _jsx(WalletEntryButton, {\n          walletId: wallet.id,\n          selectWallet: () => {\n            if (!props.diableSelectionDataReset) {\n              setSelectionData({});\n            }\n            props.selectWallet(wallet);\n          },\n          connectLocale: props.connectLocale,\n          client: props.client,\n          recommendedWallets: props.recommendedWallets,\n          isActive: isActive,\n          badge: undefined\n        })\n      }, wallet.id);\n    }), props.onShowAll && props.showAllWallets !== false && _jsx(ButtonContainer, {\n      children: _jsxs(WalletButtonEl, {\n        onClick: props.onShowAll,\n        children: [_jsxs(ShowAllWalletsIcon, {\n          children: [_jsx(\"div\", {\n            \"data-dot\": true\n          }), _jsx(\"div\", {\n            \"data-dot\": true\n          }), _jsx(\"div\", {\n            \"data-dot\": true\n          }), _jsx(\"div\", {\n            \"data-dot\": true\n          })]\n        }), _jsxs(Container, {\n          flex: \"row\",\n          gap: \"xs\",\n          children: [_jsx(Text, {\n            color: \"primaryText\",\n            children: \"All Wallets\"\n          }), _jsx(BadgeText, {\n            children: \" 500+ \"\n          })]\n        })]\n      })\n    })]\n  });\n};\nconst BadgeText = /* @__PURE__ */StyledDiv(() => {\n  const theme = useCustomTheme();\n  return {\n    backgroundColor: theme.colors.secondaryButtonBg,\n    paddingBlock: \"3px\",\n    paddingInline: spacing.xxs,\n    fontSize: fontSize.xs,\n    borderRadius: radius.sm,\n    color: theme.colors.secondaryText\n  };\n});\nconst ButtonContainer = /* @__PURE__ */StyledDiv(() => {\n  const theme = useCustomTheme();\n  return {\n    \"&:hover [data-dot]\": {\n      background: theme.colors.primaryText\n    }\n  };\n});\nconst ShowAllWalletsIcon = /* @__PURE__ */StyledDiv(() => {\n  const theme = useCustomTheme();\n  return {\n    width: `${iconSize.xl}px`,\n    height: `${iconSize.xl}px`,\n    backgroundColor: theme.colors.tertiaryBg,\n    border: `2px solid ${theme.colors.borderColor}`,\n    borderRadius: radius.md,\n    display: \"grid\",\n    gridTemplateColumns: \"1fr 1fr\",\n    justifyItems: \"center\",\n    alignItems: \"center\",\n    padding: spacing.xs,\n    \"& div\": {\n      transition: \"background 200ms ease\",\n      background: theme.colors.secondaryText,\n      borderRadius: \"50%\",\n      width: \"10px\",\n      height: \"10px\"\n    }\n  };\n});\nconst WalletList = /* @__PURE__ */StyledUl({\n  all: \"unset\",\n  listStyleType: \"none\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: \"2px\",\n  boxSizing: \"border-box\",\n  overflowY: \"auto\",\n  flex: 1,\n  ...noScrollBar,\n  // to show the box-shadow of inputs that overflows\n  padding: \"2px\",\n  margin: \"-2px\",\n  marginBottom: 0,\n  paddingBottom: spacing.lg\n});\nconst GradientDiv = /* @__PURE__ */StyledDiv(_ => {\n  const theme = useCustomTheme();\n  theme.colors.modalBg;\n  return {\n    height: spacing.lg,\n    position: \"absolute\",\n    top: `-${spacing.lg}`,\n    left: 0,\n    width: \"100%\",\n    background: `linear-gradient(to bottom, transparent 0%, ${theme.colors.modalBg} 80%)`,\n    pointerEvents: \"none\"\n  };\n});\n//# sourceMappingURL=WalletSelector.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}