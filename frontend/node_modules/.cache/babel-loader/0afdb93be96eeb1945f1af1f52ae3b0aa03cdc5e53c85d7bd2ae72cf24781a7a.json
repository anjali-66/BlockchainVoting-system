{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Cross1Icon, ExternalLinkIcon, TriangleDownIcon } from \"@radix-ui/react-icons\";\nimport { useMemo } from \"react\";\nimport { getCachedChain } from \"../../../../../../../chains/utils.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../../constants/addresses.js\";\nimport { formatNumber } from \"../../../../../../../utils/formatNumber.js\";\nimport { formatExplorerTxUrl } from \"../../../../../../../utils/url.js\";\nimport { fontSize, iconSize, radius, spacing } from \"../../../../../../core/design-system/index.js\";\nimport { useChainExplorers, useChainName } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Spinner } from \"../../../../components/Spinner.js\";\nimport { Container, Line, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button, ButtonLink } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { TokenSymbol } from \"../../../../components/token/TokenSymbol.js\";\nimport { NATIVE_TOKEN } from \"../../nativeToken.js\";\nimport { PayTokenIcon } from \"../PayTokenIcon.js\";\nimport { StepIcon } from \"../Stepper.js\";\nimport { getBuyWithFiatStatusMeta } from \"../pay-transactions/statusMeta.js\";\nimport { getCurrencyMeta } from \"./currencies.js\";\nexport function fiatQuoteToPartialQuote(quote) {\n  const data = {\n    fromCurrencyAmount: quote.fromCurrencyWithFees.amount,\n    fromCurrencySymbol: quote.fromCurrencyWithFees.currencySymbol,\n    onRampTokenAmount: quote.onRampToken.amount,\n    toTokenAmount: quote.estimatedToAmountMin,\n    onRampToken: {\n      chainId: quote.onRampToken.token.chainId,\n      tokenAddress: quote.onRampToken.token.tokenAddress,\n      name: quote.onRampToken.token.name,\n      symbol: quote.onRampToken.token.symbol\n    },\n    toToken: {\n      chainId: quote.toToken.chainId,\n      tokenAddress: quote.toToken.tokenAddress,\n      name: quote.toToken.name,\n      symbol: quote.toToken.symbol\n    }\n  };\n  return data;\n}\nexport function FiatSteps(props) {\n  const statusMeta = props.status ? getBuyWithFiatStatusMeta(props.status) : undefined;\n  const {\n    toToken: toTokenMeta,\n    onRampToken: onRampTokenMeta,\n    onRampTokenAmount,\n    fromCurrencySymbol,\n    fromCurrencyAmount,\n    toTokenAmount\n  } = props.partialQuote;\n  const currency = getCurrencyMeta(fromCurrencySymbol);\n  const isPartialSuccess = statusMeta?.progressStatus === \"partialSuccess\";\n  const toChain = useMemo(() => getCachedChain(toTokenMeta.chainId), [toTokenMeta.chainId]);\n  const destinationChain = useMemo(() => {\n    if (props.status?.status !== \"NOT_FOUND\" && props.status?.destination) {\n      return getCachedChain(props.status?.destination.token.chainId);\n    }\n    return undefined;\n  }, [props.status]);\n  const toToken = useMemo(() => {\n    if (toTokenMeta.tokenAddress === NATIVE_TOKEN_ADDRESS) {\n      return NATIVE_TOKEN;\n    }\n    const tokenInfo = {\n      address: toTokenMeta.tokenAddress,\n      name: toTokenMeta.name || \"\",\n      symbol: toTokenMeta.symbol || \"\"\n      // TODO: when icon is available in endpoint\n      // icon: toTokenMeta.icon\n    };\n    return tokenInfo;\n  }, [toTokenMeta]);\n  const onRampChain = useMemo(() => getCachedChain(onRampTokenMeta.chainId), [onRampTokenMeta.chainId]);\n  const onRampToken = useMemo(() => {\n    if (onRampTokenMeta.tokenAddress === NATIVE_TOKEN_ADDRESS) {\n      return NATIVE_TOKEN;\n    }\n    const tokenInfo = {\n      address: onRampTokenMeta.tokenAddress,\n      name: onRampTokenMeta.name || \"\",\n      symbol: onRampTokenMeta.symbol || \"\"\n      // TODO: when icon is available in endpoint\n      // icon: onRampTokenMeta.icon,\n    };\n    return tokenInfo;\n  }, [onRampTokenMeta]);\n  const onRampName = useChainName(onRampChain);\n  const onRampExplorers = useChainExplorers(onRampChain);\n  const toChainName = useChainName(toChain);\n  const toChainExplorers = useChainExplorers(toChain);\n  const destinationName = useChainName(destinationChain);\n  const onRampTokenInfo = _jsx(\"div\", {\n    children: _jsxs(Text, {\n      color: \"primaryText\",\n      size: \"sm\",\n      children: [formatNumber(Number(onRampTokenAmount), 6), \" \", _jsx(TokenSymbol, {\n        token: onRampToken,\n        chain: onRampChain,\n        size: \"sm\",\n        inline: true\n      })]\n    })\n  });\n  const fiatIcon = _jsx(currency.icon, {\n    size: iconSize.sm\n  });\n  const onRampTokenIcon = _jsx(PayTokenIcon, {\n    token: onRampToken,\n    chain: onRampChain,\n    size: \"sm\",\n    client: props.client\n  });\n  const toTokenIcon = _jsx(PayTokenIcon, {\n    token: toToken,\n    chain: toChain,\n    size: \"sm\",\n    client: props.client\n  });\n  const onRampChainInfo = _jsx(Text, {\n    size: \"xs\",\n    children: onRampName.name\n  });\n  const partialSuccessToTokenInfo = props.status?.status === \"CRYPTO_SWAP_FALLBACK\" && props.status.destination ? _jsxs(\"div\", {\n    children: [_jsxs(Text, {\n      color: \"secondaryText\",\n      size: \"sm\",\n      inline: true,\n      style: {\n        textDecoration: \"line-through\"\n      },\n      children: [formatNumber(Number(toTokenAmount), 6), \" \", _jsx(TokenSymbol, {\n        token: toToken,\n        chain: toChain,\n        size: \"sm\",\n        inline: true,\n        color: \"secondaryText\"\n      })]\n    }), \" \", _jsxs(Text, {\n      color: \"danger\",\n      size: \"sm\",\n      inline: true,\n      children: [formatNumber(Number(props.status.destination.amount), 6), \" \", _jsx(TokenSymbol, {\n        token: {\n          address: props.status.destination.token.tokenAddress,\n          name: props.status.destination.token.name || \"\",\n          symbol: props.status.destination.token.symbol || \"\"\n        },\n        chain: toChain,\n        size: \"sm\",\n        inline: true,\n        color: \"danger\"\n      })]\n    })]\n  }) : null;\n  const toTokenInfo = partialSuccessToTokenInfo || _jsxs(Text, {\n    color: \"primaryText\",\n    size: \"sm\",\n    children: [formatNumber(Number(toTokenAmount), 6), _jsx(TokenSymbol, {\n      token: toToken,\n      chain: toChain,\n      size: \"sm\",\n      inline: true\n    })]\n  });\n  const partialSuccessToChainInfo = props.status?.status === \"CRYPTO_SWAP_FALLBACK\" && props.status.destination && props.status.destination.token.chainId !== props.status.quote.toToken.chainId ? _jsxs(\"div\", {\n    children: [_jsx(Text, {\n      size: \"xs\",\n      inline: true,\n      style: {\n        textDecoration: \"line-through\"\n      },\n      children: toChainName.name\n    }), \" \", _jsx(Text, {\n      size: \"xs\",\n      inline: true,\n      children: destinationName.name\n    })]\n  }) : null;\n  const toTokehChainInfo = partialSuccessToChainInfo || _jsx(Text, {\n    size: \"xs\",\n    children: toChainName.name\n  });\n  const onRampTxHash = props.status?.status !== \"NOT_FOUND\" ? props.status?.source?.transactionHash : undefined;\n  const toTokenTxHash = props.status?.status !== \"NOT_FOUND\" ? props.status?.destination?.transactionHash : undefined;\n  const showContinueBtn = !props.status || props.status.status === \"CRYPTO_SWAP_REQUIRED\" || props.status.status === \"CRYPTO_SWAP_FAILED\";\n  function getStep1State() {\n    if (!statusMeta) {\n      if (props.step === 2) {\n        return \"completed\";\n      }\n      return \"actionRequired\";\n    }\n    if (statusMeta.step === 2) {\n      return \"completed\";\n    }\n    return statusMeta.progressStatus;\n  }\n  function getStep2State() {\n    if (!statusMeta) {\n      if (props.step === 2) {\n        return \"actionRequired\";\n      }\n      return undefined;\n    }\n    if (statusMeta.step === 2) {\n      return statusMeta.progressStatus;\n    }\n    return undefined;\n  }\n  return _jsxs(Container, {\n    p: \"lg\",\n    children: [_jsx(ModalHeader, {\n      title: props.title,\n      onBack: props.onBack\n    }), _jsx(Spacer, {\n      y: \"lg\"\n    }), _jsx(PaymentStep, {\n      title: _jsxs(Text, {\n        color: \"primaryText\",\n        size: \"md\",\n        children: [\"Get\", \" \", _jsx(TokenSymbol, {\n          token: onRampToken,\n          chain: onRampChain,\n          size: \"md\",\n          inline: true\n        }), \" \", \"with \", props.partialQuote.fromCurrencySymbol]\n      }),\n      step: 1,\n      from: {\n        icon: fiatIcon,\n        primaryText: _jsxs(Text, {\n          color: \"primaryText\",\n          size: \"sm\",\n          children: [formatNumber(Number(fromCurrencyAmount), 6), \" \", fromCurrencySymbol]\n        })\n      },\n      to: {\n        icon: onRampTokenIcon,\n        primaryText: onRampTokenInfo,\n        secondaryText: onRampChainInfo\n      },\n      state: getStep1State(),\n      explorer: onRampExplorers.explorers[0]?.url && onRampTxHash ? {\n        label: \"View on Explorer\",\n        url: formatExplorerTxUrl(onRampExplorers.explorers[0]?.url, onRampTxHash)\n      } : undefined\n    }), _jsx(Spacer, {\n      y: \"md\"\n    }), _jsx(PaymentStep, {\n      title: _jsxs(Text, {\n        color: \"primaryText\",\n        size: \"md\",\n        children: [\"Convert\", \" \", _jsx(TokenSymbol, {\n          token: onRampToken,\n          chain: onRampChain,\n          size: \"md\",\n          inline: true\n        }), \" \", \"to \", _jsx(TokenSymbol, {\n          token: toToken,\n          chain: toChain,\n          size: \"md\",\n          inline: true\n        })]\n      }),\n      step: 2,\n      from: {\n        icon: onRampTokenIcon,\n        primaryText: onRampTokenInfo,\n        secondaryText: onRampChainInfo\n      },\n      to: {\n        icon: toTokenIcon,\n        primaryText: toTokenInfo,\n        secondaryText: toTokehChainInfo\n      },\n      state: getStep2State(),\n      explorer: toChainExplorers.explorers[0]?.url && toTokenTxHash ? {\n        label: \"View on Explorer\",\n        url: formatExplorerTxUrl(toChainExplorers.explorers[0]?.url, toTokenTxHash)\n      } : undefined\n    }), isPartialSuccess && props.status && props.status.status !== \"NOT_FOUND\" && props.status.source && props.status.destination && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"md\"\n      }), _jsxs(Text, {\n        color: \"danger\",\n        size: \"sm\",\n        center: true,\n        children: [\"Expected \", props.status.source?.token.symbol, \", Got\", \" \", props.status.destination?.token.symbol, \" instead\"]\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      })]\n    }), showContinueBtn && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"md\"\n      }), _jsx(Button, {\n        variant: \"accent\",\n        onClick: props.onContinue,\n        fullWidth: true,\n        children: \"Continue\"\n      })]\n    })]\n  });\n}\nfunction PaymentStep(props) {\n  return _jsxs(StepContainer, {\n    state: props.state,\n    children: [_jsxs(Text, {\n      size: \"sm\",\n      children: [\"Step \", props.step]\n    }), _jsx(Spacer, {\n      y: \"sm\"\n    }), props.title, _jsx(Spacer, {\n      y: \"sm\"\n    }), _jsx(Line, {}), _jsx(Spacer, {\n      y: \"md\"\n    }), _jsx(PaymentSubStep, {\n      ...props.from\n    }), _jsxs(Container, {\n      color: \"borderColor\",\n      style: {\n        paddingLeft: \"18px\",\n        position: \"relative\",\n        marginBlock: \"3px\"\n      },\n      children: [_jsx(\"div\", {\n        style: {\n          height: \"18px\",\n          width: \"2px\",\n          backgroundColor: \"currentColor\",\n          transform: \"translateX(-50%)\"\n        }\n      }), _jsx(TriangleDownIcon, {\n        width: iconSize.sm,\n        height: iconSize.sm,\n        style: {\n          position: \"absolute\",\n          bottom: \"0\",\n          transform: \"translate(-50%, 50%)\"\n        }\n      })]\n    }), _jsx(PaymentSubStep, {\n      ...props.to\n    }), props.explorer && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"md\"\n      }), _jsxs(ButtonLink, {\n        variant: \"outline\",\n        fullWidth: true,\n        href: props.explorer.url,\n        style: {\n          fontSize: fontSize.xs,\n          padding: spacing.xs\n        },\n        gap: \"xxs\",\n        target: \"_blank\",\n        children: [props.explorer.label, _jsx(ExternalLinkIcon, {\n          width: iconSize.xs,\n          height: iconSize.xs\n        })]\n      })]\n    })]\n  });\n}\nfunction PaymentSubStep(props) {\n  return _jsxs(Container, {\n    flex: \"row\",\n    gap: \"sm\",\n    center: \"y\",\n    style: {\n      flexWrap: \"nowrap\"\n    },\n    children: [_jsx(Container, {\n      p: \"xs\",\n      borderColor: \"borderColor\",\n      flex: \"row\",\n      center: \"both\",\n      style: {\n        borderStyle: \"solid\",\n        borderWidth: \"1.5px\",\n        borderRadius: radius.lg\n      },\n      children: props.icon\n    }), _jsxs(Container, {\n      flex: \"column\",\n      gap: \"xxs\",\n      children: [props.primaryText, props.secondaryText]\n    })]\n  });\n}\nfunction StepContainer(props) {\n  let color = \"borderColor\";\n  let text;\n  if (props.state === \"pending\") {\n    text = \"Pending\";\n    color = \"accentText\";\n  } else if (props.state === \"actionRequired\") {\n    color = \"accentText\";\n  } else if (props.state === \"completed\") {\n    text = \"Completed\";\n    color = \"success\";\n  } else if (props.state === \"failed\") {\n    color = \"danger\";\n    text = \"Failed\";\n  } else if (props.state === \"partialSuccess\") {\n    color = \"danger\";\n    text = \"Incomplete\";\n  }\n  return _jsxs(Container, {\n    bg: \"tertiaryBg\",\n    borderColor: color === \"success\" ? \"borderColor\" : color,\n    py: \"sm\",\n    px: \"md\",\n    style: {\n      borderRadius: radius.lg,\n      alignItems: \"flex-start\",\n      borderWidth: \"1px\",\n      borderStyle: \"solid\",\n      position: \"relative\"\n    },\n    children: [props.children, _jsxs(\"div\", {\n      style: {\n        position: \"absolute\",\n        right: spacing.sm,\n        top: spacing.sm,\n        display: \"flex\",\n        gap: spacing.xs,\n        alignItems: \"center\"\n      },\n      children: [props.state && text && _jsx(Text, {\n        size: \"sm\",\n        color: color,\n        children: text\n      }), (props.state === \"actionRequired\" || props.state === \"completed\") && _jsx(StepIcon, {\n        isActive: props.state === \"actionRequired\",\n        isDone: props.state === \"completed\"\n      }), props.state === \"pending\" && _jsx(Spinner, {\n        color: \"accentText\",\n        size: \"sm\"\n      }), props.state === \"failed\" && _jsx(Container, {\n        color: \"danger\",\n        flex: \"row\",\n        center: \"both\",\n        children: _jsx(Cross1Icon, {\n          width: iconSize.sm,\n          height: iconSize.sm\n        })\n      })]\n    })]\n  });\n}\n//# sourceMappingURL=FiatSteps.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}