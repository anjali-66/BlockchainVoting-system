{"ast":null,"code":"import { getClientFetch } from \"../utils/fetch.js\";\nimport { stringify } from \"../utils/json.js\";\n/**\n * @internal\n */\nexport async function fetchRpc(rpcUrl, client, options) {\n  const response = await getClientFetch(client)(rpcUrl, {\n    headers: {\n      ...client.config?.rpc?.fetch?.headers,\n      \"Content-Type\": \"application/json\"\n    },\n    body: stringify(options.requests),\n    method: \"POST\",\n    requestTimeoutMs: options.requestTimeoutMs ?? client.config?.rpc?.fetch?.requestTimeoutMs,\n    keepalive: client.config?.rpc?.fetch?.keepalive\n  });\n  if (!response.ok) {\n    response.body?.cancel();\n    throw new Error(`RPC request failed with status ${response.status} - ${response.statusText}`);\n  }\n  if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n    return await response.json();\n  }\n  const text = await response.text();\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    console.error(\"Error parsing response\", err, text);\n    throw err;\n  }\n}\n/**\n * @internal\n */\nexport async function fetchSingleRpc(rpcUrl, client, options) {\n  const response = await getClientFetch(client)(rpcUrl, {\n    headers: {\n      ...(client.config?.rpc?.fetch?.headers || {}),\n      \"Content-Type\": \"application/json\"\n    },\n    body: stringify(options.request),\n    method: \"POST\",\n    requestTimeoutMs: options.requestTimeoutMs ?? client.config?.rpc?.fetch?.requestTimeoutMs,\n    keepalive: client.config?.rpc?.fetch?.keepalive\n  });\n  if (!response.ok) {\n    response.body?.cancel();\n    throw new Error(`RPC request failed with status ${response.status}`);\n  }\n  if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n    return await response.json();\n  }\n  const text = await response.text();\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    console.error(\"Error parsing response\", err, text);\n    throw err;\n  }\n}\n//# sourceMappingURL=fetch-rpc.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}