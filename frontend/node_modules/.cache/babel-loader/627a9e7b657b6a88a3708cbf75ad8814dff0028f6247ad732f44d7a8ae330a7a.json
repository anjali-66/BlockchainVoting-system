{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { keyframes } from \"@emotion/react\";\nimport * as Dialog from \"@radix-ui/react-dialog\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { Cross2Icon } from \"@radix-ui/react-icons\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, media, radius, shadow, spacing } from \"../../../core/design-system/index.js\";\nimport { compactModalMaxHeight, modalCloseFadeOutDuration, modalMaxWidthCompact, modalMaxWidthWide, wideModalMaxHeight } from \"../ConnectWallet/constants.js\";\nimport { StyledDiv } from \"../design-system/elements.js\";\nimport { DynamicHeight } from \"./DynamicHeight.js\";\nimport { Overlay } from \"./Overlay.js\";\nimport { noScrollBar } from \"./basic.js\";\nimport { IconButton } from \"./buttons.js\";\n/**\n * @internal\n */\nexport const Modal = props => {\n  const [open, setOpen] = useState(props.open);\n  const contentRef = useRef(null);\n  const overlayRef = useRef(null);\n  useEffect(() => {\n    if (!props.open) {\n      if (contentRef.current) {\n        const animationConfig = {\n          duration: modalCloseFadeOutDuration,\n          fill: \"forwards\",\n          easing: \"ease\"\n        };\n        contentRef.current.animate([{\n          opacity: 0\n        }], {\n          ...animationConfig\n        }).onfinish = () => {\n          setOpen(false);\n        };\n        overlayRef.current?.animate([{\n          opacity: 0\n        }], {\n          ...animationConfig,\n          duration: modalCloseFadeOutDuration + 100\n        });\n      } else {\n        setOpen(props.open);\n      }\n    } else {\n      setOpen(props.open);\n    }\n  }, [props.open]);\n  return _jsxs(Dialog.Root, {\n    open: open,\n    onOpenChange: props.setOpen,\n    children: [props.trigger && _jsx(Dialog.Trigger, {\n      asChild: true,\n      children: props.trigger\n    }), _jsxs(Dialog.Portal, {\n      children: [!props.hide && _jsx(Dialog.Overlay, {\n        asChild: true,\n        children: _jsx(Overlay, {\n          ref: overlayRef\n        })\n      }), _jsx(FocusScope, {\n        trapped: !props.hide,\n        children: _jsx(Dialog.Content, {\n          asChild: true,\n          \"aria-describedby\": undefined,\n          children: _jsxs(DialogContent, {\n            ref: contentRef,\n            style: props.hide ? {\n              width: 0,\n              height: 0,\n              overflow: \"hidden\",\n              opacity: 0\n            } : {\n              height: props.size === \"compact\" ? \"auto\" : wideModalMaxHeight,\n              maxWidth: props.size === \"compact\" ? modalMaxWidthCompact : modalMaxWidthWide\n            },\n            children: [_jsx(Dialog.Title, {\n              style: {\n                position: \"absolute\",\n                width: \"1px\",\n                height: \"1px\",\n                padding: 0,\n                margin: \"-1px\",\n                overflow: \"hidden\",\n                clip: \"rect(0, 0, 0, 0)\",\n                whiteSpace: \"nowrap\",\n                borderWidth: 0\n              },\n              children: \"Connect Modal\"\n            }), props.size === \"compact\" ? _jsx(DynamicHeight, {\n              maxHeight: compactModalMaxHeight,\n              children: props.children\n            }) : props.children, !props.hideCloseIcon && _jsx(CrossContainer, {\n              children: _jsx(Dialog.Close, {\n                asChild: true,\n                children: _jsx(IconButton, {\n                  autoFocus: true,\n                  type: \"button\",\n                  \"aria-label\": \"Close\",\n                  children: _jsx(Cross2Icon, {\n                    width: iconSize.md,\n                    height: iconSize.md,\n                    style: {\n                      color: \"inherit\"\n                    }\n                  })\n                })\n              })\n            })]\n          })\n        })\n      })]\n    })]\n  });\n};\nexport const CrossContainer = /* @__PURE__ */StyledDiv({\n  position: \"absolute\",\n  top: spacing.lg,\n  right: spacing.lg,\n  transform: \"translateX(6px)\"\n});\nconst modalAnimationDesktop = keyframes`\n  from {\n    opacity: 0;\n    transform: translate(-50%, -48%) scale(0.96);\n  }\n  to {\n    opacity: 1;\n    transform: translate(-50%, -50%) scale(1);\n  }\n`;\nconst modalAnimationMobile = keyframes`\n  from {\n    opacity: 0;\n    transform: translate(0, 50%);\n  }\n  to {\n    opacity: 1;\n    transform: translate(0, 0);\n  }\n`;\nconst DialogContent = /* @__PURE__ */StyledDiv(_ => {\n  const theme = useCustomTheme();\n  return {\n    zIndex: 10000,\n    background: theme.colors.modalBg,\n    \"--bg\": theme.colors.modalBg,\n    color: theme.colors.primaryText,\n    borderRadius: radius.lg,\n    position: \"fixed\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"calc(100vw - 40px)\",\n    boxSizing: \"border-box\",\n    animation: `${modalAnimationDesktop} 300ms ease`,\n    boxShadow: shadow.lg,\n    lineHeight: \"normal\",\n    border: `1px solid ${theme.colors.borderColor}`,\n    outline: \"none\",\n    overflow: \"hidden\",\n    fontFamily: theme.fontFamily,\n    \"& *\": {\n      boxSizing: \"border-box\"\n    },\n    [media.mobile]: {\n      top: \"auto\",\n      bottom: 0,\n      left: 0,\n      right: 0,\n      transform: \"none\",\n      width: \"100vw\",\n      animation: `${modalAnimationMobile} 0.35s cubic-bezier(0.15, 1.15, 0.6, 1)`,\n      borderRadius: radius.xl,\n      borderBottomRightRadius: 0,\n      borderBottomLeftRadius: 0,\n      maxWidth: \"none !important\"\n    },\n    \"& *::selection\": {\n      backgroundColor: theme.colors.selectedTextBg,\n      color: theme.colors.selectedTextColor\n    },\n    ...noScrollBar\n  };\n});\n//# sourceMappingURL=Modal.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}