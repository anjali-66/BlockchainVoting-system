{"ast":null,"code":"import { resolvePromisedValue } from \"../../utils/promise/resolve-promised-value.js\";\nimport { encode } from \"./encode.js\";\n/**\n * Sends a batch transaction using the provided options.\n * @param options - The options for sending the batch transaction.\n * @returns A promise that resolves to the options for waiting for the receipt of the first transaction in the batch.\n * @throws An error if the account is not connected, there are no transactions to send, or the account does not implement sendBatchTransaction.\n * @transaction\n * @example\n * ```ts\n * import { sendBatchTransaction } from \"thirdweb\";\n *\n * const waitForReceiptOptions = await sendBatchTransaction({\n *  account,\n *  transactions\n * });\n * ```\n */\nexport async function sendBatchTransaction(options) {\n  const {\n    account,\n    transactions\n  } = options;\n  if (!account) {\n    throw new Error(\"not connected\");\n  }\n  if (transactions.length === 0) {\n    throw new Error(\"No transactions to send\");\n  }\n  const firstTx = transactions[0];\n  if (!firstTx) {\n    throw new Error(\"No transactions to send\");\n  }\n  if (account.sendBatchTransaction) {\n    const serializedTxs = await Promise.all(transactions.map(async tx => {\n      // no need to estimate gas for these, gas will be estimated on the entire batch\n      const [data, to, accessList, value] = await Promise.all([encode(tx), resolvePromisedValue(tx.to), resolvePromisedValue(tx.accessList), resolvePromisedValue(tx.value)]);\n      const serializedTx = {\n        data,\n        chainId: tx.chain.id,\n        to,\n        value,\n        accessList\n      };\n      return serializedTx;\n    }));\n    const result = await account.sendBatchTransaction(serializedTxs);\n    return {\n      ...result,\n      chain: firstTx.chain,\n      client: firstTx.client\n    };\n  }\n  throw new Error(\"Account doesn't implement sendBatchTransaction\");\n}\n//# sourceMappingURL=send-batch-transaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}