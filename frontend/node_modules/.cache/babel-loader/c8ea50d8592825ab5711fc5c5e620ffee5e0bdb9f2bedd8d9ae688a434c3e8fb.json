{"ast":null,"code":"import { ethereum } from \"../../chains/chain-definitions/ethereum.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { getAddress, isAddress } from \"../../utils/address.js\";\nimport { toHex } from \"../../utils/encoding/hex.js\";\nimport { namehash } from \"../../utils/ens/namehash.js\";\nimport { packetToBytes } from \"../../utils/ens/packetToBytes.js\";\nimport { withCache } from \"../../utils/promise/withCache.js\";\nimport { encodeAddr } from \"./__generated__/AddressResolver/read/addr.js\";\nimport { resolve } from \"./__generated__/UniversalResolver/read/resolve.js\";\nimport { UNIVERSAL_RESOLVER_ADDRESS } from \"./constants.js\";\n/**\n * Resolves an ENS name to an Ethereum address.\n * @param options - The options for resolving an ENS address.\n * @example\n * ```ts\n * import { resolveAddress } from \"thirdweb/extensions/ens\";\n * const address = await resolveAddress({\n *    client,\n *    name: \"vitalik.eth\",\n * });\n * ```\n *\n * Resolve an address to a Basename.\n * ```ts\n * import { resolveAddress, BASENAME_RESOLVER_ADDRESS } from \"thirdweb/extensions/ens\";\n * import { base } from \"thirdweb/chains\";\n * const address = await resolveAddress({\n *    client,\n *    name: \"myk.base.eth\",\n *    resolverAddress: BASENAME_RESOLVER_ADDRESS,\n *    resolverChain: base,\n * });\n * ```\n * @extension ENS\n * @returns A promise that resolves to the Ethereum address.\n */\nexport async function resolveAddress(options) {\n  const {\n    client,\n    name,\n    resolverAddress,\n    resolverChain\n  } = options;\n  if (isAddress(name)) {\n    return getAddress(name);\n  }\n  return withCache(async () => {\n    const contract = getContract({\n      client,\n      chain: resolverChain || ethereum,\n      address: resolverAddress || UNIVERSAL_RESOLVER_ADDRESS\n    });\n    const data = encodeAddr({\n      name: namehash(name)\n    });\n    const result = await resolve({\n      contract,\n      name: toHex(packetToBytes(name)),\n      data\n    });\n    const resolvedAddress = getAddress(`0x${result[0].slice(-40)}`);\n    return resolvedAddress;\n  }, {\n    cacheKey: `ens:addr:${resolverChain?.id || 1}:${name}`,\n    // 1min cache\n    cacheTime: 60 * 1000\n  });\n}\n//# sourceMappingURL=resolve-address.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}