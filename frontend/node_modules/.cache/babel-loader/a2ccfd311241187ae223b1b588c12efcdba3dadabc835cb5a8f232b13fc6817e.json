{"ast":null,"code":"import { concat, pad, toHex } from \"viem\";\nfunction getInitCode(unpackedUserOperation) {\n  return unpackedUserOperation.factory ? concat([unpackedUserOperation.factory, unpackedUserOperation.factoryData || \"0x\"]) : \"0x\";\n}\nfunction getAccountGasLimits(unpackedUserOperation) {\n  return concat([pad(toHex(unpackedUserOperation.verificationGasLimit), {\n    size: 16\n  }), pad(toHex(unpackedUserOperation.callGasLimit), {\n    size: 16\n  })]);\n}\nfunction getGasLimits(unpackedUserOperation) {\n  return concat([pad(toHex(unpackedUserOperation.maxPriorityFeePerGas), {\n    size: 16\n  }), pad(toHex(unpackedUserOperation.maxFeePerGas), {\n    size: 16\n  })]);\n}\nfunction getPaymasterAndData(unpackedUserOperation) {\n  return unpackedUserOperation.paymaster ? concat([unpackedUserOperation.paymaster, pad(toHex(unpackedUserOperation.paymasterVerificationGasLimit || BigInt(0)), {\n    size: 16\n  }), pad(toHex(unpackedUserOperation.paymasterPostOpGasLimit || BigInt(0)), {\n    size: 16\n  }), unpackedUserOperation.paymasterData || \"0x\"]) : \"0x\";\n}\nexport const getPackedUserOperation = userOperation => {\n  return {\n    sender: userOperation.sender,\n    nonce: userOperation.nonce,\n    initCode: getInitCode(userOperation),\n    callData: userOperation.callData,\n    accountGasLimits: getAccountGasLimits(userOperation),\n    preVerificationGas: userOperation.preVerificationGas,\n    gasFees: getGasLimits(userOperation),\n    paymasterAndData: getPaymasterAndData(userOperation),\n    signature: userOperation.signature\n  };\n};\n//# sourceMappingURL=packUserOp.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}