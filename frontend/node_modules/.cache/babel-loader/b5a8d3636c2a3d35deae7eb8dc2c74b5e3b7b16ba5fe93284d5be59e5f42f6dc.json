{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { trackPayEvent } from \"../../../../../../analytics/track/pay.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../../contract/contract.js\";\nimport { decimals } from \"../../../../../../extensions/erc20/read/decimals.js\";\nimport { shortenAddress } from \"../../../../../../utils/address.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport { toTokens } from \"../../../../../../utils/units.js\";\nimport { useCustomTheme } from \"../../../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, spacing } from \"../../../../../core/design-system/index.js\";\nimport { useChainMetadata } from \"../../../../../core/hooks/others/useChainQuery.js\";\nimport { useActiveWallet } from \"../../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useEnsName } from \"../../../../../core/utils/wallet.js\";\nimport { LoadingScreen } from \"../../../../wallets/shared/LoadingScreen.js\";\nimport { ChainIcon } from \"../../../components/ChainIcon.js\";\nimport { Img } from \"../../../components/Img.js\";\nimport { Spacer } from \"../../../components/Spacer.js\";\nimport { TokenIcon } from \"../../../components/TokenIcon.js\";\nimport { WalletImage } from \"../../../components/WalletImage.js\";\nimport { Container, Line, ModalHeader } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { ConnectButton } from \"../../ConnectButton.js\";\nimport { isNativeToken } from \"../nativeToken.js\";\nexport function DirectPaymentModeScreen(props) {\n  const {\n    payUiOptions,\n    supportedDestinations,\n    client,\n    onContinue,\n    payerAccount\n  } = props;\n  const theme = useCustomTheme();\n  const activeWallet = useActiveWallet();\n  const metadata = payUiOptions.metadata;\n  const paymentInfo = payUiOptions.paymentInfo;\n  const {\n    data: chainData\n  } = useChainMetadata(paymentInfo.chain);\n  const {\n    data: sellerEns\n  } = useEnsName({\n    client,\n    address: paymentInfo.sellerAddress\n  });\n  const totalCostQuery = useQuery({\n    queryKey: [\"amount\", paymentInfo],\n    queryFn: async () => {\n      let tokenDecimals = 18;\n      if (paymentInfo.token && !isNativeToken(paymentInfo.token)) {\n        tokenDecimals = await decimals({\n          contract: getContract({\n            address: paymentInfo.token.address,\n            chain: paymentInfo.chain,\n            client\n          })\n        });\n      }\n      let cost;\n      if (\"amountWei\" in paymentInfo) {\n        cost = toTokens(paymentInfo.amountWei, tokenDecimals);\n      } else {\n        cost = paymentInfo.amount;\n      }\n      return cost;\n    }\n  });\n  const totalCost = totalCostQuery.data;\n  if (!chainData || totalCost === undefined) {\n    return _jsx(LoadingScreen, {});\n  }\n  const token = paymentInfo.token ? {\n    ...paymentInfo.token,\n    icon: paymentInfo.token?.icon || supportedDestinations.find(c => c.chain.id === paymentInfo.chain.id)?.tokens.find(t => t.address.toLowerCase() === paymentInfo.token?.address.toLowerCase())?.icon\n  } : {\n    address: NATIVE_TOKEN_ADDRESS,\n    name: chainData.nativeCurrency.name,\n    symbol: chainData.nativeCurrency.symbol,\n    icon: chainData.icon?.url\n  };\n  return _jsxs(Container, {\n    p: \"lg\",\n    children: [_jsx(ModalHeader, {\n      title: metadata?.name || \"Payment Details\"\n    }), _jsx(Spacer, {\n      y: \"lg\"\n    }), _jsxs(Container, {\n      children: [metadata?.image ? _jsx(Img, {\n        client: client,\n        src: metadata?.image,\n        style: {\n          width: \"100%\",\n          borderRadius: spacing.md,\n          backgroundColor: theme.colors.tertiaryBg\n        }\n      }) : activeWallet ? _jsxs(Container, {\n        flex: \"row\",\n        center: \"both\",\n        style: {\n          padding: spacing.md,\n          marginBottom: spacing.md,\n          borderRadius: spacing.md,\n          backgroundColor: theme.colors.tertiaryBg\n        },\n        children: [_jsx(WalletImage, {\n          size: iconSize.xl,\n          id: activeWallet.id,\n          client: client\n        }), _jsx(\"div\", {\n          style: {\n            flexGrow: 1,\n            borderBottom: \"6px dotted\",\n            borderColor: theme.colors.secondaryIconColor,\n            marginLeft: spacing.md,\n            marginRight: spacing.md\n          }\n        }), _jsx(ChainIcon, {\n          client: client,\n          size: iconSize.xl,\n          chainIconUrl: chainData.icon?.url\n        })]\n      }) : null, _jsx(Spacer, {\n        y: \"md\"\n      }), _jsxs(Container, {\n        flex: \"row\",\n        children: [_jsx(Container, {\n          flex: \"column\",\n          expand: true,\n          children: _jsx(Text, {\n            size: \"md\",\n            color: \"primaryText\",\n            weight: 700,\n            children: \"Price\"\n          })\n        }), _jsx(Container, {\n          expand: true,\n          children: _jsxs(Container, {\n            flex: \"row\",\n            gap: \"xs\",\n            center: \"y\",\n            style: {\n              justifyContent: \"right\"\n            },\n            children: [_jsx(TokenIcon, {\n              chain: paymentInfo.chain,\n              client: props.client,\n              size: \"sm\",\n              token: token\n            }), _jsxs(Text, {\n              color: \"primaryText\",\n              size: \"md\",\n              weight: 700,\n              children: [String(formatNumber(Number(totalCost), 6)), \" \", token.symbol]\n            })]\n          })\n        })]\n      }), _jsx(Spacer, {\n        y: \"md\"\n      }), _jsx(Line, {}), _jsx(Spacer, {\n        y: \"md\"\n      }), _jsxs(Container, {\n        flex: \"row\",\n        children: [_jsx(Container, {\n          flex: \"column\",\n          expand: true,\n          children: _jsx(Text, {\n            size: \"xs\",\n            color: \"secondaryText\",\n            children: \"Network\"\n          })\n        }), _jsx(Container, {\n          expand: true,\n          children: _jsxs(Container, {\n            flex: \"row\",\n            gap: \"xs\",\n            center: \"y\",\n            style: {\n              justifyContent: \"right\"\n            },\n            children: [_jsx(ChainIcon, {\n              chainIconUrl: chainData.icon?.url,\n              size: \"xs\",\n              client: props.client\n            }), _jsx(Text, {\n              size: \"xs\",\n              color: \"secondaryText\",\n              style: {\n                textAlign: \"right\"\n              },\n              children: chainData.name\n            })]\n          })\n        })]\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      }), _jsxs(Container, {\n        flex: \"row\",\n        children: [_jsx(Container, {\n          flex: \"column\",\n          expand: true,\n          children: _jsx(Text, {\n            size: \"xs\",\n            color: \"secondaryText\",\n            children: \"Seller\"\n          })\n        }), _jsx(Container, {\n          expand: true,\n          children: _jsx(Container, {\n            flex: \"row\",\n            gap: \"xs\",\n            center: \"y\",\n            style: {\n              justifyContent: \"right\"\n            },\n            children: _jsx(Text, {\n              size: \"xs\",\n              color: \"secondaryText\",\n              style: {\n                textAlign: \"right\"\n              },\n              children: sellerEns || shortenAddress(paymentInfo.sellerAddress)\n            })\n          })\n        })]\n      })]\n    }), _jsx(Spacer, {\n      y: \"xl\"\n    }), payerAccount ? _jsx(Button, {\n      variant: \"accent\",\n      fullWidth: true,\n      onClick: () => {\n        trackPayEvent({\n          event: \"choose_payment_method_direct_payment_mode\",\n          client,\n          walletAddress: payerAccount.address,\n          walletType: activeWallet?.id\n        });\n        onContinue(totalCost, paymentInfo.chain, token);\n      },\n      children: \"Choose Payment Method\"\n    }) : _jsx(\"div\", {\n      children: _jsx(ConnectButton, {\n        ...props.connectOptions,\n        client: client,\n        theme: theme,\n        connectButton: {\n          style: {\n            width: \"100%\"\n          }\n        }\n      })\n    })]\n  });\n}\n//# sourceMappingURL=DirectPaymentModeScreen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}