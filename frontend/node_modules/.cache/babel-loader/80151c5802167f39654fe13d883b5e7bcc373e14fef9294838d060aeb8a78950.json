{"ast":null,"code":"import { randomBytesHex } from \"./random.js\";\nconst functionIdCache = new Map();\n/**\n * Retrieves the unique identifier for a given function.\n * If the function has been previously cached, the cached identifier is returned.\n * Otherwise, a new identifier is generated using the function's string representation.\n * @param fn - The function for which to retrieve the identifier.\n * @returns The unique identifier for the function.\n * @internal\n */\nexport function getFunctionId(fn) {\n  if (functionIdCache.has(fn)) {\n    // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set\n    return functionIdCache.get(fn);\n  }\n  const id = randomBytesHex();\n  functionIdCache.set(fn, id);\n  return id;\n}\n//# sourceMappingURL=function-id.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}