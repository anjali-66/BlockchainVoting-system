{"ast":null,"code":"/**\n * Create an EIP-4361 & CAIP-122 compliant message to sign based on the login payload\n * @param payload - The login payload containing the necessary information.\n * @returns The generated login message.\n * @internal\n */\nexport function createLoginMessage(payload) {\n  const typeField = \"Ethereum\";\n  const header = `${payload.domain} wants you to sign in with your ${typeField} account:`;\n  let prefix = [header, payload.address].join(\"\\n\");\n  prefix = [prefix, payload.statement].join(\"\\n\\n\");\n  if (payload.statement) {\n    prefix += \"\\n\";\n  }\n  const suffixArray = [];\n  if (payload.uri) {\n    const uriField = `URI: ${payload.uri}`;\n    suffixArray.push(uriField);\n  }\n  const versionField = `Version: ${payload.version}`;\n  suffixArray.push(versionField);\n  if (payload.chain_id) {\n    const chainField = `Chain ID: ${payload.chain_id}` || \"1\";\n    suffixArray.push(chainField);\n  }\n  const nonceField = `Nonce: ${payload.nonce}`;\n  suffixArray.push(nonceField);\n  const issuedAtField = `Issued At: ${payload.issued_at}`;\n  suffixArray.push(issuedAtField);\n  const expiryField = `Expiration Time: ${payload.expiration_time}`;\n  suffixArray.push(expiryField);\n  if (payload.invalid_before) {\n    const invalidBeforeField = `Not Before: ${payload.invalid_before}`;\n    suffixArray.push(invalidBeforeField);\n  }\n  if (payload.resources) {\n    suffixArray.push([\"Resources:\", ...payload.resources.map(x => `- ${x}`)].join(\"\\n\"));\n  }\n  const suffix = suffixArray.join(\"\\n\");\n  return [prefix, suffix].join(\"\\n\");\n}\n//# sourceMappingURL=create-login-message.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}