{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { webLocalStorage } from \"../../../../utils/storage/webStorage.js\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { linkProfile } from \"../../../../wallets/in-app/web/lib/auth/index.js\";\nimport { loginWithOauthRedirect } from \"../../../../wallets/in-app/web/lib/auth/oauth.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { setLastAuthProvider } from \"../../../core/utils/storage.js\";\nimport { Spacer } from \"../../ui/components/Spacer.js\";\nimport { Spinner } from \"../../ui/components/Spinner.js\";\nimport { Container, ModalHeader } from \"../../ui/components/basic.js\";\nimport { Button } from \"../../ui/components/buttons.js\";\nimport { Text } from \"../../ui/components/text.js\";\nimport { openOauthSignInWindow } from \"./oauthSignIn.js\";\n/**\n * @internal\n */\nexport function SocialLogin(props) {\n  const ewLocale = props.locale;\n  const locale = ewLocale.socialLoginScreen;\n  const themeObj = useCustomTheme();\n  const ecosystem = isEcosystemWallet(props.wallet) ? {\n    id: props.wallet.id,\n    partnerId: props.wallet.getConfig()?.partnerId\n  } : undefined;\n  const [authError, setAuthError] = useState(undefined);\n  const {\n    done,\n    wallet\n  } = props;\n  const [status, setStatus] = useState(\"connecting\");\n  const handleSocialLogin = async () => {\n    const walletConfig = wallet.getConfig();\n    const authMode = walletConfig && \"auth\" in walletConfig ? walletConfig?.auth?.mode ?? \"popup\" : \"popup\";\n    if (walletConfig && \"auth\" in walletConfig && authMode !== \"popup\" && !props.isLinking // Redirect not supported for account linking (we need to maintain the aplication state)\n    ) {\n      return loginWithOauthRedirect({\n        authOption: props.socialAuth,\n        client: props.client,\n        ecosystem,\n        redirectUrl: walletConfig?.auth?.redirectUrl,\n        mode: walletConfig?.auth?.mode\n      });\n    }\n    try {\n      const socialWindow = openOauthSignInWindow({\n        authOption: props.socialAuth,\n        themeObj,\n        client: props.client,\n        ecosystem\n      });\n      if (!socialWindow) {\n        throw new Error(`Failed to open ${props.socialAuth} login window`);\n      }\n      setStatus(\"connecting\");\n      if (props.isLinking) {\n        await linkProfile({\n          client: props.client,\n          strategy: props.socialAuth,\n          openedWindow: socialWindow,\n          closeOpenedWindow: openedWindow => {\n            openedWindow.close();\n          },\n          ecosystem\n        }).catch(e => {\n          setAuthError(e.message);\n          throw e;\n        });\n      } else {\n        await wallet.connect({\n          chain: props.chain,\n          strategy: props.socialAuth,\n          openedWindow: socialWindow,\n          closeOpenedWindow: openedWindow => {\n            openedWindow.close();\n          },\n          client: props.client\n        });\n      }\n      await setLastAuthProvider(props.socialAuth, webLocalStorage);\n      setStatus(\"connected\");\n      done();\n    } catch (e) {\n      setStatus(\"error\");\n      // TODO this only happens on 'retry' button click, not on initial login\n      // should pass auth error message to this component\n      if (e instanceof Error && e?.message?.includes(\"PAYMENT_METHOD_REQUIRED\")) {\n        setAuthError(ewLocale.maxAccountsExceeded);\n      }\n      console.error(`Error signing in with ${props.socialAuth}`, e);\n    }\n  };\n  // const { setModalVisibility } = props.connectUIProps.screenConfig;\n  const socialLogin = props.state?.socialLogin;\n  const socialLoginStarted = useRef(false);\n  useEffect(() => {\n    if (socialLoginStarted.current) {\n      return;\n    }\n    if (socialLogin) {\n      socialLoginStarted.current = true;\n      setStatus(\"connecting\");\n      socialLogin.connectionPromise.then(() => {\n        done();\n        setStatus(\"connected\");\n      }).catch(e => {\n        setAuthError(e.message);\n        setStatus(\"error\");\n      });\n    }\n  }, [done, socialLogin]);\n  return _jsx(Container, {\n    animate: \"fadein\",\n    flex: \"column\",\n    fullHeight: true,\n    children: _jsxs(Container, {\n      flex: \"column\",\n      expand: true,\n      p: \"lg\",\n      style: {\n        paddingBottom: 0\n      },\n      children: [props.goBack && _jsx(ModalHeader, {\n        title: props.isLinking ? props.connectLocale.manageWallet.linkProfile : locale.title,\n        onBack: props.goBack\n      }), props.size === \"compact\" ? _jsx(Spacer, {\n        y: \"xl\"\n      }) : null, _jsxs(Container, {\n        flex: \"column\",\n        center: \"both\",\n        expand: true,\n        style: {\n          textAlign: \"center\",\n          minHeight: \"250px\"\n        },\n        children: [status !== \"error\" && _jsxs(Container, {\n          animate: \"fadein\",\n          children: [_jsx(Text, {\n            color: \"primaryText\",\n            center: true,\n            multiline: true,\n            style: {\n              maxWidth: \"250px\"\n            },\n            children: locale.instruction\n          }), _jsx(Spacer, {\n            y: \"xl\"\n          }), _jsx(Container, {\n            center: \"x\",\n            flex: \"row\",\n            children: _jsx(Spinner, {\n              size: \"lg\",\n              color: \"accentText\"\n            })\n          }), _jsx(Spacer, {\n            y: \"xxl\"\n          })]\n        }), status === \"error\" && _jsxs(Container, {\n          animate: \"fadein\",\n          children: [authError ? _jsx(Text, {\n            center: true,\n            color: \"danger\",\n            children: authError\n          }) : _jsx(Text, {\n            color: \"danger\",\n            children: locale.failed\n          }), _jsx(Spacer, {\n            y: \"lg\"\n          }), _jsx(Button, {\n            variant: \"primary\",\n            onClick: handleSocialLogin,\n            children: locale.retry\n          }), _jsx(Spacer, {\n            y: \"xxl\"\n          })]\n        })]\n      })]\n    })\n  });\n}\n//# sourceMappingURL=SocialLogin.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}