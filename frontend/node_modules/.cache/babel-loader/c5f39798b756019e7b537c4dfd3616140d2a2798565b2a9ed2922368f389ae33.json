{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { resolveScheme } from \"../../../../utils/ipfs.js\";\nimport { Skeleton } from \"./Skeleton.js\";\n/**\n * @internal\n */\nexport const Img = props => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const propSrc = props.src;\n  const widthPx = `${props.width}px`;\n  const heightPx = `${props.height || props.width}px`;\n  if (propSrc === undefined) {\n    return _jsx(Skeleton, {\n      width: widthPx,\n      height: heightPx\n    });\n  }\n  const getSrc = () => {\n    try {\n      return resolveScheme({\n        uri: propSrc,\n        client: props.client\n      });\n    } catch {\n      return props.src;\n    }\n  };\n  const src = getSrc();\n  return _jsxs(\"div\", {\n    style: {\n      position: \"relative\",\n      display: \"inline-flex\",\n      flexShrink: 0,\n      alignItems: \"center\",\n      justifyItems: \"center\"\n    },\n    children: [!isLoaded && _jsx(Skeleton, {\n      width: widthPx,\n      height: heightPx\n    }), _jsx(\"img\", {\n      onLoad: () => {\n        setIsLoaded(true);\n      },\n      width: props.width,\n      height: props.height,\n      src: src,\n      alt: props.alt || \"\",\n      loading: props.loading,\n      decoding: \"async\",\n      style: {\n        objectFit: \"contain\",\n        height: !isLoaded ? 0 : props.height ? `${props.height}px` : undefined,\n        width: !isLoaded ? 0 : props.width ? `${props.width}px` : undefined,\n        userSelect: \"none\",\n        visibility: isLoaded ? \"visible\" : \"hidden\",\n        opacity: isLoaded ? 1 : 0,\n        transition: \"opacity 0.4s ease\",\n        ...props.style\n      },\n      draggable: false,\n      className: props.className,\n      onError: e => {\n        if (props.fallbackImage && e.currentTarget.src !== props.fallbackImage) {\n          e.currentTarget.src = props.fallbackImage;\n        }\n      }\n    }, src)]\n  });\n};\n//# sourceMappingURL=Img.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}