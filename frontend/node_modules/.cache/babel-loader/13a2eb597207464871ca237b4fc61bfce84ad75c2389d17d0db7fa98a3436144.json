{"ast":null,"code":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { sendCalls } from \"../../../../wallets/eip5792/send-calls.js\";\nimport { waitForBundle } from \"../../../../wallets/eip5792/wait-for-bundle.js\";\nimport { invalidateWalletBalance } from \"../../providers/invalidateWalletBalance.js\";\nimport { useActiveWallet } from \"./useActiveWallet.js\";\n/**\n * A hook to send [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) calls to a wallet.\n * This hook works with all Thirdweb wallets (in-app and smart) and certain injected wallets that already support EIP-5792.\n * Transactions will be bundled and sponsored when those capabilities are supported, otherwise they will be sent as individual transactions.\n *\n * When calls are sent, all contracts that are interacted with will have their corresponding reads revalidated via React Query.\n *\n *  This hook is dependent on the wallet's support for EIP-5792 and could fail.\n *  The mutatuon function will use your currently connected wallet by default, but you can pass it a specific wallet to use if you'd like.\n *\n * @returns A React Query mutatuon object to interact with {@link sendCalls}\n * @throws an error if the wallet does not support EIP-5792.\n * @returns The ID of the bundle of the calls.\n *\n * @beta\n * @example\n * ```tsx\n * import { useSendCalls } from \"thirdweb/react\";\n *\n * const sendTx1 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x33d9B8BEfE81027E2C859EDc84F5636cbb202Ed6\",\n    });\n * const sendTx2 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x2a4f24F935Eb178e3e7BA9B53A5Ee6d8407C0709\",\n    });\n * const { mutate: sendCalls, data: bundleId } = useSendCalls({ client });\n * await sendCalls({\n *   wallet,\n *   client,\n *   calls: [sendTx1, sendTx2],\n * });\n * ```\n * Await the bundle's full confirmation:\n * ```tsx\n * const { mutate: sendCalls, data: bundleId } = useSendCalls({ client, waitForResult: true });\n * await sendCalls({\n *   wallet,\n *   client,\n *   calls: [sendTx1, sendTx2],\n * });\n * ```\n * Sponsor transactions with a paymaster:\n * ```ts\n * const { mutate: sendCalls, data: bundleId } = useSendCalls();\n * await sendCalls({\n *   client,\n *   calls: [sendTx1, sendTx2],\n *   capabilities: {\n *     paymasterService: {\n *       url: `https://${CHAIN.id}.bundler.thirdweb.com/${client.clientId}`\n *     }\n *   }\n * });\n * ```\n *\n *  We recommend proxying any paymaster calls via an API route you setup and control.\n * @extension EIP5792\n */\nexport function useSendCalls({\n  client,\n  waitForResult = true\n}) {\n  const activeWallet = useActiveWallet();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async options => {\n      const {\n        wallet = activeWallet\n      } = options;\n      const chain = wallet?.getChain();\n      if (!wallet || !chain) {\n        throw new Error(\"Failed to send transactions, no connected wallet found.\");\n      }\n      const callsPromise = sendCalls({\n        ...options,\n        wallet\n      });\n      if (!waitForResult) {\n        return callsPromise;\n      }\n      const result = await waitForBundle({\n        bundleId: await callsPromise,\n        wallet,\n        client,\n        chain\n      });\n      return result;\n    },\n    onSettled: async (_result, _error, variables) => {\n      // Attempt to invalidate any reads related to the sent transactions\n      const chain = activeWallet?.getChain();\n      if (!_result || !activeWallet || !chain) {\n        return;\n      }\n      if (typeof _result === \"string\") {\n        await waitForBundle({\n          bundleId: _result,\n          wallet: activeWallet,\n          client,\n          chain\n        }).catch(error => {\n          console.error(\"Failed to confirm sent bundle and invalidate queries\", _result, error);\n          return undefined;\n        });\n      }\n      for (const call of variables.calls) {\n        queryClient.invalidateQueries({\n          queryKey: [\"readContract\", call.__contract?.chain.id, call.__contract?.address]\n        });\n      }\n      invalidateWalletBalance(queryClient, chain.id);\n    }\n  });\n}\n//# sourceMappingURL=useSendCalls.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}