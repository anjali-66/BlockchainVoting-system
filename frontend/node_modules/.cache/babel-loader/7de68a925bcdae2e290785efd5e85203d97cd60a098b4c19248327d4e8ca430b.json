{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\nimport { Color, DoubleSide, FrontSide } from 'three';\nimport { PBRMetallicRoughness } from './pbr-metallic-roughness.js';\nimport { TextureInfo, TextureUsage } from './texture-info.js';\nimport { $correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement } from './three-dom-element.js';\nconst $pbrMetallicRoughness = Symbol('pbrMetallicRoughness');\nconst $normalTexture = Symbol('normalTexture');\nconst $occlusionTexture = Symbol('occlusionTexture');\nconst $emissiveTexture = Symbol('emissiveTexture');\nconst $backingThreeMaterial = Symbol('backingThreeMaterial');\nconst $applyAlphaCutoff = Symbol('applyAlphaCutoff');\nexport const $lazyLoadGLTFInfo = Symbol('lazyLoadGLTFInfo');\nconst $initialize = Symbol('initialize');\nexport const $getLoadedMaterial = Symbol('getLoadedMaterial');\nexport const $ensureMaterialIsLoaded = Symbol('ensureMaterialIsLoaded');\nexport const $gltfIndex = Symbol('gltfIndex');\nexport const $setActive = Symbol('setActive');\nexport const $variantIndices = Symbol('variantIndices');\nconst $isActive = Symbol('isActive');\nexport const $variantSet = Symbol('variantSet');\nconst $modelVariants = Symbol('modelVariants');\n/**\n * Material facade implementation for Three.js materials\n */\nexport class Material extends ThreeDOMElement {\n  constructor(onUpdate, gltf, gltfMaterial, gltfIndex, isActive, modelVariants, correlatedMaterials, lazyLoadInfo = undefined) {\n    super(onUpdate, gltfMaterial, correlatedMaterials);\n    this[_a] = new Set();\n    this[$gltfIndex] = gltfIndex;\n    this[$isActive] = isActive;\n    this[$modelVariants] = modelVariants;\n    if (lazyLoadInfo == null) {\n      this[$initialize](gltf);\n    } else {\n      this[$lazyLoadGLTFInfo] = lazyLoadInfo;\n    }\n  }\n  get [(_a = $variantSet, $backingThreeMaterial)]() {\n    return this[$correlatedObjects].values().next().value;\n  }\n  [$initialize](gltf) {\n    const onUpdate = this[$onUpdate];\n    const gltfMaterial = this[$sourceObject];\n    const correlatedMaterials = this[$correlatedObjects];\n    if (gltfMaterial.extensions && gltfMaterial.extensions['KHR_materials_pbrSpecularGlossiness']) {\n      console.warn(`Material ${gltfMaterial.name} uses a deprecated extension\n          \"KHR_materials_pbrSpecularGlossiness\", please use\n          \"pbrMetallicRoughness\" instead. Specular Glossiness materials are\n          currently supported for rendering, but not for our scene-graph API,\n          nor for auto-generation of USDZ for Quick Look.`);\n    }\n    if (gltfMaterial.pbrMetallicRoughness == null) {\n      gltfMaterial.pbrMetallicRoughness = {};\n    }\n    this[$pbrMetallicRoughness] = new PBRMetallicRoughness(onUpdate, gltf, gltfMaterial.pbrMetallicRoughness, correlatedMaterials);\n    if (gltfMaterial.emissiveFactor == null) {\n      gltfMaterial.emissiveFactor = [0, 0, 0];\n    }\n    if (gltfMaterial.doubleSided == null) {\n      gltfMaterial.doubleSided = false;\n    }\n    if (gltfMaterial.alphaMode == null) {\n      gltfMaterial.alphaMode = 'OPAQUE';\n    }\n    if (gltfMaterial.alphaCutoff == null) {\n      gltfMaterial.alphaCutoff = 0.5;\n    }\n    const {\n      normalTexture: gltfNormalTexture,\n      occlusionTexture: gltfOcclusionTexture,\n      emissiveTexture: gltfEmissiveTexture\n    } = gltfMaterial;\n    const {\n      normalMap,\n      aoMap,\n      emissiveMap\n    } = correlatedMaterials.values().next().value;\n    this[$normalTexture] = new TextureInfo(onUpdate, TextureUsage.Normal, normalMap, correlatedMaterials, gltf, gltfNormalTexture ? gltfNormalTexture : null);\n    this[$occlusionTexture] = new TextureInfo(onUpdate, TextureUsage.Occlusion, aoMap, correlatedMaterials, gltf, gltfOcclusionTexture ? gltfOcclusionTexture : null);\n    this[$emissiveTexture] = new TextureInfo(onUpdate, TextureUsage.Emissive, emissiveMap, correlatedMaterials, gltf, gltfEmissiveTexture ? gltfEmissiveTexture : null);\n  }\n  async [$getLoadedMaterial]() {\n    if (this[$lazyLoadGLTFInfo] != null) {\n      const {\n        set,\n        material\n      } = await this[$lazyLoadGLTFInfo].doLazyLoad();\n      // Fills in the missing data.\n      this[$correlatedObjects] = set;\n      this[$initialize](this[$lazyLoadGLTFInfo].gltf);\n      // Releases lazy load info.\n      this[$lazyLoadGLTFInfo] = undefined;\n      // Redefines the method as a noop method.\n      this.ensureLoaded = async () => {};\n      return material;\n    }\n    return this[$correlatedObjects].values().next().value;\n  }\n  [$ensureMaterialIsLoaded]() {\n    if (this[$lazyLoadGLTFInfo] == null) {\n      return;\n    }\n    throw new Error(`Material \"${this.name}\" has not been loaded, call 'await\n    myMaterial.ensureLoaded()' before using an unloaded material.`);\n  }\n  async ensureLoaded() {\n    await this[$getLoadedMaterial]();\n  }\n  get isLoaded() {\n    return this[$lazyLoadGLTFInfo] == null;\n  }\n  get isActive() {\n    return this[$isActive];\n  }\n  [$setActive](isActive) {\n    this[$isActive] = isActive;\n  }\n  get name() {\n    return this[$sourceObject].name;\n  }\n  set name(name) {\n    const sourceMaterial = this[$sourceObject];\n    if (sourceMaterial != null) {\n      sourceMaterial.name = name;\n    }\n    if (this[$correlatedObjects] != null) {\n      for (const threeMaterial of this[$correlatedObjects]) {\n        threeMaterial.name = name;\n      }\n    }\n  }\n  get pbrMetallicRoughness() {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrMetallicRoughness];\n  }\n  get normalTexture() {\n    this[$ensureMaterialIsLoaded]();\n    return this[$normalTexture];\n  }\n  get occlusionTexture() {\n    this[$ensureMaterialIsLoaded]();\n    return this[$occlusionTexture];\n  }\n  get emissiveTexture() {\n    this[$ensureMaterialIsLoaded]();\n    return this[$emissiveTexture];\n  }\n  get emissiveFactor() {\n    this[$ensureMaterialIsLoaded]();\n    return this[$sourceObject].emissiveFactor;\n  }\n  get index() {\n    return this[$gltfIndex];\n  }\n  [$variantIndices]() {\n    return this[$variantSet];\n  }\n  hasVariant(name) {\n    const variantData = this[$modelVariants].get(name);\n    return variantData != null && this[$variantSet].has(variantData.index);\n  }\n  setEmissiveFactor(rgb) {\n    this[$ensureMaterialIsLoaded]();\n    const color = new Color();\n    if (rgb instanceof Array) {\n      color.fromArray(rgb);\n    } else {\n      color.set(rgb).convertSRGBToLinear();\n    }\n    for (const material of this[$correlatedObjects]) {\n      material.emissive.set(color);\n    }\n    this[$sourceObject].emissiveFactor = color.toArray();\n    this[$onUpdate]();\n  }\n  [$applyAlphaCutoff]() {\n    this[$ensureMaterialIsLoaded]();\n    const gltfMaterial = this[$sourceObject];\n    for (const material of this[$correlatedObjects]) {\n      if (this[$sourceObject].alphaMode === 'MASK') {\n        material.alphaTest = gltfMaterial.alphaCutoff;\n      } else {\n        material.alphaTest = undefined;\n      }\n      material.needsUpdate = true;\n    }\n  }\n  setAlphaCutoff(cutoff) {\n    this[$ensureMaterialIsLoaded]();\n    this[$sourceObject].alphaCutoff = cutoff;\n    this[$applyAlphaCutoff]();\n    this[$onUpdate]();\n  }\n  getAlphaCutoff() {\n    this[$ensureMaterialIsLoaded]();\n    return this[$sourceObject].alphaCutoff;\n  }\n  setDoubleSided(doubleSided) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects]) {\n      // When double-sided is disabled gltf spec dictates that Back-Face culling\n      // must be disabled, in three.js parlance that would mean FrontSide\n      // rendering only.\n      // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#double-sided\n      material.side = doubleSided ? DoubleSide : FrontSide;\n      material.needsUpdate = true;\n    }\n    this[$sourceObject].doubleSided = doubleSided;\n    this[$onUpdate]();\n  }\n  getDoubleSided() {\n    this[$ensureMaterialIsLoaded]();\n    return this[$sourceObject].doubleSided;\n  }\n  setAlphaMode(alphaMode) {\n    this[$ensureMaterialIsLoaded]();\n    const enableTransparency = (material, enabled) => {\n      material.transparent = enabled;\n      material.depthWrite = !enabled;\n    };\n    this[$sourceObject].alphaMode = alphaMode;\n    for (const material of this[$correlatedObjects]) {\n      enableTransparency(material, alphaMode === 'BLEND');\n      this[$applyAlphaCutoff]();\n      material.needsUpdate = true;\n    }\n    this[$onUpdate]();\n  }\n  getAlphaMode() {\n    this[$ensureMaterialIsLoaded]();\n    return this[$sourceObject].alphaMode;\n  }\n}\n//# sourceMappingURL=material.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}