{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getChainMetadata } from \"../../../../../chains/utils.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../contract/contract.js\";\nimport { getContractMetadata } from \"../../../../../extensions/common/read/getContractMetadata.js\";\nimport { getFunctionId } from \"../../../../../utils/function-id.js\";\nimport { resolveScheme } from \"../../../../../utils/ipfs.js\";\nimport { useTokenContext } from \"./provider.js\";\n/**\n * This component tries to resolve the icon of a given token, then return an image.\n * @returns an <img /> with the src of the token icon\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { TokenProvider, TokenIcon } from \"thirdweb/react\";\n *\n * <TokenProvider address=\"0x-token-address\" chain={chain} client={client}>\n *   <TokenIcon />\n * </TokenProvider>\n * ```\n *\n * Result: An <img /> component with the src of the icon\n * ```html\n * <img src=\"token-icon.png\" />\n * ```\n *\n * ### Override the icon with the `iconResolver` prop\n * If you already have the icon url, you can skip the network requests and pass it directly to the TokenIcon\n * ```tsx\n * <TokenIcon iconResolver=\"/usdc.png\" />\n * ```\n *\n * You can also pass in your own custom (async) function that retrieves the icon url\n * ```tsx\n * const getIcon = async () => {\n *   const icon = getIconFromCoinMarketCap(tokenAddress, etc);\n *   return icon;\n * };\n *\n * <TokenIcon iconResolver={getIcon} />\n * ```\n *\n * ### Show a loading sign while the icon is being loaded\n * ```tsx\n * <TokenIcon loadingComponent={<Spinner />} />\n * ```\n *\n * ### Fallback to a dummy image if the token icon fails to resolve\n * ```tsx\n * <TokenIcon fallbackComponent={<img src=\"blank-image.png\" />} />\n * ```\n *\n * ### Usage with queryOptions\n * TokenIcon uses useQuery() from tanstack query internally.\n * It allows you to pass a custom queryOptions of your choice for more control of the internal fetching logic\n * ```tsx\n * <TokenIcon queryOptions={{ enabled: someLogic, retry: 3, }} />\n * ```\n *\n * @component\n * @token\n * @beta\n */\nexport function TokenIcon({\n  iconResolver,\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  ...restProps\n}) {\n  const {\n    address,\n    client,\n    chain\n  } = useTokenContext();\n  const iconQuery = useQuery({\n    queryKey: [\"_internal_token_icon_\", chain.id, address, {\n      resolver: typeof iconResolver === \"string\" ? iconResolver : typeof iconResolver === \"function\" ? getFunctionId(iconResolver) : undefined\n    }],\n    queryFn: async () => {\n      if (typeof iconResolver === \"string\") {\n        return iconResolver;\n      }\n      if (typeof iconResolver === \"function\") {\n        return iconResolver();\n      }\n      if (address.toLowerCase() === NATIVE_TOKEN_ADDRESS.toLowerCase()) {\n        const possibleUrl = await getChainMetadata(chain).then(data => data.icon?.url);\n        if (!possibleUrl) {\n          throw new Error(\"Failed to resolve icon for native token\");\n        }\n        return resolveScheme({\n          uri: possibleUrl,\n          client\n        });\n      }\n      // Try to get the icon from the contractURI\n      const contractMetadata = await getContractMetadata({\n        contract: getContract({\n          address,\n          chain,\n          client\n        })\n      });\n      if (!contractMetadata.image || typeof contractMetadata.image !== \"string\") {\n        throw new Error(\"Failed to resolve token icon from contract metadata\");\n      }\n      return resolveScheme({\n        uri: contractMetadata.image,\n        client\n      });\n    },\n    ...queryOptions\n  });\n  if (iconQuery.isLoading) {\n    return loadingComponent || null;\n  }\n  if (!iconQuery.data) {\n    return fallbackComponent || null;\n  }\n  return _jsx(\"img\", {\n    src: iconQuery.data,\n    ...restProps,\n    alt: restProps.alt\n  });\n}\n//# sourceMappingURL=icon.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}