{"ast":null,"code":"import { detectPlatform } from \"../utils/detect-platform.js\";\nimport { stringify } from \"../utils/json.js\";\nimport { buildFormData, extractObjectFiles, isFileOrUint8Array, replaceObjectFilesWithUris, replaceObjectGatewayUrlsWithSchemes } from \"./upload/helpers.js\";\n/**\n * Uploads files based on the provided options.\n * @param options - The upload options.\n * @returns A promise that resolves to the uploaded file URI or URIs (when passing multiple files).\n * @throws An error if the upload fails.\n * @example\n *\n * ### Uploading JSON objects\n *\n * ```ts\n * import { upload } from \"thirdweb/storage\";\n * const uri = await upload({\n *  client,\n *  files: [\n *    {\n *      name: \"something\",\n *      data: {\n *        hello: \"world\",\n *      },\n *    },\n *  ],\n * });\n * ```\n *\n * ### Uploading files\n *\n * ```ts\n * import { upload } from \"thirdweb/storage\";\n * const uri = await upload({\n *  client,\n *  files: [\n *    new File([\"hello world\"], \"hello.txt\"),\n *  ],\n * });\n * ```\n * @storage\n */\nexport async function upload(options) {\n  // deal with the differnt file types\n  // if there are no files, return an empty array immediately\n  if (options.files.length === 0) {\n    return null;\n  }\n  // handle file arrays\n  const isFileArray = options.files.map(item => isFileOrUint8Array(item) || typeof item === \"string\").every(item => !!item);\n  let uris;\n  if (isFileArray) {\n    // if we already have an array of files, we can just pass it through\n    uris = options.files;\n  } else {\n    // otherwise we have to process them first\n    let cleaned = options.files;\n    // Replace any gateway URLs with their hashes\n    cleaned = replaceObjectGatewayUrlsWithSchemes(cleaned);\n    // Recurse through data and extract files to upload\n    const files = extractObjectFiles(cleaned);\n    if (files.length) {\n      // Upload all files that came from the object\n      const uris_ = await upload({\n        ...options,\n        files\n      });\n      // Recurse through data and replace files with hashes\n      cleaned = replaceObjectFilesWithUris(cleaned,\n      // always pass an array even if the underlying upload returns a single uri\n      Array.isArray(uris_) ? uris_ : [uris_]);\n    }\n    uris = cleaned.map(item => {\n      if (typeof item === \"string\") {\n        return item;\n      }\n      return stringify(item);\n    });\n  }\n  // end deal with the differnt file types\n  const form_ = new FormData();\n  const {\n    fileNames,\n    form\n  } = buildFormData(form_, uris, options);\n  const platform = detectPlatform();\n  if (platform === \"browser\" || platform === \"node\") {\n    const {\n      uploadBatch\n    } = await import(\"./upload/web-node.js\");\n    const uris = await uploadBatch(options.client, form, fileNames, options);\n    // if we only passed a single file, return its URI directly\n    if (options.files.length === 1) {\n      return uris[0];\n    }\n    return uris;\n  }\n  throw new Error(\"Please, use the uploadMobile function in mobile environments.\");\n}\n//# sourceMappingURL=upload.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}