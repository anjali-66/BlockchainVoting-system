{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useQueries } from \"@tanstack/react-query\";\nimport { useMemo } from \"react\";\nimport { getCachedChain } from \"../../../../../chains/utils.js\";\nimport { getContract } from \"../../../../../contract/contract.js\";\nimport { getOwnedNFTs as getErc721OwnedNFTs } from \"../../../../../extensions/erc721/read/getOwnedNFTs.js\";\nimport { isERC721 } from \"../../../../../extensions/erc721/read/isERC721.js\";\nimport { getOwnedNFTs as getErc1155OwnedNFTs } from \"../../../../../extensions/erc1155/read/getOwnedNFTs.js\";\nimport { isERC1155 } from \"../../../../../extensions/erc1155/read/isERC1155.js\";\nimport { useActiveAccount } from \"../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWalletChain } from \"../../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport { MediaRenderer } from \"../../MediaRenderer/MediaRenderer.js\";\nimport { Skeleton } from \"../../components/Skeleton.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Container, Line, ModalHeader } from \"../../components/basic.js\";\nconst fetchNFTs = async (client, chain, nftAddress, owner) => {\n  const contract = getContract({\n    address: nftAddress,\n    chain,\n    client\n  });\n  const erc721 = await isERC721({\n    contract\n  }).catch(() => {\n    throw new Error(`Failed to read contract bytecode for NFT ${nftAddress} on ${chain.name || chain.id}, is this NFT on the correct chain?`);\n  });\n  if (erc721) {\n    const result = await getErc721OwnedNFTs({\n      contract,\n      owner: owner\n    });\n    return result.map(nft => ({\n      ...nft,\n      quantityOwned: BigInt(1),\n      address: contract.address,\n      chain\n    }));\n  }\n  const erc1155 = await isERC1155({\n    contract\n  }).catch(() => false);\n  if (erc1155) {\n    const result = await getErc1155OwnedNFTs({\n      contract,\n      address: owner\n    });\n    return result.map(nft => ({\n      ...nft,\n      address: contract.address,\n      chain\n    }));\n  }\n  throw new Error(`NFT at ${nftAddress} on chain ${chain.id} is not ERC721 or ERC1155, or does not properly identify itself as supporting either interface`);\n};\n/**\n * @internal\n */\nexport function ViewNFTs(props) {\n  return _jsxs(Container, {\n    style: {\n      minHeight: \"300px\"\n    },\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: _jsx(ModalHeader, {\n        title: props.connectLocale.viewFunds.viewNFTs,\n        onBack: props.onBack\n      })\n    }), _jsx(Line, {}), _jsxs(Container, {\n      px: \"sm\",\n      scrollY: true,\n      style: {\n        maxHeight: \"500px\"\n      },\n      children: [_jsx(Spacer, {\n        y: \"md\"\n      }), _jsx(ViewNFTsContent, {\n        ...props\n      })]\n    })]\n  });\n}\nexport function ViewNFTsContent(props) {\n  const activeAccount = useActiveAccount();\n  const activeChain = useActiveWalletChain();\n  const nftList = useMemo(() => {\n    const nfts = [];\n    if (!props.supportedNFTs) return [];\n    for (const chainId in props.supportedNFTs) {\n      if (props.supportedNFTs[chainId]) {\n        nfts.push(...props.supportedNFTs[chainId].map(address => ({\n          address,\n          chain: getCachedChain(Number.parseInt(chainId))\n        })));\n      }\n    }\n    return nfts;\n  }, [props.supportedNFTs]);\n  const results = useQueries({\n    queries: nftList.map(nft => ({\n      queryKey: [\"readContract\", nft.chain.id, nft.address],\n      queryFn: () => {\n        if (!activeAccount) {\n          throw new Error(\"No active account\");\n        }\n        return fetchNFTs(props.client, nft.chain, nft.address, activeAccount.address);\n      },\n      enabled: !!activeAccount\n    }))\n  });\n  if (!activeChain?.id || !activeAccount?.address) {\n    return null;\n  }\n  return _jsxs(_Fragment, {\n    children: [_jsx(Container, {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"1fr 1fr\",\n        gap: \"12px\"\n      },\n      children: results.map((result, index) => {\n        if (result.error) {\n          console.error(result.error);\n          return null;\n        }\n        return result.isLoading || !result.data ? _jsx(Skeleton, {\n          height: \"150px\",\n          width: \"150px\"\n        }, `${nftList[index]?.chain?.id}:${nftList[index]?.address}`) : result.data.map(nft => _jsx(NftCard, {\n          ...nft,\n          client: props.client,\n          chain: nft.chain,\n          theme: props.theme\n        }, `${nft.chain.id}:${nft.address}:${nft.id}`));\n      })\n    }), _jsx(Spacer, {\n      y: \"lg\"\n    })]\n  });\n}\nfunction NftCard(props) {\n  const theme = typeof props.theme === \"string\" ? props.theme : props.theme.type;\n  const themeObject = typeof props.theme === \"string\" ? undefined : props.theme;\n  const content = _jsxs(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"4px\",\n      alignItems: \"center\"\n    },\n    children: [_jsxs(\"div\", {\n      style: {\n        position: \"relative\",\n        display: \"flex\",\n        flexShrink: 0,\n        alignItems: \"center\",\n        width: \"150px\",\n        height: \"150px\",\n        borderRadius: \"8px\",\n        overflow: \"hidden\",\n        background: theme === \"light\" ? \"rgba(0, 0, 0, 0.10)\" : \"rgba(0, 0, 0, 0.20)\"\n      },\n      children: [props.metadata.image && _jsx(MediaRenderer, {\n        src: props.metadata.image,\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        client: props.client\n      }), props.quantityOwned > 1 && _jsx(\"div\", {\n        style: {\n          position: \"absolute\",\n          bottom: \"4px\",\n          right: \"4px\",\n          background: themeObject?.colors?.modalBg ?? (theme === \"light\" ? \"white\" : \"black\"),\n          fontSize: \"10px\",\n          padding: \"4px 4px\",\n          width: \"20px\",\n          height: \"20px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          borderRadius: \"100%\"\n        },\n        children: props.quantityOwned.toString()\n      }), props.chain.icon && _jsx(\"img\", {\n        alt: props.chain.name,\n        style: {\n          position: \"absolute\",\n          bottom: \"4px\",\n          left: \"4px\",\n          width: \"20px\",\n          height: \"20px\"\n        },\n        src: props.chain.icon.url\n      })]\n    }), _jsx(\"span\", {\n      style: {\n        fontWeight: 600\n      },\n      children: props.metadata.name\n    })]\n  });\n  if (props.chain.name) {\n    return _jsx(\"a\", {\n      href: `https://thirdweb.com/${props.chain.id}/${props.address}/nfts/${props.id}`,\n      target: \"_blank\",\n      rel: \"noreferrer\",\n      children: content\n    });\n  }\n  return content;\n}\n//# sourceMappingURL=ViewNFTs.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}