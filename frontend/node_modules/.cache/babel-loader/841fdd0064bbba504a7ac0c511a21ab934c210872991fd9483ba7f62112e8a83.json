{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useState, useRef, useEffect, Suspense, lazy } from \"react\";\nimport { CarbonDocumentAudio, CarbonDocumentUnknown, CarbonPauseFilled, CarbonPlayFilledAlt } from \"./icons.js\";\nimport { useResolvedMediaType } from \"./useResolvedMediaType.js\";\n/**\n * Component that renders any asset stored on IPFS (or anywhere else), given the IPFS URI / URL.\n *\n * If an IPFS url is given, the asset is fetched from IPFS through the thirdweb IPFS gateway by default. You can also specify a custom gateway URL using the `gatewayUrl` prop.\n *\n * The [mime type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the\n * asset is determined and the appropriate component is rendered on the UI.\n *\n * For example, if the URI points to an image, the `img` tag will be used. If it is a video, the `video` tag will be used, etc.\n * The component currently supports:\n *\n * - Images\n * - Videos\n * - Audio files\n * - 3D Models\n * - SVGs (for [on-chain NFTs](https://blog.thirdweb.com/guides/how-to-create-on-chain-nfts-with-thirdweb/))\n * - `iframe` and `HTML`\n * - If none of these are appropriate, the fallback is a link to the asset\n *\n * The default size of rendered media is 300px x 300px, but this can be changed using the `width` and `height` props.\n *\n * You can use thirdweb CLI to upload any file to IPFS and get the IPFS URI\n *\n * `npx thirdweb upload <path/to/file>`\n * @example\n * ```tsx\n * import { MediaRenderer } from \"thirdweb/react\";\n *\n * const client = createThirdwebClient({ clientId: \"...\" });\n *\n * function Home() {\n * \treturn (\n * \t\t<MediaRenderer client={client} src=\"ipfs://QmV4HC9fNrPJQeYpbW55NLLuSBMyzE11zS1L4HmL6Lbk7X\" />\n * \t);\n * }\n * ```\n * @param props - Refer to [`MediaRendererProps`](https://portal.thirdweb.com/references/typescript/v5/MediaRendererProps) to see the available props.\n */\nexport const MediaRenderer = /* @__PURE__ */(() => React.forwardRef(function Media_Renderer({\n  src,\n  poster,\n  alt,\n  gatewayUrl,\n  requireInteraction = false,\n  width = \"300px\",\n  height = \"300px\",\n  style,\n  mimeType,\n  client,\n  controls,\n  className\n}, ref) {\n  const mergedStyle = {\n    objectFit: \"contain\",\n    ...style\n  };\n  const {\n    mediaInfo,\n    isFetched: mediaInfoIsFetched\n  } = useResolvedMediaType(client, src ?? undefined, mimeType, gatewayUrl);\n  const {\n    mediaInfo: possiblePosterSrc\n  } = useResolvedMediaType(client, poster ?? undefined, undefined, gatewayUrl);\n  if (!mediaInfoIsFetched || !src) {\n    return _jsx(\"div\", {\n      style: style\n    });\n  }\n  if (mediaInfo.mimeType) {\n    // html content\n    if (mediaInfo.mimeType.startsWith(\"text/html\")) {\n      return _jsx(IframePlayer, {\n        style: mergedStyle,\n        src: mediaInfo.url,\n        poster: possiblePosterSrc.url,\n        ref: ref,\n        requireInteraction: requireInteraction,\n        className: className,\n        alt: alt\n      });\n    }\n    // 3d model\n    if (mediaInfo.mimeType.startsWith(\"model\")) {\n      return _jsx(Suspense, {\n        fallback: poster ? _jsx(\"img\", {\n          style: mergedStyle,\n          src: poster,\n          alt: alt,\n          ref: ref,\n          className: className\n        }) : null,\n        children: _jsx(ModelViewer, {\n          style: mergedStyle,\n          src: mediaInfo.url || \"\",\n          poster: poster,\n          alt: alt,\n          className: className\n        })\n      });\n    }\n    //  video\n    if (mediaInfo.mimeType.startsWith(\"video\")) {\n      return _jsx(VideoPlayer, {\n        style: mergedStyle,\n        src: mediaInfo.url,\n        ref: ref,\n        poster: possiblePosterSrc.mimeType?.startsWith(\"image/\") ? possiblePosterSrc.url : undefined,\n        requireInteraction: requireInteraction,\n        className: className,\n        controls: controls\n      });\n    }\n    // audio\n    if (mediaInfo.mimeType.startsWith(\"audio\")) {\n      return _jsx(AudioPlayer, {\n        style: mergedStyle,\n        src: mediaInfo.url,\n        poster: possiblePosterSrc.url,\n        alt: alt,\n        ref: ref,\n        className: className,\n        height: height,\n        width: width,\n        controls: controls\n      });\n    }\n    // image\n    if (mediaInfo.mimeType.startsWith(\"image/\")) {\n      return _jsx(ImageRenderer, {\n        style: mergedStyle,\n        src: mediaInfo.url,\n        alt: alt,\n        ref: ref,\n        className: className,\n        height: height,\n        width: width\n      });\n    }\n  }\n  // unknown mime types or no mime type\n  return _jsx(LinkPlayer, {\n    style: mergedStyle,\n    src: mediaInfo.url,\n    alt: alt,\n    ref: ref,\n    className: className\n  });\n}))();\nconst ModelViewer = /* @__PURE__ */lazy(() => import(\"./ModelViewer.js\"));\nconst PlayButton = ({\n  onClick,\n  isPlaying\n}) => {\n  const [isHovering, setIsHovering] = useState(false);\n  const onMouseEnter = () => setIsHovering(true);\n  const onMouseLeave = () => setIsHovering(false);\n  const onMouseDown = () => setIsHovering(false);\n  const onMouseUp = () => setIsHovering(true);\n  return _jsx(\"button\", {\n    type: \"button\",\n    style: {\n      position: \"absolute\",\n      bottom: 0,\n      right: 0,\n      transform: \"translate(-25%, -25%)\",\n      width: \"32px\",\n      height: \"32px\",\n      zIndex: 3,\n      backgroundColor: \"#fff\",\n      color: \"rgb(138, 147, 155)\",\n      display: \"grid\",\n      placeItems: \"center\",\n      borderRadius: \"50%\",\n      border: \"1px solid rgb(229, 232, 235)\",\n      cursor: \"pointer\",\n      padding: 0,\n      ...(isHovering ? {\n        color: \"rgb(53, 56, 64)\",\n        boxShadow: \"rgb(4 17 29 / 25%) 0px 0px 8px 0px\"\n      } : {})\n    },\n    onClick: onClick,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onMouseDown: onMouseDown,\n    onMouseUp: onMouseUp,\n    children: !isPlaying ? _jsx(CarbonPlayFilledAlt, {}) : _jsx(CarbonPauseFilled, {})\n  });\n};\nconst ImageRenderer = /* @__PURE__ */(() => React.forwardRef(function Image_Renderer(props, ref) {\n  const {\n    style,\n    src,\n    alt,\n    className,\n    height,\n    width\n  } = props;\n  const [error, setError] = useState(false);\n  if (error) {\n    return _jsx(LinkPlayer, {\n      style: style,\n      src: src,\n      alt: alt,\n      ref: ref,\n      className: className\n    });\n  }\n  return _jsx(\"img\", {\n    style: style,\n    src: src ?? undefined,\n    alt: alt,\n    ref: ref,\n    className: className,\n    height: height,\n    width: width,\n    onError: () => {\n      setError(true);\n    }\n  });\n}))();\nconst VideoPlayer = /* @__PURE__ */(() => React.forwardRef(function Video_Player({\n  src,\n  alt,\n  poster,\n  requireInteraction,\n  style,\n  width,\n  height,\n  controls,\n  className\n}, ref) {\n  const videoRef = useRef(null);\n  const [playing, setPlaying] = useState(!requireInteraction);\n  const [muted, setMuted] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    if (videoRef.current) {\n      if (playing) {\n        try {\n          videoRef.current.play();\n        } catch (err) {\n          console.error(\"error playing video\", err);\n        }\n      } else {\n        try {\n          videoRef.current.pause();\n          videoRef.current.currentTime = 0;\n        } catch (err) {\n          console.error(\"error pausing video\", err);\n        }\n      }\n    }\n  }, [playing]);\n  if (error) {\n    return _jsx(LinkPlayer, {\n      style: style,\n      src: src,\n      alt: alt,\n      ref: ref,\n      className: className\n    });\n  }\n  return _jsxs(\"div\", {\n    style: {\n      position: \"relative\",\n      ...style\n    },\n    className: className,\n    children: [_jsx(\"video\", {\n      ref: mergeRefs([videoRef, ref]),\n      src: src ?? undefined,\n      poster: poster ?? undefined,\n      loop: true,\n      playsInline: true,\n      controlsList: \"nodownload\",\n      muted: muted,\n      preload: poster ? \"metadata\" : \"auto\",\n      onCanPlay: () => {\n        if (playing) {\n          videoRef.current?.play();\n        }\n      },\n      onError: () => {\n        setError(true);\n      },\n      width: width,\n      height: height,\n      controls: controls,\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        objectFit: \"contain\",\n        zIndex: 1,\n        transition: \"opacity .5s\",\n        opacity: !poster ? 1 : playing ? 1 : 0\n      }\n    }), poster && _jsx(\"img\", {\n      src: poster,\n      style: {\n        objectFit: \"contain\",\n        pointerEvents: \"none\",\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\",\n        zIndex: 2,\n        transition: \"opacity .5s\",\n        opacity: playing ? 0 : 1,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      },\n      alt: alt\n    }), _jsx(PlayButton, {\n      onClick: () => {\n        setPlaying(prev => !prev);\n        setMuted(false);\n      },\n      isPlaying: playing\n    })]\n  });\n}))();\nconst AudioPlayer = /* @__PURE__ */(() => React.forwardRef(function Audio_Player({\n  src,\n  alt,\n  poster,\n  style,\n  height,\n  width,\n  className,\n  controls\n}, ref) {\n  const audioRef = useRef(null);\n  const [playing, setPlaying] = useState(false);\n  const [muted, setMuted] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    if (audioRef.current) {\n      if (playing) {\n        audioRef.current.play();\n      } else {\n        audioRef.current.pause();\n        audioRef.current.currentTime = 0;\n      }\n    }\n  }, [playing]);\n  if (error) {\n    return _jsx(LinkPlayer, {\n      style: style,\n      src: src,\n      alt: alt,\n      ref: ref,\n      className: className\n    });\n  }\n  return _jsxs(\"div\", {\n    style: {\n      position: \"relative\",\n      ...style\n    },\n    className: className,\n    children: [poster ? _jsx(\"img\", {\n      height: height,\n      width: width,\n      src: poster,\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        pointerEvents: \"none\",\n        objectFit: \"contain\"\n      },\n      alt: alt\n    }) : _jsx(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        display: \"grid\",\n        placeItems: \"center\",\n        pointerEvents: \"none\",\n        backgroundColor: \"#fff\",\n        color: \"rgb(138, 147, 155)\"\n      },\n      children: _jsx(CarbonDocumentAudio, {\n        style: {\n          height: \"64px\",\n          width: \"64px\"\n        }\n      })\n    }), _jsx(PlayButton, {\n      onClick: () => {\n        setPlaying(prev => !prev);\n        setMuted(false);\n      },\n      isPlaying: playing\n    }), _jsx(\"audio\", {\n      ref: mergeRefs([audioRef, ref]),\n      src: src ?? undefined,\n      loop: true,\n      playsInline: true,\n      controls: controls,\n      muted: muted,\n      preload: \"none\",\n      controlsList: \"nodownload\",\n      style: {\n        position: \"absolute\",\n        opacity: 0,\n        pointerEvents: \"none\",\n        zIndex: -1,\n        visibility: \"hidden\"\n      },\n      onError: () => {\n        setError(true);\n      }\n    })]\n  });\n}))();\nconst IframePlayer = /* @__PURE__ */(() => React.forwardRef(function Iframe_Player({\n  src,\n  alt,\n  poster,\n  requireInteraction,\n  style,\n  ...restProps\n}, ref) {\n  const [playing, setPlaying] = useState(!requireInteraction);\n  return _jsxs(\"div\", {\n    style: {\n      position: \"relative\",\n      ...style\n    },\n    ...restProps,\n    children: [_jsx(\"iframe\", {\n      title: alt || \"thirdweb iframe player\",\n      src: playing ? src ?? undefined : undefined,\n      ref: ref,\n      style: {\n        objectFit: \"contain\",\n        zIndex: 1,\n        height: \"100%\",\n        width: \"100%\",\n        transition: \"opacity .5s\",\n        opacity: !poster ? 1 : playing ? 1 : 0,\n        border: \"none\"\n      },\n      sandbox: \"allow-scripts\",\n      allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    }), poster && _jsx(\"img\", {\n      src: poster,\n      style: {\n        objectFit: \"contain\",\n        pointerEvents: \"none\",\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\",\n        zIndex: 2,\n        transition: \"opacity .5s\",\n        opacity: playing ? 0 : 1,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      },\n      alt: alt\n    }), _jsx(PlayButton, {\n      onClick: () => {\n        setPlaying(prev => !prev);\n      },\n      isPlaying: playing\n    })]\n  });\n}))();\nconst LinkPlayer = /* @__PURE__ */(() => React.forwardRef(function Link_Player({\n  src,\n  alt,\n  style,\n  className\n}, ref) {\n  return _jsx(\"div\", {\n    style: {\n      position: \"relative\",\n      ...style\n    },\n    className: className,\n    children: _jsx(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        display: \"grid\",\n        placeItems: \"center\",\n        backgroundColor: \"#fff\",\n        color: \"rgb(138, 147, 155)\"\n      },\n      children: _jsxs(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"8px\",\n          alignItems: \"center\",\n          flexWrap: \"nowrap\"\n        },\n        children: [_jsx(CarbonDocumentUnknown, {\n          style: {\n            maxWidth: \"128px\",\n            minWidth: \"48px\",\n            width: \"50%\",\n            aspectRatio: \"1\"\n          }\n        }), _jsx(\"a\", {\n          rel: \"noopener noreferrer\",\n          style: {\n            textDecoration: \"underline\",\n            color: \"rgb(138, 147, 155)\"\n          },\n          href: src ?? undefined,\n          target: \"_blank\",\n          ref: ref,\n          children: alt || \"File\"\n        })]\n      })\n    })\n  });\n}))();\n// biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\nfunction mergeRefs(refs) {\n  return value => {\n    for (const ref of refs) {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    }\n  };\n}\n//# sourceMappingURL=MediaRenderer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}