{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport styled from \"@emotion/styled\";\nimport { CheckIcon, CrossCircledIcon } from \"@radix-ui/react-icons\";\nimport { useSyncExternalStore } from \"react\";\nimport { getCachedChain } from \"../../../../../chains/utils.js\";\nimport { getTransactionStore } from \"../../../../../transaction/transaction-store.js\";\nimport { shortenHex } from \"../../../../../utils/address.js\";\nimport { formatExplorerTxUrl } from \"../../../../../utils/url.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, spacing } from \"../../../../core/design-system/index.js\";\nimport { useWaitForReceipt } from \"../../../../core/hooks/contract/useWaitForReceipt.js\";\nimport { useChainExplorers, useChainIconUrl } from \"../../../../core/hooks/others/useChainQuery.js\";\nimport { useActiveWalletChain } from \"../../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport { ChainIcon } from \"../../components/ChainIcon.js\";\nimport { ChainName } from \"../../components/ChainName.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Spinner } from \"../../components/Spinner.js\";\nimport { Container } from \"../../components/basic.js\";\nimport { Button } from \"../../components/buttons.js\";\nimport { Text } from \"../../components/text.js\";\nexport function WalletTransactionHistory(props) {\n  const activeChain = useActiveWalletChain();\n  const chainExplorers = useChainExplorers(activeChain);\n  const transactionStore = getTransactionStore(props.address);\n  const reverseChronologicalTransactions = useSyncExternalStore(transactionStore.subscribe, transactionStore.getValue);\n  const transactions = [...reverseChronologicalTransactions].reverse();\n  return _jsx(Container, {\n    scrollY: true,\n    flex: \"column\",\n    fullHeight: true,\n    style: {\n      minHeight: \"250px\",\n      maxHeight: \"370px\",\n      paddingBottom: spacing.lg\n    },\n    children: _jsx(Container, {\n      flex: \"column\",\n      gap: \"xs\",\n      expand: true,\n      children: transactions.length === 0 ? _jsxs(Container, {\n        flex: \"column\",\n        gap: \"md\",\n        center: \"both\",\n        color: \"secondaryText\",\n        style: {\n          flex: \"1\",\n          minHeight: \"250px\"\n        },\n        children: [_jsx(CrossCircledIcon, {\n          width: iconSize.xl,\n          height: iconSize.xl\n        }), _jsx(Text, {\n          children: \"No Transactions\"\n        })]\n      }) : _jsx(Container, {\n        animate: \"fadein\",\n        flex: \"column\",\n        gap: \"xs\",\n        style: {\n          minHeight: \"250px\"\n        },\n        children: transactions.map(tx => {\n          return _jsx(TransactionButton, {\n            explorerUrl: chainExplorers.explorers[0]?.url,\n            client: props.client,\n            hash: tx.transactionHash,\n            chainId: tx.chainId\n          }, tx.transactionHash);\n        })\n      })\n    })\n  });\n}\nfunction TransactionButton(props) {\n  const {\n    data: receipt,\n    isLoading,\n    error\n  } = useWaitForReceipt({\n    transactionHash: props.hash,\n    chain: getCachedChain(props.chainId),\n    client: props.client\n  });\n  const chainIconQuery = useChainIconUrl(getCachedChain(props.chainId));\n  const content = _jsxs(TxButton, {\n    variant: \"secondary\",\n    fullWidth: true,\n    style: {\n      paddingBlock: spacing.sm\n    },\n    children: [_jsxs(Container, {\n      flex: \"row\",\n      center: \"y\",\n      gap: \"md\",\n      style: {\n        flex: 1\n      },\n      children: [_jsx(ChainIcon, {\n        chainIconUrl: chainIconQuery.url,\n        size: iconSize.lg,\n        client: props.client\n      }), _jsxs(\"div\", {\n        style: {\n          flex: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\"\n        },\n        children: [_jsx(Container, {\n          flex: \"row\",\n          gap: \"xs\",\n          center: \"y\",\n          style: {\n            justifyContent: \"space-between\"\n          },\n          children: _jsx(Text, {\n            size: \"sm\",\n            color: \"primaryText\",\n            children: receipt?.to ? `Interacted with ${shortenHex(receipt.to, 4)}` : `Hash: ${shortenHex(props.hash, 4)}`\n          })\n        }), _jsx(Spacer, {\n          y: \"xxs\"\n        }), _jsx(Container, {\n          flex: \"row\",\n          center: \"y\",\n          gap: \"xxs\",\n          style: {\n            justifyContent: \"space-between\"\n          },\n          children: _jsx(ChainName, {\n            chain: getCachedChain(props.chainId),\n            size: \"xs\",\n            client: props.client\n          })\n        })]\n      })]\n    }), _jsxs(Container, {\n      flex: \"row\",\n      gap: \"xxs\",\n      center: \"y\",\n      children: [isLoading && _jsx(Spinner, {\n        size: \"sm\",\n        color: \"primaryText\"\n      }), !isLoading && receipt && receipt.status === \"success\" && _jsx(Text, {\n        size: \"md\",\n        color: \"success\",\n        children: _jsx(CheckIcon, {\n          width: iconSize.md,\n          height: iconSize.md\n        })\n      }), (error || !isLoading && receipt && receipt.status !== \"success\") && _jsx(Text, {\n        size: \"md\",\n        color: \"danger\",\n        children: _jsx(CrossCircledIcon, {\n          width: iconSize.md,\n          height: iconSize.md\n        })\n      })]\n    })]\n  });\n  if (props.explorerUrl) {\n    return _jsx(\"a\", {\n      href: formatExplorerTxUrl(props.explorerUrl, props.hash),\n      target: \"_blank\",\n      rel: \"noreferrer\",\n      children: content\n    });\n  }\n  return content;\n}\nconst TxButton = /* @__PURE__ */styled(Button)(() => {\n  const theme = useCustomTheme();\n  return {\n    background: theme.colors.tertiaryBg,\n    \"&:hover\": {\n      background: theme.colors.secondaryButtonBg\n    },\n    height: \"62px\"\n  };\n});\n//# sourceMappingURL=WalletTransactionHistory.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}