{"ast":null,"code":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { unlinkProfile } from \"../../../../wallets/in-app/web/lib/auth/index.js\";\nimport { useConnectedWallets } from \"../../../core/hooks/wallets/useConnectedWallets.js\";\n/**\n * Unlinks a web2 or web3 profile currently connected in-app or ecosystem account.\n * **When a profile is unlinked from the account, it will no longer be able to be used to sign into the account.**\n *\n * @example\n *\n * ### Unlinking an email account\n *\n * ```jsx\n * import { useUnlinkProfile } from \"thirdweb/react\";\n *\n * const { data: connectedProfiles, isLoading } = useProfiles({\n *   client: props.client,\n * });\n * const { mutate: unlinkProfile } = useUnlinkProfile();\n *\n * const onClick = () => {\n *   unlinkProfile({\n *     client,\n *      // Select any other profile you want to unlink\n *     profileToUnlink: connectedProfiles[1]\n *   });\n * };\n * ```\n *\n * @wallet\n */\nexport function useUnlinkProfile() {\n  const wallets = useConnectedWallets();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      client,\n      profileToUnlink\n    }) => {\n      const ecosystemWallet = wallets.find(w => isEcosystemWallet(w));\n      const ecosystem = ecosystemWallet ? {\n        id: ecosystemWallet.id,\n        partnerId: ecosystemWallet.getConfig()?.partnerId\n      } : undefined;\n      await unlinkProfile({\n        client,\n        ecosystem,\n        profileToUnlink\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"profiles\"]\n      });\n    }\n  });\n}\n//# sourceMappingURL=useUnlinkProfile.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}