{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { trackPayEvent } from \"../../../../analytics/track/pay.js\";\nimport { CustomThemeProvider } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../core/hooks/wallets/useActiveWallet.js\";\nimport { LoadingScreen } from \"../../wallets/shared/LoadingScreen.js\";\nimport { useConnectLocale } from \"../ConnectWallet/locale/getConnectLocale.js\";\nimport { LazyBuyScreen } from \"../ConnectWallet/screens/Buy/LazyBuyScreen.js\";\nimport { Modal } from \"../components/Modal.js\";\nimport { ExecutingTxScreen } from \"./ExecutingScreen.js\";\nexport function TransactionModal(props) {\n  const account = useActiveAccount();\n  const wallet = useActiveWallet();\n  useQuery({\n    queryKey: [\"transaction-modal-event\"],\n    queryFn: () => {\n      if (!account || !wallet) return;\n      trackPayEvent({\n        client: props.client,\n        walletAddress: account.address,\n        walletType: wallet.id,\n        dstChainId: props.tx.chain.id,\n        event: \"open_pay_transaction_modal\"\n      });\n    },\n    enabled: !!wallet\n  });\n  return _jsx(CustomThemeProvider, {\n    theme: props.theme,\n    children: _jsx(Modal, {\n      open: true,\n      size: \"compact\",\n      setOpen: _open => {\n        if (!_open) {\n          props.onClose();\n        }\n      },\n      children: _jsx(TransactionModalContent, {\n        ...props\n      })\n    })\n  });\n}\nfunction TransactionModalContent(props) {\n  const localeQuery = useConnectLocale(props.localeId);\n  const [screen, setScreen] = useState(\"buy\");\n  if (!localeQuery.data) {\n    return _jsx(LoadingScreen, {});\n  }\n  if (screen === \"execute-tx\") {\n    return _jsx(ExecutingTxScreen, {\n      tx: props.tx,\n      closeModal: props.onClose,\n      onTxSent: props.onTxSent\n    });\n  }\n  return _jsx(LazyBuyScreen, {\n    title: props.title,\n    isEmbed: false,\n    client: props.client,\n    onBack: props.onBack,\n    supportedTokens: props.supportedTokens,\n    connectLocale: localeQuery.data,\n    theme: typeof props.theme === \"string\" ? props.theme : props.theme.type,\n    payOptions: props.payOptions,\n    onDone: () => {\n      setScreen(\"execute-tx\");\n    },\n    connectOptions: undefined\n  });\n}\n//# sourceMappingURL=TransactionModal.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}