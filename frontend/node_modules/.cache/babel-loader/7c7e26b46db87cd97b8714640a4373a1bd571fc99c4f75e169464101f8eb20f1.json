{"ast":null,"code":"import { ethereum } from \"../../chains/chain-definitions/ethereum.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { toHex } from \"../../utils/encoding/hex.js\";\nimport { namehash } from \"../../utils/ens/namehash.js\";\nimport { packetToBytes } from \"../../utils/ens/packetToBytes.js\";\nimport { withCache } from \"../../utils/promise/withCache.js\";\nimport { decodeTextResult, encodeText } from \"./__generated__/AddressResolver/read/text.js\";\nimport { resolve } from \"./__generated__/UniversalResolver/read/resolve.js\";\nimport { UNIVERSAL_RESOLVER_ADDRESS } from \"./constants.js\";\n/**\n * Resolves an ENS name and key to the specified record.\n * @param options - The options for resolving an ENS address.\n * @example\n * ```ts\n * import { resolveText } from \"thirdweb/extensions/ens\";\n * const twitterUsername = await resolveText({\n *    client,\n *    name: \"vitalik.eth\",\n *    key: \"com.twitter\"\n * });\n * ```\n * @extension ENS\n * @returns A promise that resolves to the text record.\n */\nexport async function resolveText(options) {\n  const {\n    client,\n    name,\n    key,\n    resolverAddress,\n    resolverChain\n  } = options;\n  return withCache(async () => {\n    const contract = getContract({\n      client,\n      chain: resolverChain || ethereum,\n      address: resolverAddress || UNIVERSAL_RESOLVER_ADDRESS\n    });\n    const data = encodeText({\n      name: namehash(name),\n      key\n    });\n    const result = await resolve({\n      contract,\n      name: toHex(packetToBytes(name)),\n      data\n    });\n    if (result[0] === \"0x\") {\n      return null;\n    }\n    const record = decodeTextResult(result[0]);\n    return record === \"\" ? null : record;\n  }, {\n    cacheKey: `ens:text:${name}:${key}`,\n    // 1min cache\n    cacheTime: 60 * 1000\n  });\n}\n//# sourceMappingURL=resolve-text.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}