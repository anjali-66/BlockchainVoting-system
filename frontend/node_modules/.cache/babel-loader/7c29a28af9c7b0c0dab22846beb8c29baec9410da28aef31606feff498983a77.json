{"ast":null,"code":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { linkProfile } from \"../../../../wallets/in-app/web/lib/auth/index.js\";\nimport { useConnectedWallets } from \"../../../core/hooks/wallets/useConnectedWallets.js\";\n/**\n * Links a web2 or web3 profile to the connected in-app or ecosystem account.\n * **When a profile is linked to the account, that profile can then be used to sign into the same account.**\n *\n * @example\n *\n * ### Linking a social profile\n *\n * ```jsx\n * import { useLinkProfile } from \"thirdweb/react\";\n *\n * const { mutate: linkProfile } = useLinkProfile();\n *\n * const onClick = () => {\n *   linkProfile({\n *     client,\n *     strategy: \"discord\", // or \"google\", \"x\", \"telegram\", etc\n *   });\n * };\n * ```\n *\n * ### Linking an email\n *\n * ```jsx\n * import { useLinkProfile } from \"thirdweb/react\";\n * import { preAuthenticate } from \"thirdweb/wallets\";\n *\n * const { mutate: linkProfile } = useLinkProfile();\n *\n * // send a verification email first\n * const sendEmail = async () => {\n *   const email = await preAuthenticate({\n *     client,\n *     strategy: \"email\",\n *     email: \"john.doe@example.com\",\n *   });\n * };\n *\n * // then link the profile with the verification code\n * const onClick = (code: string) => {\n *   linkProfile({\n *     client,\n *     strategy: \"email\",\n *     email: \"john.doe@example.com\",\n *     verificationCode: code,\n *   });\n * };\n * ```\n *\n * The same process can be used for phone and email, simply swap out the `strategy` parameter.\n *\n * ### Linking a wallet\n *\n * ```jsx\n * import { useLinkProfile } from \"thirdweb/react\";\n *\n * const { mutate: linkProfile } = useLinkProfile();\n *\n * const onClick = () => {\n *   linkProfile({\n *     client,\n *     strategy: \"wallet\",\n *     wallet: createWallet(\"io.metamask\"), // autocompletion for 400+ wallet ids\n *     chain: sepolia, // any chain works, needed for SIWE signature\n *   });\n * };\n * ```\n *\n * @wallet\n */\nexport function useLinkProfile() {\n  const wallets = useConnectedWallets();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationKey: [\"profiles\"],\n    mutationFn: async options => {\n      const ecosystemWallet = wallets.find(w => isEcosystemWallet(w));\n      const ecosystem = ecosystemWallet ? {\n        id: ecosystemWallet.id,\n        partnerId: ecosystemWallet.getConfig()?.partnerId\n      } : undefined;\n      const optionsWithEcosystem = {\n        ...options,\n        ecosystem\n      };\n      return linkProfile(optionsWithEcosystem);\n    },\n    onSuccess() {\n      setTimeout(() => {\n        queryClient.invalidateQueries({\n          queryKey: [\"profiles\"]\n        });\n      }, 500);\n    }\n  });\n}\n//# sourceMappingURL=useLinkProfile.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}