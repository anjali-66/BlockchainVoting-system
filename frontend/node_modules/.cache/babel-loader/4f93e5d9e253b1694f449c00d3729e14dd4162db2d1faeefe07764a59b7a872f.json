{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport styled from \"@emotion/styled\";\nimport { useState } from \"react\";\nimport { shortenAddress } from \"../../../../../../utils/address.js\";\nimport { useCustomTheme } from \"../../../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, radius, spacing } from \"../../../../../core/design-system/index.js\";\nimport { useChainName } from \"../../../../../core/hooks/others/useChainQuery.js\";\nimport { useEnsAvatar, useEnsName } from \"../../../../../core/utils/wallet.js\";\nimport { Img } from \"../../../components/Img.js\";\nimport { TokenIcon } from \"../../../components/TokenIcon.js\";\nimport { WalletImage } from \"../../../components/WalletImage.js\";\nimport { Container } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { Blobbie } from \"../../Blobbie.js\";\nimport { formatTokenBalance } from \"../formatTokenBalance.js\";\nexport function WalletRowWithBalances(props) {\n  const theme = useCustomTheme();\n  const [showAll, setShowAll] = useState(false);\n  const maxDisplayedBalances = 3;\n  const displayedBalances = showAll ? props.balances : props.balances.slice(0, maxDisplayedBalances);\n  return _jsxs(Container, {\n    bg: \"tertiaryBg\",\n    style: {\n      borderRadius: radius.lg,\n      border: `1px solid ${theme.colors.borderColor}`\n    },\n    children: [_jsx(Container, {\n      style: {\n        padding: spacing.sm\n      },\n      children: _jsx(WalletRow, {\n        ...props\n      })\n    }), _jsx(\"div\", {\n      style: {\n        borderTop: `1px solid ${theme.colors.borderColor}`\n      }\n    }), _jsx(Container, {\n      flex: \"column\",\n      children: props.balances.length > 0 ? _jsxs(_Fragment, {\n        children: [displayedBalances.map(b => _jsx(TokenBalanceRow, {\n          client: props.client,\n          onClick: () => props.onClick(props.wallet, b.token, b.chain),\n          tokenBalance: b,\n          wallet: props.wallet\n        }, `${b.token.address}-${b.chain.id}`)), props.balances.length > maxDisplayedBalances && _jsx(StyledButton, {\n          variant: \"secondary\",\n          onClick: () => setShowAll(!showAll),\n          style: {\n            justifyContent: \"start\"\n          },\n          children: _jsx(Text, {\n            size: \"xs\",\n            children: showAll ? \"Show less\" : \"Show more\"\n          })\n        })]\n      }) : _jsx(Container, {\n        style: {\n          padding: spacing.sm\n        },\n        children: _jsx(Text, {\n          size: \"sm\",\n          color: \"secondaryText\",\n          children: \"Not enough funds\"\n        })\n      })\n    })]\n  });\n}\nfunction TokenBalanceRow(props) {\n  const {\n    tokenBalance,\n    wallet,\n    onClick,\n    client\n  } = props;\n  const chainInfo = useChainName(tokenBalance.chain);\n  return _jsxs(StyledButton, {\n    onClick: () => onClick(tokenBalance.token, wallet),\n    variant: \"secondary\",\n    children: [_jsx(TokenIcon, {\n      token: tokenBalance.token,\n      chain: tokenBalance.chain,\n      size: \"md\",\n      client: client\n    }), _jsxs(Container, {\n      flex: \"column\",\n      gap: \"3xs\",\n      children: [_jsx(Text, {\n        size: \"xs\",\n        color: \"primaryText\",\n        children: tokenBalance.token.symbol\n      }), chainInfo && _jsx(Text, {\n        size: \"xs\",\n        children: chainInfo.name\n      })]\n    }), _jsx(\"div\", {\n      style: {\n        flex: 1\n      }\n    }), _jsx(Container, {\n      flex: \"row\",\n      center: \"y\",\n      gap: \"3xs\",\n      children: _jsx(Text, {\n        size: \"xs\",\n        color: \"secondaryText\",\n        children: formatTokenBalance(tokenBalance.balance, true)\n      })\n    })]\n  });\n}\nexport function WalletRow(props) {\n  const {\n    client,\n    address\n  } = props;\n  const walletId = props.walletId;\n  const theme = useCustomTheme();\n  const ensNameQuery = useEnsName({\n    client,\n    address\n  });\n  const addressOrENS = ensNameQuery.data || shortenAddress(address);\n  const ensAvatarQuery = useEnsAvatar({\n    client,\n    ensName: ensNameQuery.data\n  });\n  return _jsxs(Container, {\n    flex: \"row\",\n    center: \"y\",\n    gap: \"sm\",\n    color: \"secondaryText\",\n    children: [ensAvatarQuery.data ? _jsx(Img, {\n      src: ensAvatarQuery.data,\n      width: props.iconSize ? iconSize[props.iconSize] : iconSize.md,\n      height: props.iconSize ? iconSize[props.iconSize] : iconSize.md,\n      style: {\n        borderRadius: \"100%\",\n        overflow: \"hidden\",\n        border: `1px solid ${theme.colors.borderColor}`\n      },\n      client: props.client\n    }) : walletId ? _jsx(WalletImage, {\n      id: walletId,\n      size: props.iconSize || iconSize.md,\n      client: props.client\n    }) : _jsx(Container, {\n      style: {\n        width: iconSize.md,\n        height: iconSize.md,\n        borderRadius: \"100%\",\n        overflow: \"hidden\",\n        border: `1px solid ${theme.colors.borderColor}`\n      },\n      children: _jsx(Blobbie, {\n        address: props.address,\n        size: Number(iconSize.md)\n      })\n    }), _jsx(Text, {\n      size: props.textSize || \"sm\",\n      color: \"primaryText\",\n      children: addressOrENS || shortenAddress(props.address)\n    })]\n  });\n}\nconst StyledButton = /* @__PURE__ */styled(Button)(_ => {\n  const theme = useCustomTheme();\n  return {\n    background: theme.colors.tertiaryBg,\n    justifyContent: \"flex-start\",\n    flexDirection: \"row\",\n    padding: spacing.sm,\n    gap: spacing.sm,\n    \"&:hover\": {\n      background: theme.colors.secondaryButtonBg,\n      transform: \"scale(1.01)\"\n    },\n    transition: \"background 200ms ease, transform 150ms ease\"\n  };\n});\n//# sourceMappingURL=WalletSelectorButton.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}