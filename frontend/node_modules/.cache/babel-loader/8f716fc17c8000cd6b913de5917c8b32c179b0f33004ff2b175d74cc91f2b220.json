{"ast":null,"code":"import { useMutation } from \"@tanstack/react-query\";\nimport { getContract } from \"../../../../contract/contract.js\";\nimport { resolveAddress } from \"../../../../extensions/ens/resolve-address.js\";\nimport { transfer } from \"../../../../extensions/erc20/write/transfer.js\";\nimport { sendTransaction } from \"../../../../transaction/actions/send-transaction.js\";\nimport { prepareTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { isAddress } from \"../../../../utils/address.js\";\nimport { toWei } from \"../../../../utils/units.js\";\nimport { useActiveWallet } from \"./useActiveWallet.js\";\n/**\n * Send Native or ERC20 tokens from active wallet to given address.\n * @example\n * ```tsx\n * const { mutate: sendToken } = useSendToken(client);\n *\n * // send native currency\n * sendToken({\n *    receiverAddress: \"0x...\",\n *    amount: \"0.1\",\n * });\n *\n * // send ERC20\n * sendToken({\n *   tokenAddress,\n *   receiverAddress: \"0x...\",\n *   amount: \"0.5\",\n * });\n * ```\n * @wallet\n */\nexport function useSendToken(client) {\n  const wallet = useActiveWallet();\n  return useMutation({\n    async mutationFn(option) {\n      const {\n        tokenAddress,\n        receiverAddress,\n        amount\n      } = option;\n      const activeChain = wallet?.getChain();\n      const account = wallet?.getAccount();\n      // state validation\n      if (!activeChain) {\n        throw new Error(\"No active chain\");\n      }\n      if (!account) {\n        throw new Error(\"No active account\");\n      }\n      // input validation\n      if (!receiverAddress || !receiverAddress.endsWith(\".eth\") && !isAddress(receiverAddress)) {\n        throw new Error(\"Invalid receiver address\");\n      }\n      if (!amount || Number.isNaN(Number(amount)) || Number(amount) < 0) {\n        throw new Error(\"Invalid amount\");\n      }\n      let to = receiverAddress;\n      // resolve ENS if needed\n      try {\n        to = await resolveAddress({\n          client,\n          name: receiverAddress\n        });\n      } catch {\n        throw new Error(\"Failed to resolve address\");\n      }\n      // native token transfer\n      if (!tokenAddress) {\n        const sendNativeTokenTx = prepareTransaction({\n          chain: activeChain,\n          client,\n          to,\n          value: toWei(amount)\n        });\n        await sendTransaction({\n          transaction: sendNativeTokenTx,\n          account\n        });\n      }\n      // erc20 token transfer\n      else {\n        const contract = getContract({\n          address: tokenAddress,\n          client,\n          chain: activeChain\n        });\n        const tx = transfer({\n          amount,\n          contract,\n          to\n        });\n        await sendTransaction({\n          transaction: tx,\n          account\n        });\n      }\n    }\n  });\n}\n//# sourceMappingURL=useSendToken.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}