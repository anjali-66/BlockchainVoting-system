{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getWalletInfo } from \"../../../../../wallets/__generated__/getWalletInfo.js\";\nimport { useWalletContext } from \"./provider.js\";\n/**\n * This component tries to resolve the icon of a given wallet, then return an image.\n * @returns an <img /> with the src of the wallet icon\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { WalletProvider, WalletIcon } from \"thirdweb/react\";\n *\n * <WalletProvider id=\"io.metamask\">\n *   <WalletIcon />\n * </WalletProvider>\n * ```\n *\n * Result: An <img /> component with the src of the icon\n * ```html\n * <img src=\"metamask-icon.png\" />\n * ```\n *\n * ### Show a loading sign while the icon is being loaded\n * ```tsx\n * <WalletIcon loadingComponent={<Spinner />} />\n * ```\n *\n * ### Fallback to a dummy image if the wallet icon fails to resolve\n * ```tsx\n * <WalletIcon fallbackComponent={<img src=\"blank-image.png\" />} />\n * ```\n *\n * ### Usage with queryOptions\n * WalletIcon uses useQuery() from tanstack query internally.\n * It allows you to pass a custom queryOptions of your choice for more control of the internal fetching logic\n * ```tsx\n * <WalletIcon queryOptions={{ enabled: someLogic, retry: 3, }} />\n * ```\n *\n * @component\n * @wallet\n * @beta\n */\nexport function WalletIcon({\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  ...restProps\n}) {\n  const imageQuery = useWalletIcon({\n    queryOptions\n  });\n  if (imageQuery.isLoading) {\n    return loadingComponent || null;\n  }\n  if (!imageQuery.data) {\n    return fallbackComponent || null;\n  }\n  return _jsx(\"img\", {\n    src: imageQuery.data,\n    ...restProps,\n    alt: restProps.alt\n  });\n}\n/**\n * @internal\n */\nfunction useWalletIcon(props) {\n  const {\n    id\n  } = useWalletContext();\n  const imageQuery = useQuery({\n    queryKey: [\"walletIcon\", id],\n    queryFn: async () => fetchWalletImage({\n      id\n    }),\n    ...props.queryOptions\n  });\n  return imageQuery;\n}\n/**\n * @internal Exported for tests only\n */\nexport async function fetchWalletImage(props) {\n  const image_src = await getWalletInfo(props.id, true);\n  return image_src;\n}\n//# sourceMappingURL=icon.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}