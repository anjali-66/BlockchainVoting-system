{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useActiveWalletChain } from \"../../../../../core/hooks/wallets/useActiveWalletChain.js\";\nexport function usePayerSetup() {\n  const wallet = useActiveWallet();\n  const account = useActiveAccount();\n  const activeChain = useActiveWalletChain();\n  const [_payer, setPayer] = useState();\n  useEffect(() => {\n    const wallet = _payer?.wallet;\n    function update() {\n      if (!wallet) {\n        setPayer(undefined);\n        return;\n      }\n      const account = wallet.getAccount();\n      const chain = wallet.getChain();\n      if (account && chain) {\n        setPayer({\n          account,\n          chain,\n          wallet\n        });\n      } else {\n        setPayer(undefined);\n      }\n    }\n    if (wallet) {\n      const unsubChainChanged = wallet.subscribe(\"chainChanged\", update);\n      const unsubAccountChanged = wallet.subscribe(\"accountChanged\", update);\n      return () => {\n        unsubChainChanged();\n        unsubAccountChanged();\n      };\n    }\n    return undefined;\n  }, [_payer]);\n  const initialPayer = account && activeChain && wallet ? {\n    account,\n    chain: activeChain,\n    wallet\n  } : undefined;\n  // return the payer state if its set\n  // otherwise return the active wallet as payer\n  const payer = _payer || initialPayer;\n  return {\n    payer,\n    setPayer\n  };\n}\n//# sourceMappingURL=usePayerSetup.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}