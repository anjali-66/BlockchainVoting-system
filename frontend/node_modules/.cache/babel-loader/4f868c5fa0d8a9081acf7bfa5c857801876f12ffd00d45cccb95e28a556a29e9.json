{"ast":null,"code":"import { decodeAbiParameters, formatTransactionRequest } from \"viem\";\nimport { eth_call } from \"../../rpc/actions/eth_call.js\";\nimport { getRpcClient } from \"../../rpc/rpc.js\";\nimport { resolvePromisedValue } from \"../../utils/promise/resolve-promised-value.js\";\nimport { extractError } from \"../extract-error.js\";\nimport { encode } from \"./encode.js\";\n/**\n * Simulates the execution of a transaction.\n * @param options - The options for simulating the transaction.\n * @returns A promise that resolves to the result of the simulation.\n * @transaction\n * @example\n * ```ts\n * import { simulateTransaction } from \"thirdweb\";\n * const result = await simulateTransaction({\n *  transaction,\n * });\n * ```\n */\nexport async function simulateTransaction(options) {\n  const [data, to, accessList, value] = await Promise.all([encode(options.transaction), resolvePromisedValue(options.transaction.to), resolvePromisedValue(options.transaction.accessList), resolvePromisedValue(options.transaction.value)]);\n  // from is:\n  // 1. the user specified from address\n  // 2. the passed in account address\n  // 3. the passed in wallet's account address\n  const from = options.from ?? options.account?.address ?? undefined;\n  const serializedTx = formatTransactionRequest({\n    data,\n    from,\n    to,\n    value,\n    accessList\n  });\n  const rpcRequest = getRpcClient(options.transaction);\n  try {\n    const result = await eth_call(rpcRequest, serializedTx);\n    if (!options.transaction.__preparedMethod) {\n      return result;\n    }\n    const prepared = await options.transaction.__preparedMethod();\n    const decoded = decodeAbiParameters(prepared[2], result);\n    if (Array.isArray(decoded) && decoded.length === 1) {\n      return decoded[0];\n    }\n    return decoded;\n  } catch (error) {\n    throw await extractError({\n      error,\n      contract: options.transaction.__contract\n    });\n  }\n}\n//# sourceMappingURL=simulate.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}