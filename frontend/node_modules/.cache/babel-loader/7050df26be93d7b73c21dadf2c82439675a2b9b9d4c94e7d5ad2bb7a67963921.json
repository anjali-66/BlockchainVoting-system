{"ast":null,"code":"import { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithFiatHistoryEndpoint } from \"../utils/definitions.js\";\n/**\n * Get the \"Buy with fiat\" transaction history for a given wallet address\n * @param params Object of type [`BuyWithFiatHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryParams)\n * @example\n *\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { getBuyWithFiatHistory } from \"thirdweb/pay\";\n *\n * const client = createThirdwebClient({ clientId: \"...\" });\n *\n * // get the 10 latest \"Buy with fiat\" transactions dony by the wallet\n * const history = await getBuyWithFiatHistory({\n *  client: client,\n *  walletAddress: '0x...',\n *  start: 0,\n *  count: 10,\n * })\n * ```\n * @returns Object of type [`BuyWithFiatHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryData)\n * @buyCrypto\n */\nexport async function getBuyWithFiatHistory(params) {\n  try {\n    const queryParams = new URLSearchParams();\n    queryParams.append(\"walletAddress\", params.walletAddress);\n    queryParams.append(\"start\", params.start.toString());\n    queryParams.append(\"count\", params.count.toString());\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyWithFiatHistoryEndpoint()}?${queryString}`;\n    const response = await getClientFetch(params.client)(url);\n    // Assuming the response directly matches the BuyWithFiatStatus response interface\n    if (!response.ok) {\n      response.body?.cancel();\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = (await response.json()).result;\n    return data;\n  } catch (error) {\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n//# sourceMappingURL=getHistory.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}