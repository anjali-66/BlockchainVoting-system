{"ast":null,"code":"// TODO(v3): Convert to sync.\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { serializeSignature } from '../../utils/signature/serializeSignature.js';\nlet extraEntropy = false;\n/**\n * Sets extra entropy for signing functions.\n */\nexport function setSignEntropy(entropy) {\n  if (!entropy) throw new Error('must be a `true` or a hex value.');\n  extraEntropy = entropy;\n}\n/**\n * @description Signs a hash with a given private key.\n *\n * @param hash The hash to sign.\n * @param privateKey The private key to sign with.\n *\n * @returns The signature.\n */\nexport async function sign({\n  hash,\n  privateKey,\n  to = 'object'\n}) {\n  const {\n    r,\n    s,\n    recovery\n  } = secp256k1.sign(hash.slice(2), privateKey.slice(2), {\n    lowS: true,\n    extraEntropy\n  });\n  const signature = {\n    r: numberToHex(r, {\n      size: 32\n    }),\n    s: numberToHex(s, {\n      size: 32\n    }),\n    v: recovery ? 28n : 27n,\n    yParity: recovery\n  };\n  return (() => {\n    if (to === 'bytes' || to === 'hex') return serializeSignature({\n      ...signature,\n      to\n    });\n    return signature;\n  })();\n}\n//# sourceMappingURL=sign.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}