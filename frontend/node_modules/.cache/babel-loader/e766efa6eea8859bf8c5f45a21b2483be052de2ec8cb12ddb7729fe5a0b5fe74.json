{"ast":null,"code":"import { ethereum } from \"../../../../chains/chain-definitions/ethereum.js\";\nimport { socialAuthOptions } from \"../../../../wallets/types.js\";\n/**\n * Checks if the provided wallet is an in-app wallet.\n *\n * @param wallet - The wallet to check.\n * @returns True if the wallet is an in-app wallet, false otherwise.\n */\nexport function isInAppWallet(wallet) {\n  return wallet.id === \"inApp\" || wallet.id === \"embedded\";\n}\n/**\n * @internal\n */\nexport async function connectInAppWallet(options, createOptions, connector) {\n  if (\n  // if auth mode is not specified, the default is popup\n  createOptions?.auth?.mode !== \"popup\" && createOptions?.auth?.mode !== undefined && connector.authenticateWithRedirect) {\n    const strategy = options.strategy;\n    if (socialAuthOptions.includes(strategy)) {\n      connector.authenticateWithRedirect(strategy, createOptions?.auth?.mode, createOptions?.auth?.redirectUrl);\n    }\n  }\n  // If we don't have authenticateWithRedirect then it's likely react native, so the default is to redirect and we can carry on\n  // IF WE EVER ADD MORE CONNECTOR TYPES, this could cause redirect to be ignored despite being specified\n  // TODO: In V6, make everything redirect auth\n  const authResult = await connector.connect(options);\n  const authAccount = authResult.user.account;\n  if (createOptions && \"smartAccount\" in createOptions && createOptions?.smartAccount) {\n    return convertToSmartAccount({\n      client: options.client,\n      authAccount,\n      smartAccountOptions: createOptions.smartAccount,\n      chain: options.chain\n    });\n  }\n  return [authAccount, options.chain || ethereum];\n}\n/**\n * @internal\n */\nexport async function autoConnectInAppWallet(options, createOptions, connector) {\n  if (options.authResult && connector.loginWithAuthToken) {\n    await connector.loginWithAuthToken(options.authResult);\n  }\n  const user = await getAuthenticatedUser(connector);\n  if (!user) {\n    throw new Error(\"Failed to authenticate user.\");\n  }\n  const authAccount = user.account;\n  if (createOptions && \"smartAccount\" in createOptions && createOptions?.smartAccount) {\n    return convertToSmartAccount({\n      client: options.client,\n      authAccount,\n      smartAccountOptions: createOptions.smartAccount,\n      chain: options.chain\n    });\n  }\n  return [authAccount, options.chain || ethereum];\n}\nasync function convertToSmartAccount(options) {\n  const [{\n    smartWallet\n  }, {\n    connectSmartWallet\n  }] = await Promise.all([import(\"../../../smart/smart-wallet.js\"), import(\"../../../smart/index.js\")]);\n  const sa = smartWallet(options.smartAccountOptions);\n  return connectSmartWallet(sa, {\n    client: options.client,\n    personalAccount: options.authAccount,\n    chain: options.chain\n  }, options.smartAccountOptions);\n}\nasync function getAuthenticatedUser(connector) {\n  const user = await connector.getUser();\n  switch (user.status) {\n    case \"Logged In, Wallet Initialized\":\n      {\n        return user;\n      }\n  }\n  return undefined;\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}