{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getChainMetadata } from \"../../../../../chains/utils.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../contract/contract.js\";\nimport { getContractMetadata } from \"../../../../../extensions/common/read/getContractMetadata.js\";\nimport { name } from \"../../../../../extensions/common/read/name.js\";\nimport { getFunctionId } from \"../../../../../utils/function-id.js\";\nimport { useTokenContext } from \"./provider.js\";\n/**\n * This component fetches then shows the name of a token. For ERC20 tokens, it calls the `name` function in the ERC20 contract.\n * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>\n *\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { TokenProvider, TokenName } from \"thirdweb/react\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <TokenProvider {...props}>\n *   <TokenName  />\n * </TokenProvider>\n * ```\n * Result:\n * ```html\n * <span>Ether</span>\n * ```\n *\n * ### Custom name resolver\n * By default TokenName will call the `name` method of the token contract.\n * However if you have a different way to fetch the name, you can pass the function to the `nameResolver` prop.\n * Note: nameResolver should either be a string or a function (async) that returns a string.\n * ```tsx\n * async function fetchNameMethod() {\n *   // your own fetching logic\n *   return \"the token name\";\n * }\n *\n * <TokenName nameResolver={fetchNameMethod} />\n * ```\n *\n * Alternatively you can also pass in a string directly:\n * ```tsx\n * <TokenName nameResolver=\"USD Coin Circle\" />\n * ```\n *\n *\n * ### Format the name (capitalize, truncate, etc.)\n * The TokenName component accepts a `formatFn` which takes in a string and outputs a string\n * The function is used to modify the name of the token\n *\n * ```tsx\n * const concatStr = (str: string):string => str + \"Token\"\n *\n * <TokenName formatFn={concatStr} />\n * ```\n *\n * Result:\n * ```html\n * <span>Ether Token</span>\n * ```\n *\n * ### Show a loading sign when the name is being fetched\n * ```tsx\n * import { TokenProvider, TokenName } from \"thirdweb/react\";\n *\n * <TokenProvider address=\"0x...\">\n *   <TokenName loadingComponent={<Spinner />} />\n * </TokenProvider>\n * ```\n *\n * ### Fallback to something when the name fails to resolve\n * ```tsx\n * <TokenProvider address=\"0x...\">\n *   <TokenName fallbackComponent={\"Failed to load\"} />\n * </TokenProvider>\n * ```\n *\n * ### Custom query options for useQuery\n * This component uses `@tanstack-query`'s useQuery internally.\n * You can use the `queryOptions` prop for more fine-grained control\n * ```tsx\n * <TokenName\n *   queryOptions={{\n *     enabled: isEnabled,\n *     retry: 4,\n *   }}\n * />\n * ```\n *\n * @component\n * @token\n * @beta\n */\nexport function TokenName({\n  nameResolver,\n  formatFn,\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  ...restProps\n}) {\n  const {\n    address,\n    client,\n    chain\n  } = useTokenContext();\n  const nameQuery = useQuery({\n    queryKey: getQueryKeys({\n      chainId: chain.id,\n      nameResolver,\n      address\n    }),\n    queryFn: async () => fetchTokenName({\n      address,\n      chain,\n      client,\n      nameResolver\n    }),\n    ...queryOptions\n  });\n  if (nameQuery.isLoading) {\n    return loadingComponent || null;\n  }\n  if (!nameQuery.data) {\n    return fallbackComponent || null;\n  }\n  if (formatFn && typeof formatFn === \"function\") {\n    return _jsx(\"span\", {\n      ...restProps,\n      children: formatFn(nameQuery.data)\n    });\n  }\n  return _jsx(\"span\", {\n    ...restProps,\n    children: nameQuery.data\n  });\n}\n/**\n * @internal Exported for tests only\n */\nexport async function fetchTokenName(props) {\n  const {\n    nameResolver,\n    address,\n    client,\n    chain\n  } = props;\n  if (typeof nameResolver === \"string\") {\n    return nameResolver;\n  }\n  if (typeof nameResolver === \"function\") {\n    return nameResolver();\n  }\n  if (address.toLowerCase() === NATIVE_TOKEN_ADDRESS.toLowerCase()) {\n    // Don't wanna use `getChainName` because it has some side effect (it catches error and defaults to \"ETH\")\n    return getChainMetadata(chain).then(data => data.nativeCurrency.name);\n  }\n  // Try to fetch the name from both the `name` function and the contract metadata\n  // then prioritize its result\n  const contract = getContract({\n    address,\n    client,\n    chain\n  });\n  const [_name, contractMetadata] = await Promise.all([name({\n    contract\n  }).catch(() => undefined), getContractMetadata({\n    contract\n  }).catch(() => undefined)]);\n  if (typeof _name === \"string\") {\n    return _name;\n  }\n  if (typeof contractMetadata?.name === \"string\") {\n    return contractMetadata.name;\n  }\n  throw new Error(\"Failed to resolve name from both name() and contract metadata\");\n}\n/**\n * @internal\n */\nexport function getQueryKeys(props) {\n  const {\n    chainId,\n    address,\n    nameResolver\n  } = props;\n  return [\"_internal_token_name_\", chainId, address, {\n    resolver: typeof nameResolver === \"string\" ? nameResolver : typeof nameResolver === \"function\" ? getFunctionId(nameResolver) : undefined\n  }];\n}\n//# sourceMappingURL=name.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}