{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useContext, useMemo, useState } from \"react\";\nimport { SetRootElementContext } from \"../../../core/providers/RootElementContext.js\";\nimport { WalletUIStatesProvider } from \"../../providers/wallet-ui-states-provider.js\";\nimport { canFitWideModal } from \"../../utils/canFitWideModal.js\";\nimport { getDefaultWallets } from \"../../wallets/defaultWallets.js\";\nimport ConnectModal from \"./Modal/ConnectModal.js\";\nimport { getConnectLocale } from \"./locale/getConnectLocale.js\";\n/**\n * hook that allows you to open the Connect UI in a Modal to prompt the user to connect wallet.\n * @example\n * ```tsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { useConnectModal } from \"thirdweb/react\";\n *\n * const client = createThirdwebClient({\n *  clientId: \"<your_client_id>\",\n * });\n *\n * function Example() {\n *   const { connect, isConnecting } = useConnectModal();\n *\n *   async function handleConnect() {\n *      const wallet = await connect({ client }); // opens the connect modal\n *      console.log('connected to', wallet);\n *   }\n *\n *   return <button onClick={handleConnect}> Connect </button>\n * }\n * ```\n *\n * The returned `connect` method takes an object of type [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps)\n * as an argument to customize the Connect Modal UI. Refer to [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps) to see the available options.\n *\n * @walletConnection\n */\nexport function useConnectModal() {\n  const setRootEl = useContext(SetRootElementContext);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const connect = useCallback(props => {\n    function cleanup() {\n      setIsConnecting(false);\n      setRootEl(undefined);\n    }\n    return new Promise((resolve, reject) => {\n      setIsConnecting(true);\n      getConnectLocale(props.locale || \"en_US\").then(locale => {\n        setRootEl(_jsx(Modal, {\n          ...props,\n          onConnect: w => {\n            resolve(w);\n            cleanup();\n          },\n          onClose: () => {\n            reject();\n            cleanup();\n          },\n          connectLocale: locale\n        }));\n      }).catch(() => {\n        reject();\n        cleanup();\n      });\n    });\n  }, [setRootEl]);\n  return {\n    connect,\n    isConnecting\n  };\n}\nfunction Modal(props) {\n  const wallets = useMemo(() => props.wallets || getDefaultWallets({\n    appMetadata: props.appMetadata,\n    chains: props.chains\n  }), [props.wallets, props.appMetadata, props.chains]);\n  const size = useMemo(() => {\n    return !canFitWideModal() || wallets.length === 1 ? \"compact\" : props.size || \"wide\";\n  }, [props.size, wallets.length]);\n  const meta = useMemo(() => {\n    return {\n      privacyPolicyUrl: props.privacyPolicyUrl,\n      showThirdwebBranding: props.showThirdwebBranding,\n      termsOfServiceUrl: props.termsOfServiceUrl,\n      title: props.title,\n      titleIconUrl: props.titleIcon\n    };\n  }, [props.privacyPolicyUrl, props.showThirdwebBranding, props.termsOfServiceUrl, props.title, props.titleIcon]);\n  return _jsx(WalletUIStatesProvider, {\n    theme: props.theme,\n    isOpen: true,\n    children: _jsx(ConnectModal, {\n      onClose: props.onClose,\n      shouldSetActive: props.setActive === undefined ? true : props.setActive,\n      accountAbstraction: props.accountAbstraction,\n      // TODO: not set up in `useConnectModal` for some reason?\n      auth: undefined,\n      chain: props.chain,\n      client: props.client,\n      connectLocale: props.connectLocale,\n      meta: meta,\n      size: size,\n      welcomeScreen: props.welcomeScreen,\n      localeId: props.locale || \"en_US\",\n      onConnect: props.onConnect,\n      recommendedWallets: props.recommendedWallets,\n      showAllWallets: props.showAllWallets,\n      wallets: wallets,\n      chains: props.chains,\n      walletConnect: props.walletConnect\n    })\n  });\n}\n//# sourceMappingURL=useConnectModal.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}