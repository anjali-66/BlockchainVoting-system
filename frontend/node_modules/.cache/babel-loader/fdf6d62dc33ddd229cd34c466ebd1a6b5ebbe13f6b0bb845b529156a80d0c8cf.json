{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../constants/addresses.js\";\nimport { convertCryptoToFiat } from \"../../../../../exports/pay.js\";\nimport { useActiveWalletChain } from \"../../../../../react/core/hooks/wallets/useActiveWalletChain.js\";\nimport { isAddress } from \"../../../../../utils/address.js\";\nimport { formatNumber } from \"../../../../../utils/formatNumber.js\";\nimport { shortenLargeNumber } from \"../../../../../utils/shortenLargeNumber.js\";\nimport { getWalletBalance } from \"../../../../../wallets/utils/getWalletBalance.js\";\nimport { useAccountContext } from \"./provider.js\";\n/**\n * This component fetches and shows the balance of the wallet address on a given chain.\n * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>\n *\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { AccountProvider, AccountBalance } from \"thirdweb/react\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <AccountProvider address=\"0x...\">\n *   <AccountBalance chain={ethereum} />\n * </AccountProvider>\n * ```\n * Result:\n * ```html\n * <span>1.091435 ETH</span>\n * ```\n *\n *\n * ### Format the balance (round up, shorten etc.)\n * The AccountBalance component accepts a `formatFn` which takes in an object of type `AccountBalanceInfo` and outputs a string\n * The function is used to modify the display value of the wallet balance (either in crypto or fiat)\n *\n * ```tsx\n * import type { AccountBalanceInfo } from \"thirdweb/react\";\n * import { formatNumber } from \"thirdweb/utils\";\n *\n * const format = (props: AccountInfoBalance):string => `${formatNumber(props.balance, 1)} ${props.symbol.toLowerCase()}`\n *\n * <AccountBalance formatFn={format} />\n * ```\n *\n * Result:\n * ```html\n * <span>1.1 eth</span> // the balance is rounded up to 1 decimal and the symbol is lowercased\n * ```\n *\n * ### Show a loading sign when the balance is being fetched\n * ```tsx\n * import { AccountProvider, AccountBalance } from \"thirdweb/react\";\n *\n * <AccountProvider address=\"0x...\">\n *   <AccountBalance\n *     chain={ethereum}\n *     loadingComponent={<Spinner />}\n *   />\n * </AccountProvider>\n * ```\n *\n * ### Fallback to something when the balance fails to resolve\n * ```tsx\n * <AccountProvider address=\"0x...\">\n *   <AccountBalance\n *     chain={nonExistentChain}\n *     fallbackComponent={\"Failed to load\"}\n *   />\n * </AccountProvider>\n * ```\n *\n * ### Custom query options for useQuery\n * This component uses `@tanstack-query`'s useQuery internally.\n * You can use the `queryOptions` prop for more fine-grained control\n * ```tsx\n * <AccountBalance\n *   queryOptions={{\n *     enabled: isEnabled,\n *     retry: 4,\n *   }}\n * />\n * ```\n *\n * @component\n * @wallet\n * @beta\n */\nexport function AccountBalance({\n  chain,\n  tokenAddress,\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  formatFn,\n  showBalanceInFiat,\n  ...restProps\n}) {\n  const {\n    address,\n    client\n  } = useAccountContext();\n  const walletChain = useActiveWalletChain();\n  const chainToLoad = chain || walletChain;\n  const balanceQuery = useQuery({\n    queryKey: [\"internal_account_balance\", chainToLoad?.id || -1, address, {\n      tokenAddress\n    }, showBalanceInFiat],\n    queryFn: async () => loadAccountBalance({\n      chain: chainToLoad,\n      client,\n      address,\n      tokenAddress,\n      showBalanceInFiat\n    }),\n    retry: false,\n    ...queryOptions\n  });\n  if (balanceQuery.isLoading) {\n    return loadingComponent || null;\n  }\n  if (!balanceQuery.data) {\n    return fallbackComponent || null;\n  }\n  // Prioritize using the formatFn from users\n  if (formatFn) {\n    return _jsx(\"span\", {\n      ...restProps,\n      children: formatFn(balanceQuery.data)\n    });\n  }\n  if (showBalanceInFiat) {\n    return _jsx(\"span\", {\n      ...restProps,\n      children: formatAccountFiatBalance({\n        ...balanceQuery.data,\n        decimals: 0\n      })\n    });\n  }\n  return _jsx(\"span\", {\n    ...restProps,\n    children: formatAccountTokenBalance({\n      ...balanceQuery.data,\n      decimals: balanceQuery.data.balance < 1 ? 3 : 2\n    })\n  });\n}\n/**\n * @internal Exported for tests\n */\nexport async function loadAccountBalance(props) {\n  const {\n    chain,\n    client,\n    address,\n    tokenAddress,\n    showBalanceInFiat\n  } = props;\n  if (!chain) {\n    throw new Error(\"chain is required\");\n  }\n  if (tokenAddress && tokenAddress?.toLowerCase() === NATIVE_TOKEN_ADDRESS.toLowerCase()) {\n    throw new Error(`Invalid tokenAddress - cannot be ${NATIVE_TOKEN_ADDRESS}`);\n  }\n  if (!isAddress(address)) {\n    throw new Error(\"Invalid wallet address. Expected an EVM address\");\n  }\n  if (tokenAddress && !isAddress(tokenAddress)) {\n    throw new Error(\"Invalid tokenAddress. Expected an EVM contract address\");\n  }\n  const tokenBalanceData = await getWalletBalance({\n    chain,\n    client,\n    address,\n    tokenAddress\n  }).catch(() => undefined);\n  if (!tokenBalanceData) {\n    throw new Error(`Failed to retrieve ${tokenAddress ? `token: ${tokenAddress}` : \"native token\"} balance for address: ${address} on chainId:${chain.id}`);\n  }\n  if (showBalanceInFiat) {\n    const fiatData = await convertCryptoToFiat({\n      fromAmount: Number(tokenBalanceData.displayValue),\n      fromTokenAddress: tokenAddress || NATIVE_TOKEN_ADDRESS,\n      to: showBalanceInFiat,\n      chain,\n      client\n    }).catch(() => undefined);\n    if (fiatData === undefined) {\n      throw new Error(`Failed to resolve fiat value for ${tokenAddress ? `token: ${tokenAddress}` : \"native token\"} on chainId: ${chain.id}`);\n    }\n    return {\n      balance: fiatData?.result,\n      symbol: new Intl.NumberFormat(\"en\", {\n        style: \"currency\",\n        currency: showBalanceInFiat,\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      }).formatToParts(0).find(p => p.type === \"currency\")?.value || showBalanceInFiat.toUpperCase()\n    };\n  }\n  return {\n    balance: Number(tokenBalanceData.displayValue),\n    symbol: tokenBalanceData.symbol\n  };\n}\n/**\n * Format the display balance for both crypto and fiat, in the Details button and Modal\n * If both crypto balance and fiat balance exist, we have to keep the string very short to avoid UI issues.\n * @internal\n * Used internally for the Details button and the Details Modal\n */\nexport function formatAccountTokenBalance(props) {\n  const formattedTokenBalance = formatNumber(props.balance, props.decimals);\n  return `${formattedTokenBalance} ${props.symbol}`;\n}\n/**\n * Used internally for the Details button and Details Modal\n * @internal\n */\nexport function formatAccountFiatBalance(props) {\n  const num = formatNumber(props.balance, props.decimals);\n  // Need to keep them short to avoid UI overflow issues\n  const formattedFiatBalance = shortenLargeNumber(num);\n  return `${props.symbol}${formattedFiatBalance}`;\n}\n//# sourceMappingURL=balance.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}