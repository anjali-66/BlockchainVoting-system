{"ast":null,"code":"import { getThirdwebBaseUrl } from \"../../../../utils/domains.js\";\nimport { getClientFetch } from \"../../../../utils/fetch.js\";\n/**\n * Gets user based on the provided query parameters.\n *  This function is only available on the server (a secret key is required in the client).\n *\n * @param options - The options for the get user function.\n * @param options.client - The Thirdweb client with a secret key included.\n * @param [options.walletAddress] - The wallet address generated by thirdweb to query by.\n * @param [options.email] - The email to query by.\n * @param [options.phone] - The phone number to query by.\n * @param [options.id] - The user ID to query by.\n * @param [options.externalWalletAddress] - The linked external wallet address to query by.\n *\n * @returns A user object or null if not found.\n *\n * @example\n * import { getUser } from \"thirdweb/wallets\";\n *\n * const user = await getUser({\n *   client,\n *   walletAddress: \"0x123...\",\n * });\n *\n * @wallet\n */\nexport async function getUser({\n  client,\n  walletAddress,\n  email,\n  phone,\n  id,\n  externalWalletAddress,\n  ecosystem\n}) {\n  if (!client.secretKey) {\n    throw new Error(\"A secret key is required to query for users. If you're making this request from the server, please add a secret key to your client.\");\n  }\n  const url = new URL(`${getThirdwebBaseUrl(\"inAppWallet\")}/api/2023-11-30/embedded-wallet/user-details`);\n  if (walletAddress) {\n    url.searchParams.set(\"queryBy\", \"walletAddress\");\n    url.searchParams.set(\"walletAddress\", walletAddress);\n  } else if (email) {\n    url.searchParams.set(\"queryBy\", \"email\");\n    url.searchParams.set(\"email\", email);\n  } else if (phone) {\n    url.searchParams.set(\"queryBy\", \"phone\");\n    url.searchParams.set(\"phone\", phone);\n  } else if (id) {\n    url.searchParams.set(\"queryBy\", \"id\");\n    url.searchParams.set(\"id\", id);\n  } else if (externalWalletAddress) {\n    url.searchParams.set(\"queryBy\", \"externalWalletAddress\");\n    url.searchParams.set(\"externalWalletAddress\", externalWalletAddress);\n  } else {\n    throw new Error(\"Please provide a walletAddress, email, phone, id, or externalWalletAddress to query for users.\");\n  }\n  const clientFetch = getClientFetch(client, ecosystem);\n  const res = await clientFetch(url.toString());\n  if (!res.ok) {\n    throw new Error(\"Failed to get profiles\");\n  }\n  const data = await res.json();\n  return data.map(item => ({\n    userId: item.userId,\n    walletAddress: item.walletAddress,\n    email: item.email,\n    phone: item.phone,\n    createdAt: item.createdAt,\n    profiles: item.linkedAccounts.map(profile => {\n      return {\n        type: profile.type === \"siwe\" ? \"wallet\" : profile.type,\n        details: profile.details\n      };\n    })\n  }))[0] || null;\n}\n//# sourceMappingURL=getUser.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}