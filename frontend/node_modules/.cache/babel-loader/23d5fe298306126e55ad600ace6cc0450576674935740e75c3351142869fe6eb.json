{"ast":null,"code":"import { useQuery } from \"@tanstack/react-query\";\nimport { getBuyWithFiatStatus } from \"../../../../pay/buyWithFiat/getStatus.js\";\n/**\n * A hook to get a status of a \"Buy with Fiat\" transaction to determine if the transaction is completed, failed or pending.\n *\n * This hook is a React Query wrapper of the [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoStatus) function.\n * You can also use that function directly.\n *\n * `useBuyWithFiatStatus` refetches the status using `getBuyWithFiatStatus` every 5 seconds.\n *\n * @param params - object of type [`GetBuyWithFiatStatusParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransaction)\n * @returns A react query object which contains the data of type [`BuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoStatus)\n * @example\n * ```tsx\n * import { useBuyWithFiatStatus } from \"thirdweb/react\";\n * import { client } from \"./client\";\n *\n * function Example() {\n *   const fiatStatus = useBuyWithFiatStatus({\n *     client: client, // thirdweb client\n *     intentId: \"....\", // get the intentId from quote ( quote.intentId )\n *   });\n *\n *   console.log(fiatStatus.data);\n *\n *   return <div>...</div>;\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyWithFiatStatus(params) {\n  return useQuery({\n    queryKey: [\"useBuyWithFiatStatus\", params],\n    queryFn: async () => {\n      if (!params) {\n        throw new Error(\"No params provided\");\n      }\n      return getBuyWithFiatStatus(params);\n    },\n    enabled: !!params,\n    refetchInterval: query => {\n      const data = query.state.data;\n      const status = data?.status;\n      if (status === \"ON_RAMP_TRANSFER_FAILED\" || status === \"PAYMENT_FAILED\" || status === \"CRYPTO_SWAP_COMPLETED\" ||\n      // onRampToken and toToken being the same means there is no additional swap step\n      status === \"ON_RAMP_TRANSFER_COMPLETED\" && data?.quote.toToken.chainId === data?.quote.onRampToken.chainId && data?.quote.toToken.tokenAddress.toLowerCase() === data?.quote.onRampToken.tokenAddress.toLowerCase()) {\n        return false;\n      }\n      return 5000;\n    },\n    refetchIntervalInBackground: true,\n    retry: true\n  });\n}\n//# sourceMappingURL=useBuyWithFiatStatus.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}