{"ast":null,"code":"\"use client\";\n\nimport { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport { useActiveAccount } from \"../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { reservedScreens } from \"../constants.js\";\nexport const ScreenSetupContext = /* @__PURE__ */createContext(undefined);\n/**\n * @internal\n */\nexport function useSetupScreen(props) {\n  let initialScreen = reservedScreens.main;\n  const socialLogin = props.wallets.find(w => w.id === \"embedded\" || w.id === \"inApp\");\n  if (props.wallets.length === 1 && props.wallets[0]) {\n    initialScreen = props.wallets[0];\n  } else if (props.size === \"wide\" && !props.welcomeScreen && socialLogin) {\n    initialScreen = socialLogin;\n  }\n  const [screen, setScreen] = useState(initialScreen);\n  const prevInitialScreen = useRef(initialScreen);\n  const activeAccount = useActiveAccount();\n  // when the initial screen changes, reset the screen to the initial screen ( if the modal is closed )\n  useEffect(() => {\n    if (initialScreen !== prevInitialScreen.current) {\n      prevInitialScreen.current = initialScreen;\n      setScreen(initialScreen);\n    }\n  }, [initialScreen]);\n  // if on signature screen and suddenly the wallet is disconnected, go back to the main screen\n  useEffect(() => {\n    if (!activeAccount && screen === reservedScreens.signIn) {\n      setScreen(reservedScreens.main);\n    }\n  }, [activeAccount, screen]);\n  return {\n    screen,\n    setScreen,\n    initialScreen\n  };\n}\n/**\n * @internal\n */\nexport function useScreenContext() {\n  const ctx = useContext(ScreenSetupContext);\n  if (!ctx) {\n    throw new Error(\"useScreenContext must be used within a <ScreenSetupContext.Provider />\");\n  }\n  return ctx;\n}\n//# sourceMappingURL=screen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}