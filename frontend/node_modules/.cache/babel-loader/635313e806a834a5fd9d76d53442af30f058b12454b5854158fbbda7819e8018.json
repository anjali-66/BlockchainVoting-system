{"ast":null,"code":"import { ethereum } from \"../../chains/chain-definitions/ethereum.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { toHex } from \"../../utils/encoding/hex.js\";\nimport { packetToBytes } from \"../../utils/ens/packetToBytes.js\";\nimport { withCache } from \"../../utils/promise/withCache.js\";\nimport { reverse } from \"./__generated__/UniversalResolver/read/reverse.js\";\nimport { UNIVERSAL_RESOLVER_ADDRESS } from \"./constants.js\";\n/**\n * Resolves the primary name for a specified address.\n * @param options - The options for resolving an ENS address.\n * @example\n * ```ts\n * import { resolveName } from \"thirdweb/extensions/ens\";\n * const name = await resolveName({\n *    client,\n *    address: \"0x1234...\",\n * });\n * ```\n * @extension ENS\n * @returns A promise that resolves to the Ethereum address.\n */\nexport async function resolveName(options) {\n  const {\n    client,\n    address,\n    resolverAddress,\n    resolverChain\n  } = options;\n  return withCache(async () => {\n    const contract = getContract({\n      client,\n      chain: resolverChain || ethereum,\n      address: resolverAddress || UNIVERSAL_RESOLVER_ADDRESS\n    });\n    const reverseName = toHex(packetToBytes(`${address.toLowerCase().substring(2)}.addr.reverse`));\n    const [name, resolvedAddress] = await reverse({\n      contract,\n      reverseName\n    }).catch(e => {\n      if (\"data\" in e && e.data === \"0x7199966d\") {\n        return [null, address];\n      }\n      throw e;\n    });\n    if (address.toLowerCase() !== resolvedAddress.toLowerCase()) {\n      return null;\n    }\n    return name;\n  }, {\n    cacheKey: `ens:name:${resolverChain?.id || 1}:${address}`,\n    // 1min cache\n    cacheTime: 60 * 1000\n  });\n}\n//# sourceMappingURL=resolve-name.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}