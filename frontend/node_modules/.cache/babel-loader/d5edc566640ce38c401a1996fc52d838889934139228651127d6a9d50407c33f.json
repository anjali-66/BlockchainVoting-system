{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { trackPayEvent } from \"../../../../../../analytics/track/pay.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../constants/addresses.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport { toTokens } from \"../../../../../../utils/units.js\";\nimport { useCustomTheme } from \"../../../../../core/design-system/CustomThemeProvider.js\";\nimport { fontSize, spacing } from \"../../../../../core/design-system/index.js\";\nimport { useChainMetadata } from \"../../../../../core/hooks/others/useChainQuery.js\";\nimport { useWalletBalance } from \"../../../../../core/hooks/others/useWalletBalance.js\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { hasSponsoredTransactionsEnabled } from \"../../../../../core/utils/wallet.js\";\nimport { ErrorState } from \"../../../../wallets/shared/ErrorState.js\";\nimport { LoadingScreen } from \"../../../../wallets/shared/LoadingScreen.js\";\nimport { ChainIcon } from \"../../../components/ChainIcon.js\";\nimport { Img } from \"../../../components/Img.js\";\nimport { Skeleton } from \"../../../components/Skeleton.js\";\nimport { Spacer } from \"../../../components/Spacer.js\";\nimport { TokenIcon } from \"../../../components/TokenIcon.js\";\nimport { Container, Line, ModalHeader } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { TokenSymbol } from \"../../../components/token/TokenSymbol.js\";\nimport { ConnectButton } from \"../../ConnectButton.js\";\nimport { formatTokenBalance } from \"../formatTokenBalance.js\";\nimport { NATIVE_TOKEN, isNativeToken } from \"../nativeToken.js\";\nimport { WalletRow } from \"./WalletSelectorButton.js\";\nimport { useTransactionCostAndData } from \"./main/useBuyTxStates.js\";\nexport function TransactionModeScreen(props) {\n  const {\n    payUiOptions,\n    client,\n    payerAccount,\n    supportedDestinations,\n    onContinue\n  } = props;\n  const {\n    data: chainData,\n    error: chainDataError,\n    isLoading: chainDataLoading,\n    refetch: chainDataRefetch\n  } = useChainMetadata(payUiOptions.transaction.chain);\n  const metadata = payUiOptions.metadata;\n  const {\n    data: transactionCostAndData,\n    error: transactionCostAndDataError,\n    isLoading: transactionCostAndDataLoading,\n    refetch: transactionCostAndDataRefetch\n  } = useTransactionCostAndData({\n    transaction: payUiOptions.transaction,\n    account: payerAccount,\n    supportedDestinations\n  });\n  const theme = useCustomTheme();\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  const sponsoredTransactionsEnabled = hasSponsoredTransactionsEnabled(activeWallet);\n  const balanceQuery = useWalletBalance({\n    address: activeAccount?.address,\n    chain: payUiOptions.transaction.chain,\n    tokenAddress: isNativeToken(transactionCostAndData?.token || NATIVE_TOKEN) ? undefined : transactionCostAndData?.token.address,\n    client: props.client\n  }, {\n    enabled: !!transactionCostAndData\n  });\n  if (transactionCostAndDataLoading || chainDataLoading) {\n    return _jsx(LoadingScreen, {});\n  }\n  if (transactionCostAndDataError || chainDataError) {\n    return _jsx(Container, {\n      style: {\n        minHeight: \"350px\"\n      },\n      fullHeight: true,\n      flex: \"row\",\n      center: \"both\",\n      children: _jsx(ErrorState, {\n        title: transactionCostAndDataError?.message || chainDataError?.message || \"Something went wrong\",\n        onTryAgain: transactionCostAndDataError ? transactionCostAndDataRefetch : chainDataRefetch\n      })\n    });\n  }\n  if (!transactionCostAndData || !chainData) {\n    return _jsx(LoadingScreen, {});\n  }\n  return _jsxs(Container, {\n    p: \"lg\",\n    children: [_jsx(ModalHeader, {\n      title: metadata?.name || \"Transaction\"\n    }), _jsx(Spacer, {\n      y: \"lg\"\n    }), _jsxs(Container, {\n      children: [metadata?.image ? _jsx(Img, {\n        client: client,\n        src: metadata?.image,\n        style: {\n          width: \"100%\",\n          borderRadius: spacing.md,\n          border: `1px solid ${theme.colors.borderColor}`,\n          backgroundColor: theme.colors.tertiaryBg\n        }\n      }) : activeAccount ? _jsxs(Container, {\n        flex: \"column\",\n        gap: \"sm\",\n        children: [_jsx(Text, {\n          size: \"sm\",\n          color: \"danger\",\n          style: {\n            textAlign: \"center\"\n          },\n          children: \"Insufficient funds\"\n        }), _jsxs(Container, {\n          flex: \"row\",\n          style: {\n            justifyContent: \"space-between\",\n            padding: spacing.sm,\n            marginBottom: spacing.sm,\n            borderRadius: spacing.md,\n            backgroundColor: theme.colors.tertiaryBg,\n            border: `1px solid ${theme.colors.borderColor}`\n          },\n          children: [_jsx(WalletRow, {\n            address: activeAccount?.address,\n            iconSize: \"md\",\n            client: client\n          }), balanceQuery.data ? _jsxs(Container, {\n            flex: \"row\",\n            gap: \"3xs\",\n            center: \"y\",\n            children: [_jsx(Text, {\n              size: \"xs\",\n              color: \"secondaryText\",\n              weight: 500,\n              children: formatTokenBalance(balanceQuery.data, false)\n            }), _jsx(TokenSymbol, {\n              token: transactionCostAndData.token,\n              chain: payUiOptions.transaction.chain,\n              size: \"xs\",\n              color: \"secondaryText\"\n            })]\n          }) : _jsx(Skeleton, {\n            width: \"70px\",\n            height: fontSize.xs\n          })]\n        })]\n      }) : null, _jsx(Spacer, {\n        y: \"md\"\n      }), _jsxs(Container, {\n        flex: \"row\",\n        children: [_jsx(Container, {\n          flex: \"column\",\n          expand: true,\n          children: _jsx(Text, {\n            size: \"md\",\n            color: \"primaryText\",\n            weight: 700,\n            children: \"Price\"\n          })\n        }), _jsx(Container, {\n          expand: true,\n          children: _jsxs(Container, {\n            flex: \"row\",\n            gap: \"xs\",\n            center: \"y\",\n            style: {\n              justifyContent: \"right\"\n            },\n            children: [_jsx(TokenIcon, {\n              chain: payUiOptions.transaction.chain,\n              client: props.client,\n              size: \"sm\",\n              token: transactionCostAndData.token\n            }), _jsxs(Text, {\n              color: \"primaryText\",\n              size: \"md\",\n              weight: 700,\n              children: [String(formatNumber(Number(toTokens(transactionCostAndData.transactionValueWei, transactionCostAndData.decimals)), 6)), \" \", transactionCostAndData.token.symbol]\n            })]\n          })\n        })]\n      }), _jsx(Spacer, {\n        y: \"md\"\n      }), _jsx(Line, {}), _jsx(Spacer, {\n        y: \"md\"\n      }), _jsxs(Container, {\n        flex: \"row\",\n        children: [_jsx(Container, {\n          flex: \"column\",\n          expand: true,\n          children: _jsx(Text, {\n            size: \"xs\",\n            color: \"secondaryText\",\n            children: \"Gas Fees\"\n          })\n        }), _jsx(Container, {\n          expand: true,\n          children: _jsx(Container, {\n            flex: \"row\",\n            gap: \"xs\",\n            center: \"y\",\n            style: {\n              justifyContent: \"right\"\n            },\n            children: _jsx(Text, {\n              color: sponsoredTransactionsEnabled ? \"success\" : \"primaryText\",\n              size: \"xs\",\n              children: sponsoredTransactionsEnabled ? \"Sponsored\" : `${String(formatNumber(Number(toTokens(transactionCostAndData.gasCostWei, chainData.nativeCurrency.decimals)), 6))} ${chainData.nativeCurrency.symbol}`\n            })\n          })\n        })]\n      }), _jsx(Spacer, {\n        y: \"sm\"\n      }), _jsxs(Container, {\n        flex: \"row\",\n        children: [_jsx(Container, {\n          flex: \"column\",\n          expand: true,\n          children: _jsx(Text, {\n            size: \"xs\",\n            color: \"secondaryText\",\n            children: \"Network\"\n          })\n        }), _jsx(Container, {\n          expand: true,\n          children: _jsxs(Container, {\n            flex: \"row\",\n            gap: \"xs\",\n            center: \"y\",\n            style: {\n              justifyContent: \"right\"\n            },\n            children: [_jsx(ChainIcon, {\n              chainIconUrl: chainData.icon?.url,\n              size: \"xs\",\n              client: props.client\n            }), _jsx(Text, {\n              size: \"xs\",\n              color: \"secondaryText\",\n              style: {\n                textAlign: \"right\"\n              },\n              children: chainData.name\n            })]\n          })\n        })]\n      })]\n    }), _jsx(Spacer, {\n      y: \"xl\"\n    }), payerAccount ? _jsx(Button, {\n      variant: \"accent\",\n      fullWidth: true,\n      onClick: () => {\n        let totalCostWei = transactionCostAndData.transactionValueWei;\n        if (transactionCostAndData.token.address === NATIVE_TOKEN_ADDRESS && !sponsoredTransactionsEnabled) {\n          totalCostWei += transactionCostAndData.gasCostWei;\n        }\n        trackPayEvent({\n          event: \"choose_payment_method_transaction_mode\",\n          client,\n          walletAddress: payerAccount.address,\n          walletType: activeWallet?.id\n        });\n        onContinue(toTokens(totalCostWei, transactionCostAndData.decimals), payUiOptions.transaction.chain, transactionCostAndData.token);\n      },\n      children: \"Choose Payment Method\"\n    }) : _jsx(\"div\", {\n      children: _jsx(ConnectButton, {\n        ...props.connectOptions,\n        client: client,\n        theme: theme,\n        connectButton: {\n          style: {\n            width: \"100%\"\n          }\n        }\n      })\n    })]\n  });\n}\n//# sourceMappingURL=TransactionModeScreen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}