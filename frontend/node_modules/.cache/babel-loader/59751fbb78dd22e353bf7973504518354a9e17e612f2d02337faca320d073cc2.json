{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { iconSize } from \"../../../core/design-system/index.js\";\nimport { TOS } from \"../../ui/ConnectWallet/Modal/TOS.js\";\nimport { useScreenContext } from \"../../ui/ConnectWallet/Modal/screen.js\";\nimport { PoweredByThirdweb } from \"../../ui/ConnectWallet/PoweredByTW.js\";\nimport { Img } from \"../../ui/components/Img.js\";\nimport { Spacer } from \"../../ui/components/Spacer.js\";\nimport { Container, ModalHeader } from \"../../ui/components/basic.js\";\nimport { ModalTitle } from \"../../ui/components/modalElements.js\";\nimport { ConnectWalletSocialOptions } from \"../shared/ConnectWalletSocialOptions.js\";\n/**\n * @internal\n */\nexport function InAppWalletFormUIScreen(props) {\n  const isCompact = props.size === \"compact\";\n  const {\n    initialScreen,\n    screen\n  } = useScreenContext();\n  // This is only used when requireApproval is true to accept the TOS\n  const [isApproved, setIsApproved] = useState(false);\n  const isInitialScreen = screen === props.wallet && initialScreen === props.wallet;\n  const onBack = isInitialScreen && !props.isLinking ? undefined : props.goBack;\n  return _jsxs(Container, {\n    fullHeight: true,\n    flex: \"column\",\n    p: \"lg\",\n    animate: \"fadein\",\n    style: {\n      minHeight: \"250px\"\n    },\n    children: [isCompact && (isInitialScreen ? _jsxs(_Fragment, {\n      children: [_jsx(ModalHeader, {\n        onBack: onBack,\n        leftAligned: !props.isLinking,\n        title: _jsxs(_Fragment, {\n          children: [!props.meta?.titleIconUrl ? null : _jsx(Img, {\n            src: props.meta?.titleIconUrl,\n            width: iconSize.md,\n            height: iconSize.md,\n            client: props.client\n          }), _jsx(ModalTitle, {\n            children: props.meta?.title ?? props.inAppWalletLocale.emailLoginScreen.title\n          })]\n        })\n      }), _jsx(Spacer, {\n        y: \"lg\"\n      })]\n    }) : _jsx(ModalHeader, {\n      onBack: onBack,\n      title: props.inAppWalletLocale.signIn\n    })), _jsx(Container, {\n      expand: true,\n      flex: \"column\",\n      center: \"y\",\n      p: isCompact ? undefined : \"lg\",\n      children: _jsx(ConnectWalletSocialOptions, {\n        ...props,\n        locale: props.inAppWalletLocale,\n        disabled: props.meta?.requireApproval && !isApproved\n      })\n    }), isCompact && (props.meta?.showThirdwebBranding !== false || props.meta?.termsOfServiceUrl || props.meta?.privacyPolicyUrl) && _jsx(Spacer, {\n      y: \"xl\"\n    }), _jsxs(Container, {\n      flex: \"column\",\n      gap: \"lg\",\n      children: [_jsx(TOS, {\n        termsOfServiceUrl: props.meta?.termsOfServiceUrl,\n        privacyPolicyUrl: props.meta?.privacyPolicyUrl,\n        locale: props.connectLocale.agreement,\n        requireApproval: props.meta?.requireApproval,\n        onApprove: () => {\n          setIsApproved(!isApproved);\n        },\n        isApproved: isApproved\n      }), props.meta?.showThirdwebBranding !== false && _jsx(PoweredByThirdweb, {})]\n    })]\n  });\n}\n//# sourceMappingURL=InAppWalletFormUI.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}