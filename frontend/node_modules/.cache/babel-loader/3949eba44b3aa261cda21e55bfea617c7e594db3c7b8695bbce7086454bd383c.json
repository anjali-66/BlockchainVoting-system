{"ast":null,"code":"import * as AccessList from './AccessList.js';\nimport * as Blobs from './Blobs.js';\nimport * as Hash from './Hash.js';\nimport * as Hex from './Hex.js';\nimport * as Kzg from './Kzg.js';\nimport * as Rlp from './Rlp.js';\nimport * as Signature from './Signature.js';\nimport * as TransactionEnvelope from './TransactionEnvelope.js';\nimport * as TransactionEnvelopeEip1559 from './TransactionEnvelopeEip1559.js';\nexport const serializedType = '0x03';\nexport const type = 'eip4844';\n/**\n * Asserts a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844, Value } from 'ox'\n *\n * TransactionEnvelopeEip4844.assert({\n *   blobVersionedHashes: [],\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: EmptyBlobVersionedHashesError: Blob versioned hashes must not be empty.\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nexport function assert(envelope) {\n  const {\n    blobVersionedHashes\n  } = envelope;\n  if (blobVersionedHashes) {\n    if (blobVersionedHashes.length === 0) throw new Blobs.EmptyBlobVersionedHashesError();\n    for (const hash of blobVersionedHashes) {\n      const size = Hex.size(hash);\n      const version = Hex.toNumber(Hex.slice(hash, 0, 1));\n      if (size !== 32) throw new Blobs.InvalidVersionedHashSizeError({\n        hash,\n        size\n      });\n      if (version !== Kzg.versionedHashVersion) throw new Blobs.InvalidVersionedHashVersionError({\n        hash,\n        version\n      });\n    }\n  }\n  TransactionEnvelopeEip1559.assert(envelope);\n}\n/**\n * Deserializes a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip4844.deserialize('0x03ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   blobVersionedHashes: [...],\n * // @log:   type: 'eip4844',\n * // @log:   nonce: 785n,\n * // @log:   maxFeePerGas: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nexport function deserialize(serialized) {\n  const transactionOrWrapperArray = Rlp.toHex(Hex.slice(serialized, 1));\n  const hasNetworkWrapper = transactionOrWrapperArray.length === 4;\n  const transactionArray = hasNetworkWrapper ? transactionOrWrapperArray[0] : transactionOrWrapperArray;\n  const wrapperArray = hasNetworkWrapper ? transactionOrWrapperArray.slice(1) : [];\n  const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, maxFeePerBlobGas, blobVersionedHashes, yParity, r, s] = transactionArray;\n  const [blobs, commitments, proofs] = wrapperArray;\n  if (!(transactionArray.length === 11 || transactionArray.length === 14)) throw new TransactionEnvelope.InvalidSerializedError({\n    attributes: {\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gas,\n      to,\n      value,\n      data,\n      accessList,\n      ...(transactionArray.length > 9 ? {\n        yParity,\n        r,\n        s\n      } : {})\n    },\n    serialized,\n    type\n  });\n  let transaction = {\n    blobVersionedHashes: blobVersionedHashes,\n    chainId: Number(chainId),\n    type\n  };\n  if (Hex.validate(to) && to !== '0x') transaction.to = to;\n  if (Hex.validate(gas) && gas !== '0x') transaction.gas = BigInt(gas);\n  if (Hex.validate(data) && data !== '0x') transaction.data = data;\n  if (Hex.validate(nonce) && nonce !== '0x') transaction.nonce = BigInt(nonce);\n  if (Hex.validate(value) && value !== '0x') transaction.value = BigInt(value);\n  if (Hex.validate(maxFeePerBlobGas) && maxFeePerBlobGas !== '0x') transaction.maxFeePerBlobGas = BigInt(maxFeePerBlobGas);\n  if (Hex.validate(maxFeePerGas) && maxFeePerGas !== '0x') transaction.maxFeePerGas = BigInt(maxFeePerGas);\n  if (Hex.validate(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x') transaction.maxPriorityFeePerGas = BigInt(maxPriorityFeePerGas);\n  if (accessList?.length !== 0 && accessList !== '0x') transaction.accessList = AccessList.fromTupleList(accessList);\n  if (blobs && commitments && proofs) transaction.sidecars = Blobs.toSidecars(blobs, {\n    commitments: commitments,\n    proofs: proofs\n  });\n  const signature = r && s && yParity ? Signature.fromTuple([yParity, r, s]) : undefined;\n  if (signature) transaction = {\n    ...transaction,\n    ...signature\n  };\n  assert(transaction);\n  return transaction;\n}\n/**\n * Converts an arbitrary transaction object into an EIP-4844 Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   chainId: 1,\n *   blobVersionedHashes,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Secp256k1, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const blobVersionedHashes = Blobs.sidecarsToVersionedHashes(sidecars)\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip4844.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip4844.from(envelope, { // [!code focus]\n *   sidecars, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   blobVersionedHashes: [...],\n * // @log:   chainId: 1,\n * // @log:   maxFeePerBlobGas: 3000000000n,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip4844',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an EIP-4844 Transaction Envelope from a {@link ox#TransactionEnvelopeEip4844.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip4844.from('0x03f858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   blobVersionedHashes: [...],\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip4844',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns An EIP-4844 Transaction Envelope.\n */\nexport function from(envelope, options = {}) {\n  const {\n    signature\n  } = options;\n  const envelope_ = typeof envelope === 'string' ? deserialize(envelope) : envelope;\n  assert(envelope_);\n  return {\n    ...envelope_,\n    ...(signature ? Signature.from(signature) : {}),\n    type: 'eip4844'\n  };\n}\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Secp256k1, TransactionEnvelopeEip4844 } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip4844.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nexport function getSignPayload(envelope) {\n  return hash(envelope, {\n    presign: true\n  });\n}\n/**\n * Hashes a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, TransactionEnvelopeEip4844 } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const hash = TransactionEnvelopeEip4844.hash(envelope) // [!code focus]\n * ```\n *\n * @param envelope - The EIP-4844 Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nexport function hash(envelope, options = {}) {\n  const {\n    presign\n  } = options;\n  return Hash.keccak256(serialize({\n    ...envelope,\n    ...(presign ? {\n      sidecars: undefined,\n      r: undefined,\n      s: undefined,\n      yParity: undefined,\n      v: undefined\n    } : {})\n  }));\n}\n/**\n * Serializes a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, TransactionEnvelopeEip4844 } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip4844.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Secp256k1, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const blobVersionedHashes = Blobs.sidecarsToVersionedHashes(blobs)\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip4844.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeEip4844.serialize(envelope, { // [!code focus]\n *   sidecars, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nexport function serialize(envelope, options = {}) {\n  const {\n    blobVersionedHashes,\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data\n  } = envelope;\n  assert(envelope);\n  const accessTupleList = AccessList.toTupleList(accessList);\n  const signature = Signature.extract(options.signature || envelope);\n  const serialized = [Hex.fromNumber(chainId), nonce ? Hex.fromNumber(nonce) : '0x', maxPriorityFeePerGas ? Hex.fromNumber(maxPriorityFeePerGas) : '0x', maxFeePerGas ? Hex.fromNumber(maxFeePerGas) : '0x', gas ? Hex.fromNumber(gas) : '0x', to ?? '0x', value ? Hex.fromNumber(value) : '0x', data ?? '0x', accessTupleList, maxFeePerBlobGas ? Hex.fromNumber(maxFeePerBlobGas) : '0x', blobVersionedHashes ?? [], ...(signature ? Signature.toTuple(signature) : [])];\n  const sidecars = options.sidecars || envelope.sidecars;\n  const blobs = [];\n  const commitments = [];\n  const proofs = [];\n  if (sidecars) for (let i = 0; i < sidecars.length; i++) {\n    const {\n      blob,\n      commitment,\n      proof\n    } = sidecars[i];\n    blobs.push(blob);\n    commitments.push(commitment);\n    proofs.push(proof);\n  }\n  return Hex.concat('0x03', sidecars ?\n  // If sidecars are provided, envelope turns into a \"network wrapper\":\n  Rlp.fromHex([serialized, blobs, commitments, proofs]) :\n  // Otherwise, standard envelope is used:\n  Rlp.fromHex(serialized));\n}\n/**\n * Converts an {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844} to an {@link ox#TransactionEnvelopeEip4844.Rpc}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, RpcRequest, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   nonce: 0n,\n *   gas: 21000n,\n *   maxFeePerBlobGas: Value.fromGwei('20'),\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeEip4844.toRpc(envelope) // [!code focus]\n *\n * const request = RpcRequest.from({\n *   id: 0,\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @param envelope - The EIP-4844 transaction envelope to convert.\n * @returns An RPC-formatted EIP-4844 transaction envelope.\n */\nexport function toRpc(envelope) {\n  const signature = Signature.extract(envelope);\n  return {\n    ...envelope,\n    chainId: Hex.fromNumber(envelope.chainId),\n    data: envelope.data ?? envelope.input,\n    ...(typeof envelope.gas === 'bigint' ? {\n      gas: Hex.fromNumber(envelope.gas)\n    } : {}),\n    ...(typeof envelope.nonce === 'bigint' ? {\n      nonce: Hex.fromNumber(envelope.nonce)\n    } : {}),\n    ...(typeof envelope.value === 'bigint' ? {\n      value: Hex.fromNumber(envelope.value)\n    } : {}),\n    ...(typeof envelope.maxFeePerBlobGas === 'bigint' ? {\n      maxFeePerBlobGas: Hex.fromNumber(envelope.maxFeePerBlobGas)\n    } : {}),\n    ...(typeof envelope.maxFeePerGas === 'bigint' ? {\n      maxFeePerGas: Hex.fromNumber(envelope.maxFeePerGas)\n    } : {}),\n    ...(typeof envelope.maxPriorityFeePerGas === 'bigint' ? {\n      maxPriorityFeePerGas: Hex.fromNumber(envelope.maxPriorityFeePerGas)\n    } : {}),\n    type: '0x3',\n    ...(signature ? Signature.toRpc(signature) : {})\n  };\n}\n/**\n * Validates a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeEip4844.assert({\n *   blobVersionedHashes: [],\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nexport function validate(envelope) {\n  try {\n    assert(envelope);\n    return true;\n  } catch {\n    return false;\n  }\n}\n//# sourceMappingURL=TransactionEnvelopeEip4844.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}