{"ast":null,"code":"import { getBuyWithCryptoQuote } from \"../buyWithCrypto/getQuote.js\";\n/**\n * When buying a token with fiat currency - It only involes doing on-ramp if the on-ramp provider supports buying the given destination token directly.\n *\n * If the on-ramp provider does not support buying the destination token directly, user can be sent an intermediate token with fiat currency from the on-ramp provider which\n * can be swapped to destination token onchain.\n *\n * `getPostOnRampQuote` function is used to get the quote for swapping the on-ramp token to destination token.\n *\n * When you get a \"Buy with Fiat\" status of type \"CRYPTO_SWAP_REQUIRED\" from the [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatStatus) function,\n *  you can use `getPostOnRampQuote` function to get the quote of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) for swapping the on-ramp token to destination token\n *\n * Once you have the quote, you can start the Swap process by following the same steps as mentioned in the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) documentation.\n *\n * @param params - object of type [`GetPostOnRampQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetPostOnRampQuoteParams)\n * @returns Object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @example\n * ```ts\n * import { getPostOnRampQuote, getBuyWithFiatStatus } from \"thirdweb/pay\";\n *\n * // previous steps\n * const fiatQuote = await getBuyWithFiatQuote(fiatQuoteParams);\n * window.open(fiatQuote.onRampLink, \"_blank\");\n * const buyWithFiatStatus = await getBuyWithFiatStatus({ client, intentId }); // keep calling this until status is \"settled\" state\n *\n * // when a swap is required after onramp\n * if (buyWithFiatStatus.status === \"CRYPTO_SWAP_REQUIRED\") {\n *  const buyWithCryptoQuote = await getPostOnRampQuote({\n *    client,\n *    buyWithFiatStatus\n *  });\n * }\n * ```\n * @buyCrypto\n */\nexport async function getPostOnRampQuote({\n  client,\n  buyWithFiatStatus\n}) {\n  if (buyWithFiatStatus.status === \"NOT_FOUND\") {\n    throw new Error(\"Invalid buyWithFiatStatus\");\n  }\n  return getBuyWithCryptoQuote({\n    client,\n    intentId: buyWithFiatStatus.intentId,\n    // onramp always happens to fromAddress, and then swap is done from - fromAddress to toAddress\n    fromAddress: buyWithFiatStatus.fromAddress,\n    toAddress: buyWithFiatStatus.toAddress,\n    fromChainId: buyWithFiatStatus.quote.onRampToken.chainId,\n    fromTokenAddress: buyWithFiatStatus.quote.onRampToken.tokenAddress,\n    toChainId: buyWithFiatStatus.quote.toToken.chainId,\n    toTokenAddress: buyWithFiatStatus.quote.toToken.tokenAddress,\n    toAmount: buyWithFiatStatus.quote.estimatedToTokenAmount\n  });\n}\n//# sourceMappingURL=getPostOnRampQuote.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}