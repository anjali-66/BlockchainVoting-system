{"ast":null,"code":"import { AbstractLogin } from \"./abstract-login.js\";\n/**\n *\n */\nexport class BaseLogin extends AbstractLogin {\n  async authenticateWithModal() {\n    return this.LoginQuerier.call({\n      procedureName: \"loginWithThirdwebModal\",\n      params: undefined,\n      showIframe: true\n    });\n  }\n  /**\n   * @internal\n   */\n  async loginWithModal() {\n    await this.preLogin();\n    const result = await this.authenticateWithModal();\n    return this.postLogin(result);\n  }\n  async authenticateWithIframe({\n    email\n  }) {\n    return this.LoginQuerier.call({\n      procedureName: \"loginWithThirdwebModal\",\n      params: {\n        email\n      },\n      showIframe: true\n    });\n  }\n  /**\n   * @internal\n   */\n  async loginWithIframe({\n    email\n  }) {\n    await this.preLogin();\n    const result = await this.authenticateWithIframe({\n      email\n    });\n    return this.postLogin(result);\n  }\n  async authenticateWithCustomJwt({\n    encryptionKey,\n    jwt\n  }) {\n    if (!encryptionKey || encryptionKey.length === 0) {\n      throw new Error(\"Encryption key is required for custom jwt auth\");\n    }\n    return this.LoginQuerier.call({\n      procedureName: \"loginWithCustomJwt\",\n      params: {\n        encryptionKey,\n        jwt\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n  async loginWithCustomJwt({\n    encryptionKey,\n    jwt\n  }) {\n    if (!encryptionKey || encryptionKey.length === 0) {\n      throw new Error(\"Encryption key is required for custom jwt auth\");\n    }\n    await this.preLogin();\n    const result = await this.authenticateWithCustomJwt({\n      encryptionKey,\n      jwt\n    });\n    return this.postLogin(result);\n  }\n  async authenticateWithCustomAuthEndpoint({\n    encryptionKey,\n    payload\n  }) {\n    return this.LoginQuerier.call({\n      procedureName: \"loginWithCustomAuthEndpoint\",\n      params: {\n        encryptionKey,\n        payload\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n  async loginWithCustomAuthEndpoint({\n    encryptionKey,\n    payload\n  }) {\n    if (!encryptionKey || encryptionKey.length === 0) {\n      throw new Error(\"Encryption key is required for custom auth\");\n    }\n    await this.preLogin();\n    const result = await this.authenticateWithCustomAuthEndpoint({\n      encryptionKey,\n      payload\n    });\n    return this.postLogin(result);\n  }\n  async authenticateWithEmailOtp({\n    email,\n    otp,\n    recoveryCode\n  }) {\n    return this.LoginQuerier.call({\n      procedureName: \"verifyThirdwebEmailLoginOtp\",\n      params: {\n        email,\n        otp,\n        recoveryCode\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n  async loginWithEmailOtp({\n    email,\n    otp,\n    recoveryCode\n  }) {\n    const result = await this.authenticateWithEmailOtp({\n      email,\n      otp,\n      recoveryCode\n    });\n    return this.postLogin(result);\n  }\n  async authenticateWithSmsOtp({\n    phoneNumber,\n    otp,\n    recoveryCode\n  }) {\n    return this.LoginQuerier.call({\n      procedureName: \"verifyThirdwebSmsLoginOtp\",\n      params: {\n        phoneNumber,\n        otp,\n        recoveryCode\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n  async loginWithSmsOtp({\n    phoneNumber,\n    otp,\n    recoveryCode\n  }) {\n    const result = await this.authenticateWithSmsOtp({\n      phoneNumber,\n      otp,\n      recoveryCode\n    });\n    return this.postLogin(result);\n  }\n}\n//# sourceMappingURL=base-login.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}