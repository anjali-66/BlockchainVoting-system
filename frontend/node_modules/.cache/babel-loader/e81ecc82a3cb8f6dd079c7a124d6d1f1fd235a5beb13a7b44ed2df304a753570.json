{"ast":null,"code":"import { getChainDecimals, getChainNativeCurrencyName, getChainSymbol } from \"../../chains/utils.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { eth_getBalance } from \"../../rpc/actions/eth_getBalance.js\";\nimport { getRpcClient } from \"../../rpc/rpc.js\";\nimport { toTokens } from \"../../utils/units.js\";\n/**\n * Retrieves the balance of a token or native currency for a given wallet.\n * @param options - The options for retrieving the token balance.\n * @param options.address - The address for which to retrieve the balance.\n * @param options.client - The Thirdweb client to use for the request.\n * @param options.chain - The chain for which to retrieve the balance.\n * @param options.tokenAddress - (Optional) The address of the token to retrieve the balance for. If not provided, the balance of the native token will be retrieved.\n * @returns A promise that resolves to the token balance result.\n * @example\n * ```ts\n * import { getWalletBalance } from \"thirdweb/wallets\";\n * const balance = await getWalletBalance({ address, client, chain, tokenAddress });\n * ```\n * @walletUtils\n */\nexport async function getWalletBalance(options) {\n  const {\n    address,\n    client,\n    chain,\n    tokenAddress\n  } = options;\n  // erc20 case\n  if (tokenAddress) {\n    // load balanceOf dynamically to avoid circular dependency\n    const {\n      getBalance\n    } = await import(\"../../extensions/erc20/read/getBalance.js\");\n    return getBalance({\n      contract: getContract({\n        client,\n        chain,\n        address: tokenAddress\n      }),\n      address\n    });\n  }\n  // native token case\n  const rpcRequest = getRpcClient({\n    client,\n    chain\n  });\n  const [nativeSymbol, nativeDecimals, nativeName, nativeBalance] = await Promise.all([getChainSymbol(chain), getChainDecimals(chain), getChainNativeCurrencyName(chain), eth_getBalance(rpcRequest, {\n    address\n  })]);\n  return {\n    value: nativeBalance,\n    decimals: nativeDecimals,\n    displayValue: toTokens(nativeBalance, nativeDecimals),\n    symbol: nativeSymbol,\n    name: nativeName\n  };\n}\n//# sourceMappingURL=getWalletBalance.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}