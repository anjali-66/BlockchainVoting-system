{"ast":null,"code":"import { parseAvatarRecord } from \"../../utils/ens/avatar.js\";\nimport { withCache } from \"../../utils/promise/withCache.js\";\nimport { resolveText } from \"./resolve-text.js\";\n/**\n * Resolves an ENS name to the avatar URL.\n * @param options - The options for resolving an ENS address.\n * @example\n * ```ts\n * import { resolveAvatar } from \"thirdweb/extensions/ens\";\n * const address = await resolveAvatar({\n *    client,\n *    name: \"vitalik.eth\",\n * });\n * ```\n * @extension ENS\n * @returns A promise that resolves to the avatar url, or null if not set.\n */\nexport async function resolveAvatar(options) {\n  const {\n    client,\n    name,\n    resolverAddress,\n    resolverChain\n  } = options;\n  return withCache(async () => {\n    const record = await resolveText({\n      client,\n      key: \"avatar\",\n      name,\n      resolverAddress,\n      resolverChain\n    });\n    if (!record) {\n      return null;\n    }\n    try {\n      return parseAvatarRecord({\n        uri: record,\n        client\n      });\n    } catch (e) {\n      console.error(\"Error parsing avatar record\", e);\n      return null;\n    }\n  }, {\n    cacheKey: `ens:avatar:${name}`,\n    // 1min cache\n    cacheTime: 60 * 1000\n  });\n}\n//# sourceMappingURL=resolve-avatar.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}