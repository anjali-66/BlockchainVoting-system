{"ast":null,"code":"import { contractDeployerAddress } from '../constants/address.js';\nimport { encodeDeployData } from '../utils/abi/encodeDeployData.js';\nimport { sendEip712Transaction } from './sendEip712Transaction.js';\n/**\n * Deploys a contract to the network, given bytecode and constructor arguments using EIP712 transaction.\n *\n * - Docs: https://viem.sh/docs/contract/deployContract\n *\n * @param client - Client to use\n * @param parameters - {@link DeployContractParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link DeployContractReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { zksync } from 'viem/chains'\n * import { deployContract } from 'viem/zksync'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: zksync,\n *   transport: custom(provider),\n * })\n * const hash = await deployContract(client, {\n *   abi: [],\n *   account: '0x…,\n *   deploymentType: 'create',\n *   bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n *   factoryDeps: ['0x608060405260405161083e38038061083e833981016040819052610...'],\n *   gasPerPubdata: 50000n\n * })\n */\nexport function deployContract(walletClient, parameters) {\n  const {\n    abi,\n    args,\n    bytecode,\n    deploymentType,\n    salt,\n    ...request\n  } = parameters;\n  const data = encodeDeployData({\n    abi,\n    args,\n    bytecode,\n    deploymentType,\n    salt\n  });\n  // Add the bytecode to the factoryDeps if it's not already there\n  request.factoryDeps = request.factoryDeps || [];\n  if (!request.factoryDeps.includes(bytecode)) request.factoryDeps.push(bytecode);\n  return sendEip712Transaction(walletClient, {\n    ...request,\n    data,\n    to: contractDeployerAddress\n  });\n}\n//# sourceMappingURL=deployContract.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}