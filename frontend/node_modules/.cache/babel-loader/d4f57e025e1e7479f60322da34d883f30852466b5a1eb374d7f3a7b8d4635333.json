{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { ExternalLinkIcon } from \"@radix-ui/react-icons\";\nimport { getCachedChain } from \"../../../../../../../chains/utils.js\";\nimport { shortenAddress } from \"../../../../../../../utils/address.js\";\nimport { formatExplorerTxUrl } from \"../../../../../../../utils/url.js\";\nimport { fontSize, iconSize, spacing } from \"../../../../../../core/design-system/index.js\";\nimport { useChainExplorers, useChainName } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { useBuyWithCryptoStatus } from \"../../../../../../core/hooks/pay/useBuyWithCryptoStatus.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Container, Line, ModalHeader } from \"../../../../components/basic.js\";\nimport { ButtonLink } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { formatSeconds } from \"../swap/formatSeconds.js\";\nimport { TokenInfoRow } from \"./TokenInfoRow.js\";\nimport { getBuyWithCryptoStatusMeta } from \"./statusMeta.js\";\nexport function SwapDetailsScreen(props) {\n  const {\n    status: initialStatus,\n    client\n  } = props;\n  const statusQuery = useBuyWithCryptoStatus(initialStatus.source?.transactionHash ? {\n    client: client,\n    transactionHash: initialStatus.source.transactionHash\n  } : undefined);\n  const status = (statusQuery.data?.status !== \"NOT_FOUND\" ? statusQuery.data : undefined) || initialStatus;\n  return _jsxs(Container, {\n    children: [_jsx(Container, {\n      p: \"lg\",\n      children: _jsx(ModalHeader, {\n        title: \"Transaction Details\",\n        onBack: props.onBack\n      })\n    }), _jsx(Line, {}), _jsx(Container, {\n      p: \"lg\",\n      children: _jsx(SwapTxDetailsTable, {\n        type: \"status\",\n        status: status,\n        client: client\n      })\n    })]\n  });\n}\nexport function SwapTxDetailsTable(props) {\n  let uiData;\n  let showStatusRow = true;\n  let isTransfer = false;\n  if (props.type === \"status\") {\n    isTransfer = props.status.swapType === \"TRANSFER\";\n    const status = props.status;\n    if (props.hideStatusRow) {\n      showStatusRow = false;\n    }\n    const isPartialSuccess = status.status === \"COMPLETED\" && status.subStatus === \"PARTIAL_SUCCESS\";\n    uiData = {\n      fromToken: {\n        chainId: status.quote.fromToken.chainId,\n        symbol: status.quote.fromToken.symbol || \"\",\n        address: status.quote.fromToken.tokenAddress,\n        amount: status.quote.fromAmount\n      },\n      quotedToToken: {\n        chainId: status.quote.toToken.chainId,\n        symbol: status.quote.toToken.symbol || \"\",\n        address: status.quote.toToken.tokenAddress,\n        amount: status.quote.toAmount\n      },\n      gotToken: status.destination ? {\n        chainId: status.destination.token.chainId,\n        symbol: status.destination.token.symbol || \"\",\n        address: status.destination.token.tokenAddress,\n        amount: status.destination.amount\n      } : undefined,\n      statusMeta: getBuyWithCryptoStatusMeta(status),\n      estimatedDuration: status.quote.estimated.durationSeconds || 0,\n      isPartialSuccess,\n      destinationTxHash: status.destination?.transactionHash,\n      sourceTxHash: status.source?.transactionHash,\n      fromAddress: status.fromAddress,\n      toAddress: status.toAddress\n    };\n  } else {\n    const quote = props.quote;\n    uiData = {\n      fromToken: {\n        chainId: quote.swapDetails.fromToken.chainId,\n        symbol: quote.swapDetails.fromToken.symbol || \"\",\n        address: quote.swapDetails.fromToken.tokenAddress,\n        amount: quote.swapDetails.fromAmount\n      },\n      quotedToToken: {\n        chainId: quote.swapDetails.toToken.chainId,\n        symbol: quote.swapDetails.toToken.symbol || \"\",\n        address: quote.swapDetails.toToken.tokenAddress,\n        amount: quote.swapDetails.toAmount\n      },\n      isPartialSuccess: false,\n      estimatedDuration: quote.swapDetails.estimated.durationSeconds || 0,\n      fromAddress: quote.swapDetails.fromAddress,\n      toAddress: quote.swapDetails.toAddress\n    };\n  }\n  const {\n    client\n  } = props;\n  const {\n    fromToken,\n    quotedToToken: toToken,\n    statusMeta,\n    sourceTxHash,\n    destinationTxHash,\n    isPartialSuccess,\n    gotToken,\n    estimatedDuration\n  } = uiData;\n  const fromChainId = fromToken.chainId;\n  const toChainId = toToken.chainId;\n  const fromChainName = useChainName(getCachedChain(fromChainId));\n  const fromChainExplorers = useChainExplorers(getCachedChain(fromChainId));\n  const toChainName = useChainName(getCachedChain(toChainId));\n  const toChainExplorers = useChainExplorers(getCachedChain(toChainId));\n  const lineSpacer = _jsxs(_Fragment, {\n    children: [_jsx(Spacer, {\n      y: \"md\"\n    }), _jsx(Line, {}), _jsx(Spacer, {\n      y: \"md\"\n    })]\n  });\n  if (isTransfer) {\n    return _jsx(\"div\", {\n      children: fromChainExplorers.explorers?.[0]?.url && sourceTxHash && _jsxs(ButtonLink, {\n        fullWidth: true,\n        variant: \"outline\",\n        href: formatExplorerTxUrl(fromChainExplorers.explorers[0]?.url, sourceTxHash),\n        target: \"_blank\",\n        gap: \"xs\",\n        style: {\n          fontSize: fontSize.sm,\n          padding: spacing.sm\n        },\n        children: [\"View on \", fromChainName.name, \" Explorer\", _jsx(ExternalLinkIcon, {\n          width: iconSize.sm,\n          height: iconSize.sm\n        })]\n      })\n    });\n  }\n  return _jsxs(\"div\", {\n    children: [isPartialSuccess && gotToken ?\n    // Expected + Got\n    _jsxs(_Fragment, {\n      children: [_jsx(TokenInfoRow, {\n        chainId: toToken.chainId,\n        client: client,\n        label: isPartialSuccess ? \"Expected\" : \"Received\",\n        tokenAmount: toToken.amount,\n        tokenSymbol: toToken.symbol || \"\",\n        tokenAddress: toToken.address\n      }), lineSpacer, _jsx(TokenInfoRow, {\n        chainId: gotToken.chainId,\n        client: client,\n        label: \"Got\",\n        tokenAmount: gotToken.amount,\n        tokenSymbol: gotToken.symbol || \"\",\n        tokenAddress: gotToken.address\n      })]\n    }) :\n    // Receive\n    _jsx(TokenInfoRow, {\n      chainId: toToken.chainId,\n      client: client,\n      label: \"Receive\",\n      tokenAmount: toToken.amount,\n      tokenSymbol: toToken.symbol || \"\",\n      tokenAddress: toToken.address\n    }), lineSpacer, _jsx(TokenInfoRow, {\n      chainId: fromToken.chainId,\n      client: client,\n      label: \"Pay\",\n      tokenAmount: fromToken.amount,\n      tokenSymbol: fromToken.symbol || \"\",\n      tokenAddress: fromToken.address\n    }), lineSpacer, _jsxs(Container, {\n      flex: \"row\",\n      center: \"y\",\n      style: {\n        justifyContent: \"space-between\"\n      },\n      children: [_jsx(Text, {\n        children: \" Time \"\n      }), _jsx(Container, {\n        flex: \"row\",\n        gap: \"xs\",\n        center: \"y\",\n        children: _jsxs(Text, {\n          color: \"primaryText\",\n          children: [\"~\", formatSeconds(estimatedDuration || 0)]\n        })\n      })]\n    }), statusMeta && showStatusRow && _jsxs(_Fragment, {\n      children: [lineSpacer, _jsxs(Container, {\n        flex: \"row\",\n        center: \"y\",\n        style: {\n          justifyContent: \"space-between\"\n        },\n        children: [_jsx(Text, {\n          children: \"Status\"\n        }), _jsx(Container, {\n          flex: \"row\",\n          gap: \"xs\",\n          center: \"y\",\n          children: _jsx(Text, {\n            color: statusMeta.color,\n            children: statusMeta.status\n          })\n        })]\n      })]\n    }), uiData.fromAddress.toLowerCase() !== uiData.toAddress.toLowerCase() && _jsxs(_Fragment, {\n      children: [lineSpacer, _jsxs(Container, {\n        flex: \"row\",\n        center: \"y\",\n        style: {\n          justifyContent: \"space-between\"\n        },\n        children: [_jsx(Text, {\n          children: \"Send to\"\n        }), _jsx(Container, {\n          flex: \"row\",\n          gap: \"xs\",\n          center: \"y\",\n          children: _jsx(Text, {\n            color: \"primaryText\",\n            size: \"sm\",\n            children: shortenAddress(uiData.toAddress)\n          })\n        })]\n      })]\n    }), lineSpacer, fromChainExplorers.explorers?.[0]?.url && sourceTxHash && _jsxs(ButtonLink, {\n      fullWidth: true,\n      variant: \"outline\",\n      href: formatExplorerTxUrl(fromChainExplorers.explorers[0]?.url, sourceTxHash),\n      target: \"_blank\",\n      gap: \"xs\",\n      style: {\n        fontSize: fontSize.sm,\n        padding: spacing.sm\n      },\n      children: [\"View on \", fromChainName.name, \" Explorer\", _jsx(ExternalLinkIcon, {\n        width: iconSize.sm,\n        height: iconSize.sm\n      })]\n    }), destinationTxHash && sourceTxHash !== destinationTxHash && toChainExplorers?.explorers?.[0]?.url && _jsxs(_Fragment, {\n      children: [_jsx(Spacer, {\n        y: \"sm\"\n      }), _jsxs(ButtonLink, {\n        fullWidth: true,\n        variant: \"outline\",\n        href: formatExplorerTxUrl(toChainExplorers.explorers[0]?.url, destinationTxHash),\n        target: \"_blank\",\n        gap: \"xs\",\n        style: {\n          fontSize: fontSize.sm,\n          padding: spacing.sm\n        },\n        children: [\"View on \", toChainName.name, \" Explorer\", _jsx(ExternalLinkIcon, {\n          width: iconSize.sm,\n          height: iconSize.sm\n        })]\n      })]\n    })]\n  });\n}\n//# sourceMappingURL=SwapDetailsScreen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}