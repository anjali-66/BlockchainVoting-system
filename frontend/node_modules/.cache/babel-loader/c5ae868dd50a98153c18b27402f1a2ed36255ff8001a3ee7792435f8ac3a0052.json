{"ast":null,"code":"import { trackConnect } from \"../../../../analytics/track/connect.js\";\nimport { getCachedChain, getCachedChainIfExists } from \"../../../../chains/utils.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nimport { getEcosystemInfo } from \"../../../ecosystem/get-ecosystem-wallet-auth-options.js\";\nimport { createWalletEmitter } from \"../../../wallet-emitter.js\";\nconst connectorCache = new Map();\n/**\n * @internal\n */\nexport async function getOrCreateInAppWalletConnector(client, connectorFactory, ecosystem) {\n  const key = stringify({\n    clientId: client.clientId,\n    ecosystem\n  });\n  if (connectorCache.has(key)) {\n    return connectorCache.get(key);\n  }\n  const connector = await connectorFactory(client);\n  connectorCache.set(key, connector);\n  return connector;\n}\n/**\n * @internal\n */\nexport function createInAppWallet(args) {\n  const {\n    createOptions: _createOptions,\n    connectorFactory,\n    ecosystem\n  } = args;\n  const walletId = ecosystem ? ecosystem.id : \"inApp\";\n  const emitter = createWalletEmitter();\n  let createOptions = _createOptions;\n  let account = undefined;\n  let chain = undefined;\n  let client;\n  return {\n    id: walletId,\n    subscribe: emitter.subscribe,\n    getChain() {\n      if (!chain) {\n        return undefined;\n      }\n      chain = getCachedChainIfExists(chain.id) || chain;\n      return chain;\n    },\n    getConfig: () => createOptions,\n    getAccount: () => account,\n    autoConnect: async options => {\n      const {\n        autoConnectInAppWallet\n      } = await import(\"./index.js\");\n      const connector = await getOrCreateInAppWalletConnector(options.client, connectorFactory, ecosystem);\n      if (ecosystem) {\n        const ecosystemOptions = await getEcosystemInfo(ecosystem.id);\n        const smartAccountOptions = ecosystemOptions?.smartAccountOptions;\n        if (smartAccountOptions) {\n          const {\n            defaultChainId\n          } = ecosystemOptions.smartAccountOptions;\n          const preferredChain = options.chain ?? (defaultChainId ? getCachedChain(defaultChainId) : undefined);\n          if (!preferredChain) {\n            throw new Error(`A chain must be provided either via 'chain' in connect options or 'defaultChainId' in ecosystem configuration. Please pass it via connect() or update the ecosystem configuration.`);\n          }\n          createOptions = {\n            ...createOptions,\n            smartAccount: {\n              chain: preferredChain,\n              sponsorGas: smartAccountOptions.sponsorGas,\n              factoryAddress: smartAccountOptions.accountFactoryAddress\n            }\n          };\n        }\n      }\n      const [connectedAccount, connectedChain] = await autoConnectInAppWallet(options, createOptions, connector);\n      // set the states\n      client = options.client;\n      account = connectedAccount;\n      chain = connectedChain;\n      trackConnect({\n        client: options.client,\n        ecosystem,\n        walletType: walletId,\n        walletAddress: account.address,\n        chainId: chain.id\n      });\n      // return only the account\n      return account;\n    },\n    connect: async options => {\n      const {\n        connectInAppWallet\n      } = await import(\"./index.js\");\n      const connector = await getOrCreateInAppWalletConnector(options.client, connectorFactory, ecosystem);\n      if (ecosystem) {\n        const ecosystemOptions = await getEcosystemInfo(ecosystem.id);\n        const smartAccountOptions = ecosystemOptions?.smartAccountOptions;\n        if (smartAccountOptions) {\n          const {\n            defaultChainId\n          } = ecosystemOptions.smartAccountOptions;\n          const preferredChain = options.chain ?? (defaultChainId ? getCachedChain(defaultChainId) : undefined);\n          if (!preferredChain) {\n            throw new Error(`A chain must be provided either via 'chain' in connect options or 'defaultChainId' in ecosystem configuration. Please pass it via connect() or update the ecosystem configuration.`);\n          }\n          createOptions = {\n            ...createOptions,\n            smartAccount: {\n              chain: preferredChain,\n              sponsorGas: smartAccountOptions.sponsorGas,\n              factoryAddress: smartAccountOptions.accountFactoryAddress\n            }\n          };\n        }\n      }\n      const [connectedAccount, connectedChain] = await connectInAppWallet(options, createOptions, connector);\n      // set the states\n      client = options.client;\n      account = connectedAccount;\n      chain = connectedChain;\n      trackConnect({\n        client: options.client,\n        ecosystem,\n        walletType: walletId,\n        walletAddress: account.address,\n        chainId: chain.id\n      });\n      // return only the account\n      return account;\n    },\n    disconnect: async () => {\n      // If no client is assigned, we should be fine just unsetting the states\n      if (client) {\n        const connector = await getOrCreateInAppWalletConnector(client, connectorFactory, ecosystem);\n        const result = await connector.logout();\n        if (!result.success) {\n          throw new Error(\"Failed to logout\");\n        }\n      }\n      account = undefined;\n      chain = undefined;\n      emitter.emit(\"disconnect\", undefined);\n    },\n    switchChain: async newChain => {\n      if (createOptions?.smartAccount && client && account) {\n        // if account abstraction is enabled, reconnect to smart account on the new chain\n        const {\n          autoConnectInAppWallet\n        } = await import(\"./index.js\");\n        const connector = await getOrCreateInAppWalletConnector(client, connectorFactory, ecosystem);\n        if (ecosystem) {\n          const ecosystemOptions = await getEcosystemInfo(ecosystem.id);\n          const smartAccountOptions = ecosystemOptions?.smartAccountOptions;\n          if (smartAccountOptions) {\n            createOptions = {\n              ...createOptions,\n              smartAccount: {\n                chain: newChain,\n                sponsorGas: smartAccountOptions.sponsorGas,\n                factoryAddress: smartAccountOptions.accountFactoryAddress\n              }\n            };\n          }\n        }\n        const [connectedAccount, connectedChain] = await autoConnectInAppWallet({\n          chain: newChain,\n          client\n        }, createOptions, connector);\n        account = connectedAccount;\n        chain = connectedChain;\n      } else {\n        // if not, simply set the new chain\n        chain = newChain;\n      }\n      emitter.emit(\"chainChanged\", newChain);\n    }\n  };\n}\n//# sourceMappingURL=in-app-core.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}