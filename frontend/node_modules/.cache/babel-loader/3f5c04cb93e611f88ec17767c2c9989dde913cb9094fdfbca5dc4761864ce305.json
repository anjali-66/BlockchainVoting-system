{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport styled from \"@emotion/styled\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useMemo, useState } from \"react\";\nimport { webLocalStorage } from \"../../../../utils/storage/webStorage.js\";\nimport { getEcosystemInfo } from \"../../../../wallets/ecosystem/get-ecosystem-wallet-auth-options.js\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { linkProfile } from \"../../../../wallets/in-app/web/lib/auth/index.js\";\nimport { loginWithOauthRedirect } from \"../../../../wallets/in-app/web/lib/auth/oauth.js\";\nimport { socialAuthOptions } from \"../../../../wallets/types.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { fontSize, iconSize, spacing } from \"../../../core/design-system/index.js\";\nimport { setLastAuthProvider } from \"../../../core/utils/storage.js\";\nimport { socialIcons } from \"../../../core/utils/walletIcon.js\";\nimport { useSetSelectionData } from \"../../providers/wallet-ui-states-provider.js\";\nimport { WalletTypeRowButton } from \"../../ui/ConnectWallet/WalletTypeRowButton.js\";\nimport { EmailIcon } from \"../../ui/ConnectWallet/icons/EmailIcon.js\";\nimport { FingerPrintIcon } from \"../../ui/ConnectWallet/icons/FingerPrintIcon.js\";\nimport { GuestIcon } from \"../../ui/ConnectWallet/icons/GuestIcon.js\";\nimport { OutlineWalletIcon } from \"../../ui/ConnectWallet/icons/OutlineWalletIcon.js\";\nimport { PhoneIcon } from \"../../ui/ConnectWallet/icons/PhoneIcon.js\";\nimport { Img } from \"../../ui/components/Img.js\";\nimport { Spacer } from \"../../ui/components/Spacer.js\";\nimport { TextDivider } from \"../../ui/components/TextDivider.js\";\nimport { Container } from \"../../ui/components/basic.js\";\nimport { Button } from \"../../ui/components/buttons.js\";\nimport { InputSelectionUI } from \"../in-app/InputSelectionUI.js\";\nimport { validateEmail } from \"../in-app/validateEmail.js\";\nimport { LoadingScreen } from \"./LoadingScreen.js\";\nimport { openOauthSignInWindow } from \"./oauthSignIn.js\";\nconst defaultAuthOptions = [\"email\", \"phone\", \"google\", \"apple\", \"facebook\", \"passkey\"];\n/**\n * @internal\n */\nexport const ConnectWalletSocialOptions = props => {\n  const locale = props.locale;\n  const {\n    wallet\n  } = props;\n  const setData = useSetSelectionData();\n  const themeObj = useCustomTheme();\n  const optionalImageMetadata = useMemo(() => props.wallet.id === \"inApp\" ? props.wallet.getConfig()?.metadata?.image : undefined, [props.wallet]);\n  const loginMethodsLabel = {\n    google: locale.signInWithGoogle,\n    facebook: locale.signInWithFacebook,\n    apple: locale.signInWithApple,\n    discord: locale.signInWithDiscord,\n    line: \"LINE\",\n    x: \"X\",\n    coinbase: \"Coinbase\",\n    farcaster: \"Farcaster\",\n    telegram: \"Telegram\",\n    github: \"GitHub\",\n    twitch: \"Twitch\",\n    steam: \"Steam\"\n  };\n  const {\n    data: ecosystemAuthOptions,\n    isLoading\n  } = useQuery({\n    queryKey: [\"auth-options\", wallet.id],\n    queryFn: async () => {\n      if (isEcosystemWallet(wallet)) {\n        const options = await getEcosystemInfo(wallet.id);\n        return options?.authOptions ?? null;\n      }\n      return null;\n    },\n    enabled: isEcosystemWallet(wallet),\n    retry: false\n  });\n  const authOptions = isEcosystemWallet(wallet) ? ecosystemAuthOptions ?? defaultAuthOptions : wallet.getConfig()?.auth?.options ?? defaultAuthOptions;\n  const emailIndex = authOptions.indexOf(\"email\");\n  const isEmailEnabled = emailIndex !== -1;\n  const phoneIndex = authOptions.indexOf(\"phone\");\n  const isPhoneEnabled = phoneIndex !== -1;\n  const socialLogins = authOptions.filter(o => socialAuthOptions.includes(o));\n  const columnCount = useMemo(() => {\n    switch (socialLogins.length) {\n      case 7:\n        return 4;\n      case 6:\n        return 4;\n      default:\n        return 5;\n    }\n  }, [socialLogins.length]);\n  const socialLoginColumns = useMemo(() => {\n    return Array.from({\n      length: Math.ceil(socialLogins.length / columnCount)\n    }, (_, i) => socialLogins.slice(i * columnCount, (i + 1) * columnCount));\n  }, [socialLogins, columnCount]);\n  const [manualInputMode, setManualInputMode] = useState(null);\n  const inputMode = useMemo(() => {\n    if (manualInputMode) {\n      return manualInputMode;\n    }\n    if (isEmailEnabled && isPhoneEnabled) {\n      return emailIndex < phoneIndex ? \"email\" : \"phone\";\n    }\n    if (isEmailEnabled) {\n      return \"email\";\n    }\n    if (isPhoneEnabled) {\n      return \"phone\";\n    }\n    return \"none\";\n  }, [isEmailEnabled, isPhoneEnabled, emailIndex, phoneIndex, manualInputMode]);\n  if (isEcosystemWallet(wallet) && isLoading) {\n    return _jsx(LoadingScreen, {});\n  }\n  const passKeyEnabled = authOptions.includes(\"passkey\");\n  const guestEnabled = authOptions.includes(\"guest\");\n  const siweEnabled = authOptions.includes(\"wallet\");\n  const placeholder = inputMode === \"email\" ? locale.emailPlaceholder : locale.phonePlaceholder;\n  const emptyErrorMessage = inputMode === \"email\" ? locale.emailRequired : locale.phoneRequired;\n  let type = \"text\";\n  if (inputMode === \"email\") {\n    type = \"email\";\n  } else if (inputMode === \"phone\") {\n    type = \"tel\";\n  }\n  const hasSocialLogins = socialLogins.length > 0;\n  const ecosystemInfo = isEcosystemWallet(wallet) ? {\n    id: wallet.id,\n    partnerId: wallet.getConfig()?.partnerId\n  } : undefined;\n  const handleGuestLogin = async () => {\n    const connectOptions = {\n      client: props.client,\n      ecosystem: ecosystemInfo,\n      strategy: \"guest\",\n      chain: props.chain\n    };\n    const connectPromise = (async () => {\n      const result = await wallet.connect(connectOptions);\n      setLastAuthProvider(\"guest\", webLocalStorage);\n      return result;\n    })();\n    setData({\n      guestLogin: {\n        connectionPromise: connectPromise\n      }\n    });\n    props.select(); // show Connect UI\n  };\n  // Need to trigger login on button click to avoid popup from being blocked\n  const handleSocialLogin = async strategy => {\n    const walletConfig = wallet.getConfig();\n    const authMode = walletConfig?.auth?.mode ?? \"popup\";\n    if (walletConfig && \"auth\" in walletConfig && authMode !== \"popup\" && !props.isLinking // We do not support redirects for linking\n    ) {\n      return loginWithOauthRedirect({\n        authOption: strategy,\n        client: props.client,\n        ecosystem: ecosystemInfo,\n        redirectUrl: walletConfig?.auth?.redirectUrl,\n        mode: authMode\n      });\n    }\n    try {\n      const socialLoginWindow = openOauthSignInWindow({\n        authOption: strategy,\n        themeObj,\n        client: props.client,\n        ecosystem: ecosystemInfo\n      });\n      if (!socialLoginWindow) {\n        throw new Error(\"Failed to open login window\");\n      }\n      const connectOptions = {\n        chain: props.chain,\n        client: props.client,\n        strategy,\n        openedWindow: socialLoginWindow,\n        closeOpenedWindow: openedWindow => {\n          openedWindow.close();\n        },\n        ecosystem: ecosystemInfo\n      };\n      const connectPromise = (() => {\n        if (props.isLinking) {\n          if (wallet.id !== \"inApp\" && !isEcosystemWallet(wallet)) {\n            throw new Error(\"Only in-app wallets support multi-auth\");\n          }\n          return linkProfile(connectOptions);\n        }\n        const connectPromise = wallet.connect(connectOptions);\n        setLastAuthProvider(strategy, webLocalStorage);\n        return connectPromise;\n      })();\n      setData({\n        socialLogin: {\n          type: strategy,\n          connectionPromise: connectPromise\n        }\n      });\n      props.select(); // show Connect UI\n      // Note: do not call done() here, it will be called SocialLogin component\n      // we simply trigger the connect and save promise here - its resolution is handled in SocialLogin\n    } catch (e) {\n      console.error(`Error signing in with ${strategy}`, e);\n    }\n  };\n  function handlePassKeyLogin() {\n    setData({\n      passkeyLogin: true\n    });\n    props.select();\n  }\n  function handleWalletLogin() {\n    setData({\n      walletLogin: {\n        linking: props.isLinking || false\n      }\n    });\n    props.select();\n  }\n  const showOnlyIcons = socialLogins.length > 2;\n  return _jsxs(Container, {\n    flex: \"column\",\n    gap: \"md\",\n    style: {\n      position: \"relative\"\n    },\n    children: [optionalImageMetadata && _jsxs(_Fragment, {\n      children: [_jsx(Img, {\n        client: props.client,\n        src: optionalImageMetadata.src,\n        alt: optionalImageMetadata.alt,\n        width: `${optionalImageMetadata.width}`,\n        height: `${optionalImageMetadata.height}`,\n        style: {\n          margin: \"auto\"\n        }\n      }), _jsx(Spacer, {\n        y: \"xxs\"\n      })]\n    }), hasSocialLogins && _jsx(Container, {\n      flex: \"column\",\n      gap: socialLogins.length > 4 ? \"xs\" : \"sm\",\n      children: socialLoginColumns.map(column => _jsx(SocialButtonRow, {\n        children: column.map(loginMethod => {\n          const imgIconSize = (() => {\n            if (!showOnlyIcons) {\n              return iconSize.md;\n            }\n            if (socialLogins.length > 4) {\n              return iconSize.md;\n            }\n            return iconSize.lg;\n          })();\n          return _jsxs(SocialButton, {\n            \"aria-label\": `Login with ${loginMethod}`,\n            \"data-variant\": showOnlyIcons ? \"icon\" : \"full\",\n            variant: \"outline\",\n            disabled: props.disabled,\n            onClick: () => {\n              handleSocialLogin(loginMethod);\n            },\n            style: {\n              flexGrow: socialLogins.length < 7 ? 1 : 0\n            },\n            children: [_jsx(Img, {\n              src: socialIcons[loginMethod],\n              width: imgIconSize,\n              height: imgIconSize,\n              client: props.client\n            }), !showOnlyIcons && `${socialLogins.length === 1 ? \"Continue with \" : \"\"}${loginMethodsLabel[loginMethod]}`]\n          }, loginMethod);\n        })\n      }, column[0]))\n    }), props.size === \"wide\" && hasSocialLogins && (isEmailEnabled || isPhoneEnabled) && _jsx(TextDivider, {\n      text: locale.or\n    }), isEmailEnabled && (inputMode === \"email\" ? _jsx(InputSelectionUI, {\n      type: type,\n      onSelect: value => {\n        setData({\n          emailLogin: value\n        });\n        props.select();\n      },\n      placeholder: placeholder,\n      name: \"email\",\n      errorMessage: input => {\n        const isValidEmail = validateEmail(input.toLowerCase());\n        if (!isValidEmail) {\n          return locale.invalidEmail;\n        }\n        return undefined;\n      },\n      disabled: props.disabled,\n      emptyErrorMessage: emptyErrorMessage,\n      submitButtonText: locale.submitEmail\n    }) : _jsx(WalletTypeRowButton, {\n      client: props.client,\n      icon: EmailIcon,\n      onClick: () => {\n        setManualInputMode(\"email\");\n      },\n      title: locale.emailPlaceholder,\n      disabled: props.disabled\n    })), isPhoneEnabled && (inputMode === \"phone\" ? _jsx(InputSelectionUI, {\n      format: \"phone\",\n      type: type,\n      onSelect: value => {\n        // removes white spaces and special characters\n        setData({\n          phoneLogin: value.replace(/[-\\(\\) ]/g, \"\")\n        });\n        props.select();\n      },\n      placeholder: placeholder,\n      name: \"phone\",\n      errorMessage: _input => {\n        // removes white spaces and special characters\n        const input = _input.replace(/[-\\(\\) ]/g, \"\");\n        const isPhone = /^[0-9]+$/.test(input);\n        if (!isPhone && isPhoneEnabled) {\n          return locale.invalidPhone;\n        }\n        return undefined;\n      },\n      disabled: props.disabled,\n      emptyErrorMessage: emptyErrorMessage,\n      submitButtonText: locale.submitEmail,\n      defaultSmsCountryCode: wallet.getConfig()?.auth?.defaultSmsCountryCode\n    }) : _jsx(WalletTypeRowButton, {\n      client: props.client,\n      icon: PhoneIcon,\n      onClick: () => {\n        setManualInputMode(\"phone\");\n      },\n      title: locale.phonePlaceholder,\n      disabled: props.disabled\n    })), passKeyEnabled && _jsx(WalletTypeRowButton, {\n      client: props.client,\n      icon: FingerPrintIcon,\n      onClick: () => {\n        handlePassKeyLogin();\n      },\n      title: locale.passkey,\n      disabled: props.disabled\n    }), siweEnabled && !props.isLinking && _jsx(WalletTypeRowButton, {\n      client: props.client,\n      icon: OutlineWalletIcon,\n      onClick: () => {\n        handleWalletLogin();\n      },\n      title: locale.signInWithWallet\n    }), guestEnabled && _jsx(WalletTypeRowButton, {\n      client: props.client,\n      icon: GuestIcon,\n      onClick: () => {\n        handleGuestLogin();\n      },\n      title: locale.loginAsGuest,\n      disabled: props.disabled\n    }), props.isLinking && _jsx(WalletTypeRowButton, {\n      client: props.client,\n      icon: OutlineWalletIcon,\n      onClick: () => {\n        handleWalletLogin();\n      },\n      title: locale.linkWallet\n    })]\n  });\n};\nconst SocialButtonRow = props => _jsx(Container, {\n  flex: \"row\",\n  center: \"x\",\n  gap: props.children.length > 4 ? \"xs\" : \"sm\",\n  style: {\n    justifyContent: \"center\",\n    display: \"flex\",\n    ...{\n      \"& > *\": {\n        flexBasis: `${100 / props.children.length}%`,\n        maxWidth: `${100 / props.children.length}%`\n      }\n    }\n  },\n  children: props.children\n});\nconst SocialButton = /* @__PURE__ */styled(Button)({\n  \"&[data-variant='full']\": {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    padding: spacing.md,\n    gap: spacing.sm,\n    fontSize: fontSize.md,\n    fontWeight: 500,\n    transition: \"background-color 0.2s ease\",\n    \"&:active\": {\n      boxShadow: \"none\"\n    }\n  },\n  \"&[data-variant='icon']\": {\n    padding: spacing.sm\n  }\n});\n//# sourceMappingURL=ConnectWalletSocialOptions.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}