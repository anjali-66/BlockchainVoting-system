{"ast":null,"code":"import { eth_getBlockByNumber } from \"../rpc/actions/eth_getBlockByNumber.js\";\nimport { eth_maxPriorityFeePerGas } from \"../rpc/actions/eth_maxPriorityFeePerGas.js\";\nimport { getRpcClient } from \"../rpc/rpc.js\";\nimport { resolvePromisedValue } from \"../utils/promise/resolve-promised-value.js\";\nimport { toUnits } from \"../utils/units.js\";\nimport { getGasPrice } from \"./get-gas-price.js\";\nimport { roundUpGas } from \"./op-gas-fee-reducer.js\";\n// for these chains - always force pre eip1559 transactions\nconst FORCE_GAS_PRICE_CHAIN_IDS = [78600,\n// Vanar testnet\n2040,\n// Vanar mainnet\n248,\n// Oasys Mainnet\n9372,\n// Oasys Testnet\n841,\n// Taraxa Mainnet\n842,\n// Taraxa Testnet\n2016,\n// MainnetZ Mainnet\n9768,\n// MainnetZ Testnet\n2442,\n// Polygon zkEVM Cardona Testnet\n1942999413 // Humanity Testnet\n];\n/**\n *\n * @internal\n */\nexport async function getGasOverridesForTransaction(transaction) {\n  // first check for explicit values\n  const [maxFeePerGas, maxPriorityFeePerGas, gasPrice] = await Promise.all([resolvePromisedValue(transaction.maxFeePerGas), resolvePromisedValue(transaction.maxPriorityFeePerGas), resolvePromisedValue(transaction.gasPrice)]);\n  // Exit early if the user explicitly provided enough options\n  if (maxFeePerGas !== undefined && maxPriorityFeePerGas !== undefined) {\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    };\n  }\n  if (gasPrice) {\n    return {\n      gasPrice\n    };\n  }\n  // If we don't have enough explicit values, get defaults\n  const defaultGasOverrides = await getDefaultGasOverrides(transaction.client, transaction.chain);\n  if (transaction.chain.experimental?.increaseZeroByteCount) {\n    // otherwise adjust each value\n    if (defaultGasOverrides.gasPrice) {\n      return {\n        gasPrice: roundUpGas(defaultGasOverrides.gasPrice)\n      };\n    }\n    return {\n      maxFeePerGas: maxFeePerGas ?? roundUpGas(defaultGasOverrides.maxFeePerGas ?? 0n),\n      maxPriorityFeePerGas: maxPriorityFeePerGas ?? roundUpGas(defaultGasOverrides.maxPriorityFeePerGas ?? 0n)\n    };\n  }\n  // return as is\n  if (defaultGasOverrides.gasPrice) {\n    return defaultGasOverrides;\n  }\n  // Still check for explicit values in case one is provided and not the other\n  return {\n    maxFeePerGas: maxFeePerGas ?? defaultGasOverrides.maxFeePerGas,\n    maxPriorityFeePerGas: maxPriorityFeePerGas ?? defaultGasOverrides.maxPriorityFeePerGas\n  };\n}\n/**\n * Retrieves the default gas overrides for a given client and chain ID.\n * If the fee data contains both maxFeePerGas and maxPriorityFeePerGas, it returns an object with those values.\n * Otherwise, it returns an object with the gasPrice obtained from the client and chain ID.\n * @param client - The ThirdwebClient instance.\n * @param chain - The chain ID.\n * @returns An object containing the default gas overrides.\n * @internal\n */\nexport async function getDefaultGasOverrides(client, chain) {\n  // if chain is in the force gas price list, always use gas price\n  if (!FORCE_GAS_PRICE_CHAIN_IDS.includes(chain.id)) {\n    const feeData = await getDynamicFeeData(client, chain);\n    if (feeData.maxFeePerGas !== null && feeData.maxPriorityFeePerGas !== null) {\n      return {\n        maxFeePerGas: feeData.maxFeePerGas,\n        maxPriorityFeePerGas: feeData.maxPriorityFeePerGas\n      };\n    }\n  }\n  return {\n    gasPrice: await getGasPrice({\n      client,\n      chain,\n      percentMultiplier: 10\n    })\n  };\n}\n/**\n * Retrieves dynamic fee data for a given chain.\n * @param client - The Thirdweb client.\n * @param chain - The chain ID.\n * @returns A promise that resolves to the fee data.\n * @internal\n */\nasync function getDynamicFeeData(client, chain, percentMultiplier = 10) {\n  let maxFeePerGas = null;\n  let maxPriorityFeePerGas_ = null;\n  const rpcRequest = getRpcClient({\n    client,\n    chain\n  });\n  const [block, maxPriorityFeePerGas] = await Promise.all([eth_getBlockByNumber(rpcRequest, {\n    blockTag: \"latest\"\n  }), eth_maxPriorityFeePerGas(rpcRequest).catch(() => null)]);\n  const baseBlockFee = block?.baseFeePerGas ?? 0n;\n  const chainId = chain.id;\n  // flag chain testnet & flag chain\n  if (chainId === 220 || chainId === 1220) {\n    // these does not support eip-1559, for some reason even though `eth_maxPriorityFeePerGas` is available?!?\n    // return null because otherwise TX break\n    return {\n      maxFeePerGas: null,\n      maxPriorityFeePerGas: null\n    };\n    // mumbai & polygon\n  }\n  if (chainId === 80002 || chainId === 137) {\n    // for polygon, get fee data from gas station\n    maxPriorityFeePerGas_ = await getPolygonGasPriorityFee(chainId);\n  } else if (maxPriorityFeePerGas !== null) {\n    // prioritize fee from eth_maxPriorityFeePerGas\n    maxPriorityFeePerGas_ = maxPriorityFeePerGas;\n  }\n  if (maxPriorityFeePerGas_ == null) {\n    // chain does not support eip-1559, return null for both\n    return {\n      maxFeePerGas: null,\n      maxPriorityFeePerGas: null\n    };\n  }\n  // add 10% tip to maxPriorityFeePerGas for faster processing\n  maxPriorityFeePerGas_ = getPreferredPriorityFee(maxPriorityFeePerGas_, percentMultiplier);\n  // eip-1559 formula, doubling the base fee ensures that the tx can be included in the next 6 blocks no matter how busy the network is\n  // good article on the subject: https://www.blocknative.com/blog/eip-1559-fees\n  maxFeePerGas = baseBlockFee * 2n + maxPriorityFeePerGas_;\n  // special cased for Celo gas fees\n  if (chainId === 42220 || chainId === 44787 || chainId === 62320) {\n    maxPriorityFeePerGas_ = maxFeePerGas;\n  }\n  return {\n    maxFeePerGas,\n    maxPriorityFeePerGas: maxPriorityFeePerGas_\n  };\n}\n/**\n * Calculates the preferred priority fee based on the default priority fee per gas and a percent multiplier.\n * @param defaultPriorityFeePerGas - The default priority fee per gas.\n * @param percentMultiplier - The percent multiplier to calculate the extra tip. Default is 10.\n * @returns The total priority fee including the extra tip.\n * @internal\n */\nfunction getPreferredPriorityFee(defaultPriorityFeePerGas, percentMultiplier = 10) {\n  const extraTip = defaultPriorityFeePerGas / BigInt(100) * BigInt(percentMultiplier);\n  const totalPriorityFee = defaultPriorityFeePerGas + extraTip;\n  return totalPriorityFee;\n}\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId) {\n  switch (chainId) {\n    case 137:\n      return \"https://gasstation.polygon.technology/v2\";\n    case 80002:\n      return \"https://gasstation-testnet.polygon.technology/v2\";\n  }\n}\nconst MIN_POLYGON_GAS_PRICE = 31n; // 31 gwei\n/**\n *\n * @returns The gas price\n * @internal\n */\nasync function getPolygonGasPriorityFee(chainId) {\n  const gasStationUrl = getGasStationUrl(chainId);\n  try {\n    const data = await (await fetch(gasStationUrl)).json();\n    // take the standard speed here, SDK options will define the extra tip\n    const priorityFee = data.fast.maxPriorityFee;\n    if (priorityFee > 0) {\n      const fixedFee = Number.parseFloat(priorityFee).toFixed(9);\n      return toUnits(fixedFee, 9);\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return MIN_POLYGON_GAS_PRICE;\n}\n//# sourceMappingURL=fee-data.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}