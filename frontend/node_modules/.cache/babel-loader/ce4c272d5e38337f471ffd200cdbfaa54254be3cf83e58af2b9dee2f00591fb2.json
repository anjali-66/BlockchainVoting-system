{"ast":null,"code":"import { fetchContractMetadata } from \"../../../utils/contract/fetchContractMetadata.js\";\nimport { contractURI } from \"../__generated__/IContractMetadata/read/contractURI.js\";\nimport { name } from \"./name.js\";\nimport { symbol } from \"./symbol.js\";\nexport { isContractURISupported as isGetContractMetadataSupported } from \"../__generated__/IContractMetadata/read/contractURI.js\";\n/**\n * Retrieves the contract metadata including name and symbol.\n * @param options The transaction options.\n * @returns A promise that resolves to an object containing the resolved metadata, name, and symbol.\n * @extension COMMON\n * @example\n * ```ts\n * import { getContractMetadata } from \"thirdweb/extensions/common\";\n * const metadata = await getContractMetadata({ contract });\n * ```\n */\nexport async function getContractMetadata(options) {\n  const [resolvedMetadata, resolvedName, resolvedSymbol] = await Promise.all([contractURI(options).then(uri => {\n    if (uri) {\n      return fetchContractMetadata({\n        client: options.contract.client,\n        uri\n      });\n    }\n    return null;\n  }).catch(() => null), name(options).catch(() => null), symbol(options).catch(() => null)]);\n  // TODO: basic parsing?\n  return {\n    ...resolvedMetadata,\n    name: resolvedMetadata?.name ?? resolvedName,\n    symbol: resolvedMetadata?.symbol ?? resolvedSymbol\n  };\n}\n//# sourceMappingURL=getContractMetadata.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}