{"ast":null,"code":"var _jsxFileName = \"/Users/sharmaanjali/blockchain-voting-system/frontend/src/components/ConnectWallet.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { ethers } from 'ethers';\n\n// const ConnectWallet = ({ onWalletConnected }) => {\n//   const [account, setAccount] = useState('');\n//   const [error, setError] = useState('');\n//   const [isConnecting, setIsConnecting] = useState(false);\n\n//   const connectWallet = async () => {\n//     setIsConnecting(true);\n//     setError('');\n\n//     try {\n//       if (!window.ethereum) {\n//         throw new Error('Please install MetaMask!');\n//       }\n\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//       const account = accounts[0];\n//       setAccount(account);\n//       onWalletConnected(provider, account);\n\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setIsConnecting(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {error && <div className=\"error\">{error}</div>}\n//       {!account ? (\n//         <button onClick={connectWallet} disabled={isConnecting}>\n//           {isConnecting ? 'Connecting...' : 'Connect Wallet'}\n//         </button>\n//       ) : (\n//         <p>Connected: {account}</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ConnectWallet;\n\nimport React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectWallet = ({\n  onWalletConnected\n}) => {\n  _s();\n  const [account, setAccount] = useState('');\n  const [error, setError] = useState('');\n  const [isConnecting, setIsConnecting] = useState(false);\n  const connectWallet = async () => {\n    setIsConnecting(true);\n    setError('');\n    try {\n      if (!window.ethereum) {\n        throw new Error('MetaMask is not installed. Please install MetaMask!');\n      }\n\n      // Request MetaMask to connect\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.send('eth_requestAccounts', []);\n      const account = accounts[0];\n\n      // Update state\n      setAccount(account);\n      onWalletConnected(provider, account);\n\n      // Handle chain switching (Optional)\n      const network = await provider.getNetwork();\n      console.log(`Connected to network: ${network.name} (${network.chainId})`);\n    } catch (err) {\n      console.error('Error connecting wallet:', err);\n      setError(err.message);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this), !account ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      disabled: isConnecting,\n      className: \"connect-btn\",\n      children: isConnecting ? 'Connecting...' : 'Connect Wallet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(ConnectWallet, \"UFJMgwOkgSRpiDnSX4PpNDc5gEM=\");\n_c = ConnectWallet;\nexport default ConnectWallet;\nvar _c;\n$RefreshReg$(_c, \"ConnectWallet\");","map":{"version":3,"names":["React","useState","ethers","jsxDEV","_jsxDEV","ConnectWallet","onWalletConnected","_s","account","setAccount","error","setError","isConnecting","setIsConnecting","connectWallet","window","ethereum","Error","provider","providers","Web3Provider","accounts","send","network","getNetwork","console","log","name","chainId","err","message","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/sharmaanjali/blockchain-voting-system/frontend/src/components/ConnectWallet.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { ethers } from 'ethers';\n\n// const ConnectWallet = ({ onWalletConnected }) => {\n//   const [account, setAccount] = useState('');\n//   const [error, setError] = useState('');\n//   const [isConnecting, setIsConnecting] = useState(false);\n\n//   const connectWallet = async () => {\n//     setIsConnecting(true);\n//     setError('');\n\n//     try {\n//       if (!window.ethereum) {\n//         throw new Error('Please install MetaMask!');\n//       }\n\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//       const account = accounts[0];\n//       setAccount(account);\n//       onWalletConnected(provider, account);\n\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setIsConnecting(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {error && <div className=\"error\">{error}</div>}\n//       {!account ? (\n//         <button onClick={connectWallet} disabled={isConnecting}>\n//           {isConnecting ? 'Connecting...' : 'Connect Wallet'}\n//         </button>\n//       ) : (\n//         <p>Connected: {account}</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ConnectWallet;\n\nimport React, { useState } from 'react';\nimport { ethers } from 'ethers';\n\nconst ConnectWallet = ({ onWalletConnected }) => {\n  const [account, setAccount] = useState('');\n  const [error, setError] = useState('');\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const connectWallet = async () => {\n    setIsConnecting(true);\n    setError('');\n\n    try {\n      if (!window.ethereum) {\n        throw new Error('MetaMask is not installed. Please install MetaMask!');\n      }\n\n      // Request MetaMask to connect\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.send('eth_requestAccounts', []);\n      const account = accounts[0];\n\n      // Update state\n      setAccount(account);\n      onWalletConnected(provider, account);\n\n      // Handle chain switching (Optional)\n      const network = await provider.getNetwork();\n      console.log(`Connected to network: ${network.name} (${network.chainId})`);\n\n    } catch (err) {\n      console.error('Error connecting wallet:', err);\n      setError(err.message);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  return (\n    <div>\n      {error && <div className=\"error\">{error}</div>}\n      {!account ? (\n        <button onClick={connectWallet} disabled={isConnecting} className=\"connect-btn\">\n          {isConnecting ? 'Connecting...' : 'Connect Wallet'}\n        </button>\n      ) : (\n        <p>Connected: {account}</p>\n      )}\n    </div>\n  );\n};\n\nexport default ConnectWallet;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChCD,eAAe,CAAC,IAAI,CAAC;IACrBF,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,IAAI,CAACI,MAAM,CAACC,QAAQ,EAAE;QACpB,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;MACxE;;MAEA;MACA,MAAMC,QAAQ,GAAG,IAAIhB,MAAM,CAACiB,SAAS,CAACC,YAAY,CAACL,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAMK,QAAQ,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;MAC/D,MAAMd,OAAO,GAAGa,QAAQ,CAAC,CAAC,CAAC;;MAE3B;MACAZ,UAAU,CAACD,OAAO,CAAC;MACnBF,iBAAiB,CAACY,QAAQ,EAAEV,OAAO,CAAC;;MAEpC;MACA,MAAMe,OAAO,GAAG,MAAML,QAAQ,CAACM,UAAU,CAAC,CAAC;MAC3CC,OAAO,CAACC,GAAG,CAAC,yBAAyBH,OAAO,CAACI,IAAI,KAAKJ,OAAO,CAACK,OAAO,GAAG,CAAC;IAE3E,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZJ,OAAO,CAACf,KAAK,CAAC,0BAA0B,EAAEmB,GAAG,CAAC;MAC9ClB,QAAQ,CAACkB,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRjB,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACET,OAAA;IAAA2B,QAAA,GACGrB,KAAK,iBAAIN,OAAA;MAAK4B,SAAS,EAAC,OAAO;MAAAD,QAAA,EAAErB;IAAK;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAC7C,CAAC5B,OAAO,gBACPJ,OAAA;MAAQiC,OAAO,EAAEvB,aAAc;MAACwB,QAAQ,EAAE1B,YAAa;MAACoB,SAAS,EAAC,aAAa;MAAAD,QAAA,EAC5EnB,YAAY,GAAG,eAAe,GAAG;IAAgB;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,gBAEThC,OAAA;MAAA2B,QAAA,GAAG,aAAW,EAACvB,OAAO;IAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAC3B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC7B,EAAA,CA/CIF,aAAa;AAAAkC,EAAA,GAAblC,aAAa;AAiDnB,eAAeA,aAAa;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}