{"ast":null,"code":"import { replaceEqualDeep } from \"@tanstack/react-query\";\n/** Forked from https://github.com/epoberezkin/fast-deep-equal */\n// biome-ignore lint/suspicious/noExplicitAny: This function by nature takes any object\nfunction deepEqual(a, b) {\n  if (a === b) return true;\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    if (a.constructor !== b.constructor) return false;\n    let length;\n    let i;\n    if (Array.isArray(a) && Array.isArray(b)) {\n      length = a.length;\n      if (length !== b.length) return false;\n      for (i = length; i-- !== 0;) if (!deepEqual(a[i], b[i])) return false;\n      return true;\n    }\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    const keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n    for (i = length; i-- !== 0;)\n    // biome-ignore lint/style/noNonNullAssertion: We know its there\n    if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    for (i = length; i-- !== 0;) {\n      const key = keys[i];\n      if (key && !deepEqual(a[key], b[key])) return false;\n    }\n    return true;\n  }\n  // true if both NaN, false otherwise\n  // biome-ignore lint/suspicious/noSelfCompare: <explanation>\n  return a !== a && b !== b;\n}\nexport function structuralSharing(oldData, newData) {\n  if (deepEqual(oldData, newData)) {\n    return oldData;\n  }\n  return replaceEqualDeep(oldData, newData);\n}\n//# sourceMappingURL=structuralSharing.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}