{"ast":null,"code":"import { useQuery } from \"@tanstack/react-query\";\nimport { waitForReceipt } from \"../../../../transaction/actions/wait-for-tx-receipt.js\";\n/**\n * A hook to wait for a transaction receipt.\n * @param options - The options for waiting for a transaction receipt.\n * @returns a query object.\n * @example\n * ```jsx\n * import { useWaitForReceipt } from \"thirdweb/react\";\n * const { data: receipt, isLoading } = useWaitForReceipt({client, chain, transactionHash});\n * ```\n * @transaction\n */\nexport function useWaitForReceipt(options) {\n  return useQuery({\n    queryKey: [\"waitForReceipt\",\n    // TODO: here chain can be undfined so we go to a `-1` chain but this feels wrong\n    options?.chain.id || -1, options?.transactionHash],\n    queryFn: async () => {\n      if (!options?.transactionHash) {\n        throw new Error(\"No transaction hash or user op hash provided\");\n      }\n      return waitForReceipt(options);\n    },\n    enabled: !!options?.transactionHash,\n    retry: false\n  });\n}\n//# sourceMappingURL=useWaitForReceipt.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}