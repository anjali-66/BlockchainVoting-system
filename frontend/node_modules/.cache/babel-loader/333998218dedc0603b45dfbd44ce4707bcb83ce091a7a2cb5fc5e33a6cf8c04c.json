{"ast":null,"code":"import \"@tanstack/react-query\";\nimport { getNFT as getNFT721 } from \"../../../../../extensions/erc721/read/getNFT.js\";\nimport { getNFT as getNFT1155 } from \"../../../../../extensions/erc1155/read/getNFT.js\";\nimport { withCache } from \"../../../../../utils/promise/withCache.js\";\n/**\n * @internal\n */\nexport async function getNFTInfo(options) {\n  return withCache(async () => {\n    const nft = await Promise.allSettled([getNFT721(options), getNFT1155(options)]).then(([possibleNFT721, possibleNFT1155]) => {\n      // getNFT extension always return an NFT object\n      // so we need to check if the tokenURI exists\n      if (possibleNFT721.status === \"fulfilled\" && possibleNFT721.value.tokenURI) {\n        return possibleNFT721.value;\n      }\n      if (possibleNFT1155.status === \"fulfilled\" && possibleNFT1155.value.tokenURI) {\n        return possibleNFT1155.value;\n      }\n      throw new Error(\"Failed to load NFT metadata\");\n    });\n    return nft;\n  }, {\n    cacheKey: `nft_info:${options.contract.chain.id}:${options.contract.address}:${options.tokenId.toString()}`,\n    cacheTime: 15 * 60 * 1000\n  });\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}