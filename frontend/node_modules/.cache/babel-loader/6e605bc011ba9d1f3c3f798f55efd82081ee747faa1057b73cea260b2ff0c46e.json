{"ast":null,"code":"import { formatLog } from \"viem\";\nimport { numberToHex } from \"../../utils/encoding/hex.js\";\n/**\n * Retrieves logs from the Ethereum blockchain based on the specified parameters.\n * @param request - The EIP1193 request function.\n * @param params - The parameters for retrieving logs.\n * @returns A promise that resolves to the retrieved logs.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_getLogs } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const logs = await eth_getLogs(rpcRequest, {\n *  address: \"0x...\",\n *  fromBlock: 123456n,\n *  toBlock: 123456n,\n * });\n * ```\n */\nexport async function eth_getLogs(request, params = {}) {\n  const topics = params.topics ?? [];\n  let logs;\n  // in the case we have a blockHash\n  if (params.blockHash) {\n    const param = {\n      topics,\n      blockHash: params.blockHash\n    };\n    if (params.address) {\n      param.address = params.address;\n    }\n    logs = await request({\n      method: \"eth_getLogs\",\n      params: [param]\n    });\n  }\n  // otherwise\n  else {\n    const param = {\n      topics\n    };\n    if (params.address) {\n      param.address = params.address;\n    }\n    if (params.fromBlock) {\n      param.fromBlock = typeof params.fromBlock === \"bigint\" ? numberToHex(params.fromBlock) : params.fromBlock;\n    }\n    if (params.toBlock) {\n      param.toBlock = typeof params.toBlock === \"bigint\" ? numberToHex(params.toBlock) : params.toBlock;\n    }\n    logs = await request({\n      method: \"eth_getLogs\",\n      params: [param]\n    });\n  }\n  return logs.map(log => formatLog(log));\n}\n//# sourceMappingURL=eth_getLogs.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}