{"ast":null,"code":"var _jsxFileName = \"/Users/sharmaanjali/blockchain-voting-system/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import ConnectWallet from './components/ConnectWallet';\n// import VotingSystem from './components/Contract';\n\n// const App = () => {\n//   const [provider, setProvider] = useState(null);\n//   const [account, setAccount] = useState('');\n//   const [balance, setBalance] = useState('');\n\n//   const handleWalletConnected = async (provider, account) => {\n//     setProvider(provider);\n//     setAccount(account);\n\n//     try {\n//       const balance = await provider.getBalance(account);\n//       setBalance(ethers.formatEther(balance)); // Updated for ethers 6.x\n//     } catch (err) {\n//       console.error('Error fetching balance:', err);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (window.ethereum) {\n//       window.ethereum.on('accountsChanged', () => window.location.reload());\n//       window.ethereum.on('chainChanged', () => window.location.reload());\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener('accountsChanged', () => window.location.reload());\n//         window.ethereum.removeListener('chainChanged', () => window.location.reload());\n//       }\n//     };\n//   }, []);\n\n//   const disconnectWallet = () => {\n//     setProvider(null);\n//     setAccount('');\n//     setBalance('');\n//   };\n\n//   return (\n//     <div className=\"container mx-auto p-4\">\n//       <h1 className=\"text-2xl font-bold mb-4\">Ethereum Wallet</h1>\n//       {!account ? (\n//         <ConnectWallet onWalletConnected={handleWalletConnected} />\n//       ) : (\n//         <div>\n//           <p>Account: {account}</p>\n//           <p>Balance: {balance} ETH</p>\n//           <button \n//             onClick={disconnectWallet}\n//             className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded mt-2\"\n//           >\n//             Disconnect\n//           </button>\n//         </div>\n//       )}\n//       {account && (\n//     <VotingSystem provider={provider} account={account} />\n//   )}  \n\n//     </div>\n//   );\n// };\n\n// export default App;\n// import React, { useState } from 'react';\n// import { ethers } from 'ethers';\n\n// const ConnectWallet = ({ onWalletConnected }) => {\n//   const [error, setError] = useState('');\n//   const [isConnecting, setIsConnecting] = useState(false);\n\n//   const connectWallet = async () => {\n//     setIsConnecting(true);\n//     setError('');\n\n//     try {\n//       if (!window.ethereum) {\n//         throw new Error('MetaMask is not installed');\n//       }\n\n//       await window.ethereum.request({ method: 'eth_requestAccounts' });\n//       const provider = new ethers.BrowserProvider(window.ethereum);\n//       const signer = await provider.getSigner();\n//       const address = await signer.getAddress();\n\n//       onWalletConnected(provider, address);\n//     } catch (err) {\n//       setError(err.message);\n//     }\n//     setIsConnecting(false);\n//   };\n\n//   return (\n//     <div>\n//       {error && <div className=\"text-red-500 mb-2\">{error}</div>}\n//       <button\n//         onClick={connectWallet}\n//         disabled={isConnecting}\n//         className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//       >\n//         {isConnecting ? 'Connecting...' : 'Connect Wallet'}\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default ConnectWallet;\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport ConnectWallet from './components/ConnectWallet';\nimport VotingSystem from './components/Votingsystem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState('');\n  const [balance, setBalance] = useState('');\n  const handleWalletConnected = async (provider, account) => {\n    setProvider(provider);\n    setAccount(account);\n    try {\n      const balance = await provider.getBalance(account);\n      setBalance(ethers.formatEther(balance)); // Updated for ethers.js v6\n    } catch (err) {\n      console.error('Error fetching balance:', err);\n    }\n  };\n  const disconnectWallet = () => {\n    setProvider(null);\n    setAccount('');\n    setBalance('');\n  };\n  useEffect(() => {\n    if (window.ethereum) {\n      const handleAccountsChanged = () => window.location.reload();\n      const handleChainChanged = () => window.location.reload();\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Blockchain Voting System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), !account ? /*#__PURE__*/_jsxDEV(ConnectWallet, {\n      onWalletConnected: handleWalletConnected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account: \", account]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Balance: \", balance, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: disconnectWallet,\n        className: \"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded mt-2\",\n        children: \"Disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), account && provider && /*#__PURE__*/_jsxDEV(VotingSystem, {\n      provider: provider,\n      account: account\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"vvJXWomER10dJrl+2IiwIY+fleA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ethers","ConnectWallet","VotingSystem","jsxDEV","_jsxDEV","App","_s","provider","setProvider","account","setAccount","balance","setBalance","handleWalletConnected","getBalance","formatEther","err","console","error","disconnectWallet","window","ethereum","handleAccountsChanged","location","reload","handleChainChanged","on","removeListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onWalletConnected","onClick","_c","$RefreshReg$"],"sources":["/Users/sharmaanjali/blockchain-voting-system/frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import ConnectWallet from './components/ConnectWallet';\n// import VotingSystem from './components/Contract';\n\n// const App = () => {\n//   const [provider, setProvider] = useState(null);\n//   const [account, setAccount] = useState('');\n//   const [balance, setBalance] = useState('');\n\n//   const handleWalletConnected = async (provider, account) => {\n//     setProvider(provider);\n//     setAccount(account);\n    \n//     try {\n//       const balance = await provider.getBalance(account);\n//       setBalance(ethers.formatEther(balance)); // Updated for ethers 6.x\n//     } catch (err) {\n//       console.error('Error fetching balance:', err);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (window.ethereum) {\n//       window.ethereum.on('accountsChanged', () => window.location.reload());\n//       window.ethereum.on('chainChanged', () => window.location.reload());\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener('accountsChanged', () => window.location.reload());\n//         window.ethereum.removeListener('chainChanged', () => window.location.reload());\n//       }\n//     };\n//   }, []);\n\n//   const disconnectWallet = () => {\n//     setProvider(null);\n//     setAccount('');\n//     setBalance('');\n//   };\n\n//   return (\n//     <div className=\"container mx-auto p-4\">\n//       <h1 className=\"text-2xl font-bold mb-4\">Ethereum Wallet</h1>\n//       {!account ? (\n//         <ConnectWallet onWalletConnected={handleWalletConnected} />\n//       ) : (\n//         <div>\n//           <p>Account: {account}</p>\n//           <p>Balance: {balance} ETH</p>\n//           <button \n//             onClick={disconnectWallet}\n//             className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded mt-2\"\n//           >\n//             Disconnect\n//           </button>\n//         </div>\n//       )}\n//       {account && (\n//     <VotingSystem provider={provider} account={account} />\n//   )}  \n\n//     </div>\n//   );\n// };\n\n// export default App;\n// import React, { useState } from 'react';\n// import { ethers } from 'ethers';\n\n// const ConnectWallet = ({ onWalletConnected }) => {\n//   const [error, setError] = useState('');\n//   const [isConnecting, setIsConnecting] = useState(false);\n\n//   const connectWallet = async () => {\n//     setIsConnecting(true);\n//     setError('');\n\n//     try {\n//       if (!window.ethereum) {\n//         throw new Error('MetaMask is not installed');\n//       }\n\n//       await window.ethereum.request({ method: 'eth_requestAccounts' });\n//       const provider = new ethers.BrowserProvider(window.ethereum);\n//       const signer = await provider.getSigner();\n//       const address = await signer.getAddress();\n\n//       onWalletConnected(provider, address);\n//     } catch (err) {\n//       setError(err.message);\n//     }\n//     setIsConnecting(false);\n//   };\n\n//   return (\n//     <div>\n//       {error && <div className=\"text-red-500 mb-2\">{error}</div>}\n//       <button\n//         onClick={connectWallet}\n//         disabled={isConnecting}\n//         className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//       >\n//         {isConnecting ? 'Connecting...' : 'Connect Wallet'}\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default ConnectWallet;\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport ConnectWallet from './components/ConnectWallet';\nimport VotingSystem from './components/Votingsystem';\n\nconst App = () => {\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState('');\n  const [balance, setBalance] = useState('');\n\n  const handleWalletConnected = async (provider, account) => {\n    setProvider(provider);\n    setAccount(account);\n\n    try {\n      const balance = await provider.getBalance(account);\n      setBalance(ethers.formatEther(balance)); // Updated for ethers.js v6\n    } catch (err) {\n      console.error('Error fetching balance:', err);\n    }\n  };\n\n  const disconnectWallet = () => {\n    setProvider(null);\n    setAccount('');\n    setBalance('');\n  };\n\n  useEffect(() => {\n    if (window.ethereum) {\n      const handleAccountsChanged = () => window.location.reload();\n      const handleChainChanged = () => window.location.reload();\n\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, []);\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Blockchain Voting System</h1>\n      {!account ? (\n        <ConnectWallet onWalletConnected={handleWalletConnected} />\n      ) : (\n        <div>\n          <p>Account: {account}</p>\n          <p>Balance: {balance} ETH</p>\n          <button\n            onClick={disconnectWallet}\n            className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded mt-2\"\n          >\n            Disconnect\n          </button>\n        </div>\n      )}\n      {account && provider && (\n        <VotingSystem provider={provider} account={account} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}