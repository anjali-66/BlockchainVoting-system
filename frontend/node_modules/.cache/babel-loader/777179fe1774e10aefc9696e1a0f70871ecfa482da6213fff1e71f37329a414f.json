{"ast":null,"code":"import { readContract } from \"../../../../../transaction/read-contract.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\nexport const FN_SELECTOR = \"0x107a274a\";\nconst FN_INPUTS = [{\n  type: \"uint256\",\n  name: \"_listingId\"\n}];\nconst FN_OUTPUTS = [{\n  type: \"tuple\",\n  name: \"listing\",\n  components: [{\n    type: \"uint256\",\n    name: \"listingId\"\n  }, {\n    type: \"uint256\",\n    name: \"tokenId\"\n  }, {\n    type: \"uint256\",\n    name: \"quantity\"\n  }, {\n    type: \"uint256\",\n    name: \"pricePerToken\"\n  }, {\n    type: \"uint128\",\n    name: \"startTimestamp\"\n  }, {\n    type: \"uint128\",\n    name: \"endTimestamp\"\n  }, {\n    type: \"address\",\n    name: \"listingCreator\"\n  }, {\n    type: \"address\",\n    name: \"assetContract\"\n  }, {\n    type: \"address\",\n    name: \"currency\"\n  }, {\n    type: \"uint8\",\n    name: \"tokenType\"\n  }, {\n    type: \"uint8\",\n    name: \"status\"\n  }, {\n    type: \"bool\",\n    name: \"reserved\"\n  }]\n}];\n/**\n * Checks if the `getListing` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `getListing` method is supported.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { isGetListingSupported } from \"thirdweb/extensions/marketplace\";\n * const supported = isGetListingSupported([\"0x...\"]);\n * ```\n */\nexport function isGetListingSupported(availableSelectors) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS]\n  });\n}\n/**\n * Encodes the parameters for the \"getListing\" function.\n * @param options - The options for the getListing function.\n * @returns The encoded ABI parameters.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { encodeGetListingParams } from \"thirdweb/extensions/marketplace\";\n * const result = encodeGetListingParams({\n *  listingId: ...,\n * });\n * ```\n */\nexport function encodeGetListingParams(options) {\n  return encodeAbiParameters(FN_INPUTS, [options.listingId]);\n}\n/**\n * Encodes the \"getListing\" function into a Hex string with its parameters.\n * @param options - The options for the getListing function.\n * @returns The encoded hexadecimal string.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { encodeGetListing } from \"thirdweb/extensions/marketplace\";\n * const result = encodeGetListing({\n *  listingId: ...,\n * });\n * ```\n */\nexport function encodeGetListing(options) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return FN_SELECTOR + encodeGetListingParams(options).slice(2);\n}\n/**\n * Decodes the result of the getListing function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { decodeGetListingResult } from \"thirdweb/extensions/marketplace\";\n * const result = decodeGetListingResultResult(\"...\");\n * ```\n */\nexport function decodeGetListingResult(result) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n/**\n * Calls the \"getListing\" function on the contract.\n * @param options - The options for the getListing function.\n * @returns The parsed result of the function call.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { getListing } from \"thirdweb/extensions/marketplace\";\n *\n * const result = await getListing({\n *  contract,\n *  listingId: ...,\n * });\n *\n * ```\n */\nexport async function getListing(options) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n    params: [options.listingId]\n  });\n}\n//# sourceMappingURL=getListing.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}