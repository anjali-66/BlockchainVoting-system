{"ast":null,"code":"import { numberToHex } from \"../../utils/encoding/hex.js\";\nfunction encodeStateOverrides(overrides) {\n  return Object.fromEntries(Object.entries(overrides).map(([address, override]) => {\n    return [address, {\n      balance: override.balance ? numberToHex(override.balance) : undefined,\n      nonce: override.nonce ? numberToHex(override.nonce) : undefined,\n      code: override.code,\n      state: override.state,\n      stateDiff: override.stateDiff\n    }];\n  }));\n}\n/**\n * Executes a call or a transaction on the Ethereum network.\n * @param request - The EIP1193 request function.\n * @param params - The parameters for the call or transaction.\n * @returns A promise that resolves to the result of the call or transaction.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_call } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const result = await eth_call(rpcRequest, {\n *  to: \"0x...\",\n *  ...\n * });\n * ```\n */\nexport async function eth_call(request, params) {\n  const {\n    blockNumber,\n    blockTag,\n    ...txRequest\n  } = params;\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;\n  // default to \"latest\" if no block is provided\n  const block = blockNumberHex || blockTag || \"latest\";\n  return await request({\n    method: \"eth_call\",\n    params: params.stateOverrides ? [txRequest, block, encodeStateOverrides(params.stateOverrides)] : [txRequest, block]\n  });\n}\n//# sourceMappingURL=eth_call.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}