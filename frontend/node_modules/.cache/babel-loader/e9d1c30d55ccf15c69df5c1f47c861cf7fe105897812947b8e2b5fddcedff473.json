{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import abi from '../abi/VotingSystem.json';\n\n// const VotingSystem = ({ provider, account }) => {\n//   const [contract, setContract] = useState(null);\n//   const [polls, setPolls] = useState([]);\n//   const [newPoll, setNewPoll] = useState({ title: '', options: ['', ''], duration: 60 });\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const contractInstance = new ethers.Contract(\n//         \"0x002A13DF3bB8Ce7D7143bE17223F8893e2152c29\",\n//         abi,\n//         provider\n//       );\n//       setContract(contractInstance);\n//     }\n//   }, [provider]);\n\n//   const createPoll = async () => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.createPoll(\n//         newPoll.title,\n//         newPoll.options.filter(opt => opt !== ''),\n//         newPoll.duration\n//       );\n//       await tx.wait();\n\n//       setNewPoll({ title: '', options: ['', ''], duration: 60 });\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error creating poll:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const castVote = async (pollId, optionIndex) => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error voting:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPolls = async () => {\n//     if (!contract) return;\n//     try {\n//       const pollCount = await contract.pollCount();\n//       const pollsData = [];\n//       for (let i = 0; i < pollCount; i++) {\n//         const details = await contract.getPollDetails(i);\n//         const results = await contract.getPollResults(i);\n//         pollsData.push({ ...details, results });\n//       }\n//       setPolls(pollsData);\n//     } catch (error) {\n//       console.error('Error fetching polls:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPolls();\n//   }, [contract]);\n\n//   return (\n//     <div className=\"max-w-2xl mx-auto p-4\">\n//       <div className=\"mb-8 bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Create New Poll</h2>\n//         <input\n//           type=\"text\"\n//           value={newPoll.title}\n//           onChange={(e) => setNewPoll({ ...newPoll, title: e.target.value })}\n//           placeholder=\"Poll Title\"\n//           className=\"w-full p-2 mb-4 border rounded\"\n//         />\n//         {newPoll.options.map((option, index) => (\n//           <input\n//             key={index}\n//             type=\"text\"\n//             value={option}\n//             onChange={(e) => {\n//               const newOptions = [...newPoll.options];\n//               newOptions[index] = e.target.value;\n//               setNewPoll({ ...newPoll, options: newOptions });\n//             }}\n//             placeholder={`Option ${index + 1}`}\n//             className=\"w-full p-2 mb-2 border rounded\"\n//           />\n//         ))}\n//         <button\n//           onClick={() => setNewPoll({ ...newPoll, options: [...newPoll.options, ''] })}\n//           className=\"bg-gray-500 text-white px-4 py-2 rounded mr-2\"\n//         >\n//           Add Option\n//         </button>\n//         <button\n//           onClick={createPoll}\n//           disabled={loading}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//         >\n//           Create Poll\n//         </button>\n//       </div>\n\n//       <div className=\"bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Active Polls</h2>\n//         {polls.map((poll, index) => (\n//           <div key={index} className=\"border-b py-4\">\n//             <h3 className=\"font-bold\">{poll.title}</h3>\n//             <div className=\"mt-2\">\n//               {poll.options.map((option, optIndex) => (\n//                 <button\n//                   key={optIndex}\n//                   onClick={() => castVote(poll.pollId, optIndex)}\n//                   className=\"bg-blue-100 hover:bg-blue-200 px-4 py-2 rounded mr-2 mb-2\"\n//                 >\n//                   {option} ({poll.results[optIndex].toString()})\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VotingSystem;","map":{"version":3,"names":[],"sources":["/Users/sharmaanjali/blockchain-voting-system/frontend/src/components/Votingsystem.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import abi from '../abi/VotingSystem.json';\n\n// const VotingSystem = ({ provider, account }) => {\n//   const [contract, setContract] = useState(null);\n//   const [polls, setPolls] = useState([]);\n//   const [newPoll, setNewPoll] = useState({ title: '', options: ['', ''], duration: 60 });\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const contractInstance = new ethers.Contract(\n//         \"0x002A13DF3bB8Ce7D7143bE17223F8893e2152c29\",\n//         abi,\n//         provider\n//       );\n//       setContract(contractInstance);\n//     }\n//   }, [provider]);\n\n//   const createPoll = async () => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.createPoll(\n//         newPoll.title,\n//         newPoll.options.filter(opt => opt !== ''),\n//         newPoll.duration\n//       );\n//       await tx.wait();\n\n//       setNewPoll({ title: '', options: ['', ''], duration: 60 });\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error creating poll:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const castVote = async (pollId, optionIndex) => {\n//     if (!contract) return;\n//     try {\n//       setLoading(true);\n//       const signer = await provider.getSigner();\n//       const connectedContract = contract.connect(signer);\n\n//       const tx = await connectedContract.vote(pollId, optionIndex);\n//       await tx.wait();\n//       fetchPolls(); // Refresh polls\n//     } catch (error) {\n//       console.error('Error voting:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchPolls = async () => {\n//     if (!contract) return;\n//     try {\n//       const pollCount = await contract.pollCount();\n//       const pollsData = [];\n//       for (let i = 0; i < pollCount; i++) {\n//         const details = await contract.getPollDetails(i);\n//         const results = await contract.getPollResults(i);\n//         pollsData.push({ ...details, results });\n//       }\n//       setPolls(pollsData);\n//     } catch (error) {\n//       console.error('Error fetching polls:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPolls();\n//   }, [contract]);\n\n//   return (\n//     <div className=\"max-w-2xl mx-auto p-4\">\n//       <div className=\"mb-8 bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Create New Poll</h2>\n//         <input\n//           type=\"text\"\n//           value={newPoll.title}\n//           onChange={(e) => setNewPoll({ ...newPoll, title: e.target.value })}\n//           placeholder=\"Poll Title\"\n//           className=\"w-full p-2 mb-4 border rounded\"\n//         />\n//         {newPoll.options.map((option, index) => (\n//           <input\n//             key={index}\n//             type=\"text\"\n//             value={option}\n//             onChange={(e) => {\n//               const newOptions = [...newPoll.options];\n//               newOptions[index] = e.target.value;\n//               setNewPoll({ ...newPoll, options: newOptions });\n//             }}\n//             placeholder={`Option ${index + 1}`}\n//             className=\"w-full p-2 mb-2 border rounded\"\n//           />\n//         ))}\n//         <button\n//           onClick={() => setNewPoll({ ...newPoll, options: [...newPoll.options, ''] })}\n//           className=\"bg-gray-500 text-white px-4 py-2 rounded mr-2\"\n//         >\n//           Add Option\n//         </button>\n//         <button\n//           onClick={createPoll}\n//           disabled={loading}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//         >\n//           Create Poll\n//         </button>\n//       </div>\n\n//       <div className=\"bg-white p-6 rounded-lg shadow\">\n//         <h2 className=\"text-xl font-bold mb-4\">Active Polls</h2>\n//         {polls.map((poll, index) => (\n//           <div key={index} className=\"border-b py-4\">\n//             <h3 className=\"font-bold\">{poll.title}</h3>\n//             <div className=\"mt-2\">\n//               {poll.options.map((option, optIndex) => (\n//                 <button\n//                   key={optIndex}\n//                   onClick={() => castVote(poll.pollId, optIndex)}\n//                   className=\"bg-blue-100 hover:bg-blue-200 px-4 py-2 rounded mr-2 mb-2\"\n//                 >\n//                   {option} ({poll.results[optIndex].toString()})\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VotingSystem;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}