{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback } from \"react\";\nimport { getContract } from \"../../../../../../contract/contract.js\";\nimport { isERC721 } from \"../../../../../../extensions/erc721/read/isERC721.js\";\nimport { isERC1155 } from \"../../../../../../extensions/erc1155/read/isERC1155.js\";\nimport { createListing } from \"../../../../../../extensions/marketplace/direct-listings/write/createListing.js\";\nimport { useReadContract } from \"../../../../../core/hooks/contract/useReadContract.js\";\nimport { useSendAndConfirmTransaction } from \"../../../../../core/hooks/transaction/useSendAndConfirmTransaction.js\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { TransactionButton } from \"../../../TransactionButton/index.js\";\n/**\n * This button is used to create Direct listings for the thirdweb Marketplace v3 contract\n *\n * It uses the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)\n * and the [`createListing` extension](https://portal.thirdweb.com/references/typescript/v5/marketplace/createListing) under the hood\n * which means it inherits all the props of those 2 components.\n *\n * @example\n * ```tsx\n * import { CreateDirectListingButton } from \"thirdweb/react\";\n *\n * <CreateDirectListingButton\n *   contractAddress=\"0x...\" // contract address for the marketplace-v3\n *   chain={...} // the chain which the marketplace contract is deployed on\n *\n *   // These props below are the same props for `createListing`\n *   // to get the full list, check the docs link above\n *   tokenId={0n}\n *   assetContractAddress=\"0x...\" // The NFT contract address whose NFT(s) you want to sell\n *   pricePerToken={\"0.1\"} // sell for 0.1 <native token>\n * >\n *   Sell NFT\n * </CreateDirectListingButton>\n * ```\n *\n * For error handling & callbacks on transaction-sent and transaction-confirmed,\n * please refer to the TransactionButton docs.\n * @component\n * @transaction\n */\nexport function CreateDirectListingButton(props) {\n  const {\n    contractAddress,\n    chain,\n    client,\n    children,\n    payModal,\n    assetContractAddress,\n    tokenId\n  } = props;\n  const marketplaceContract = getContract({\n    address: contractAddress,\n    chain,\n    client\n  });\n  const account = useActiveAccount();\n  const defaultPayModalMetadata = payModal ? payModal.metadata : undefined;\n  const nftContract = getContract({\n    address: assetContractAddress,\n    chain,\n    client\n  });\n  const {\n    data: payMetadata\n  } = useReadContract(getPayMetadata, {\n    contract: nftContract,\n    tokenId,\n    queryOptions: {\n      enabled: !defaultPayModalMetadata\n    }\n  });\n  const {\n    mutateAsync\n  } = useSendAndConfirmTransaction();\n  const prepareTransaction = useCallback(async () => {\n    if (!account) {\n      throw new Error(\"No account detected\");\n    }\n    const [is721, is1155] = await Promise.all([isERC721({\n      contract: nftContract\n    }), isERC1155({\n      contract: nftContract\n    })]);\n    if (!is1155 && !is721) {\n      throw new Error(\"Asset must either be ERC721 or ERC1155\");\n    }\n    // Check for token approval\n    if (is1155) {\n      const [{\n        isApprovedForAll\n      }, {\n        setApprovalForAll\n      }] = await Promise.all([import(\"../../../../../../extensions/erc1155/__generated__/IERC1155/read/isApprovedForAll.js\"), import(\"../../../../../../extensions/erc1155/__generated__/IERC1155/write/setApprovalForAll.js\")]);\n      const isApproved = await isApprovedForAll({\n        contract: nftContract,\n        operator: marketplaceContract.address,\n        owner: account.address\n      });\n      if (!isApproved) {\n        const transaction = setApprovalForAll({\n          contract: nftContract,\n          operator: marketplaceContract.address,\n          approved: true\n        });\n        await mutateAsync(transaction);\n      }\n    } else {\n      const [{\n        isApprovedForAll\n      }, {\n        setApprovalForAll\n      }, {\n        getApproved\n      }] = await Promise.all([import(\"../../../../../../extensions/erc721/__generated__/IERC721A/read/isApprovedForAll.js\"), import(\"../../../../../../extensions/erc721/__generated__/IERC721A/write/setApprovalForAll.js\"), import(\"../../../../../../extensions/erc721/__generated__/IERC721A/read/getApproved.js\")]);\n      const [isApproved, tokenApproved] = await Promise.all([isApprovedForAll({\n        contract: nftContract,\n        operator: marketplaceContract.address,\n        owner: account.address\n      }), getApproved({\n        contract: nftContract,\n        tokenId: props.tokenId\n      })]);\n      if (!isApproved && tokenApproved.toLowerCase() !== marketplaceContract.address.toLowerCase()) {\n        const transaction = setApprovalForAll({\n          contract: nftContract,\n          operator: marketplaceContract.address,\n          approved: true\n        });\n        await mutateAsync(transaction);\n      }\n    }\n    const listingTx = createListing({\n      contract: marketplaceContract,\n      ...props\n    });\n    return listingTx;\n  }, [marketplaceContract, props, account, mutateAsync, nftContract]);\n  return _jsx(TransactionButton, {\n    transaction: () => prepareTransaction(),\n    payModal: {\n      metadata: defaultPayModalMetadata || payMetadata,\n      ...payModal\n    },\n    ...props,\n    children: children\n  });\n}\n/**\n * @internal\n */\nasync function getPayMetadata(options) {\n  const [{\n    getContractMetadata\n  }, {\n    getNFT: getERC721\n  }, {\n    getNFT: getERC1155\n  }] = await Promise.all([import(\"../../../../../../extensions/common/read/getContractMetadata.js\"), import(\"../../../../../../extensions/erc721/read/getNFT.js\"), import(\"../../../../../../extensions/erc1155/read/getNFT.js\")]);\n  const [is721, is1155, contractMetadata] = await Promise.all([isERC721(options), isERC1155(options), getContractMetadata(options)]);\n  if (is721) {\n    const nft = await getERC721(options);\n    return {\n      image: nft?.metadata?.image,\n      name: nft?.metadata?.name\n    };\n  }\n  if (is1155) {\n    const nft = await getERC1155(options);\n    return {\n      image: nft?.metadata?.image,\n      name: nft?.metadata?.name\n    };\n  }\n  return {\n    image: contractMetadata?.image,\n    name: contractMetadata?.name\n  };\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}