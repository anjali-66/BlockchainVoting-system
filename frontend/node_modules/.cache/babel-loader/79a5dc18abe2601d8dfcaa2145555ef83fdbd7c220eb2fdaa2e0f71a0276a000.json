{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { CustomThemeProvider } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { useTransactionButtonMutation } from \"../../../core/hooks/transaction/transaction-button-utils.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useSendTransaction } from \"../../hooks/transaction/useSendTransaction.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport { Button } from \"../components/buttons.js\";\n/**\n * TransactionButton component is used to render a button that triggers a transaction.\n * It shows a \"Switch Network\" button if the connected wallet is on a different chain than the transaction.\n * @param props - The props for this component.\n * Refer to [TransactionButtonProps](https://portal.thirdweb.com/references/typescript/v5/TransactionButtonProps) for details.\n * @example\n *\n * ### Basic usage\n * ```tsx\n * <TransactionButton\n *   transaction={() => {}}\n *   onTransactionConfirmed={handleSuccess}\n *   onError={handleError}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Customize the styling by passing the `unstyled` prop and your inline styles and/or classes:\n * ```tsx\n * <TransactionButton\n *   transaction={() => {}}\n *   unstyled\n *   className=\"bg-white text-black rounded-md p-4 flex items-center justify-center\"\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Handle errors\n * ```tsx\n * <TransactionButton\n *   transaction={() => ...}\n *   onError={(err) => {\n *     alert(err.message);\n *     // Add your own logic here\n *   }}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Alert when a transaction is sent\n * ```tsx\n * <TransactionButton\n *   transaction={() => ...}\n *   onTransactionSent={(tx) => {\n *     alert(\"transaction sent!\");\n *     // Add your own logic here. For example, a toast\n *   }}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Alert when a transaction is completed\n * ```tsx\n * <TransactionButton\n *   transaction={() => ...}\n *   onTransactionConfirmed={(tx) => {\n *     alert(\"transaction sent!\");\n *     console.log(tx);\n *     // Add your own logic here. For example, a toast\n *   }}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### The onClick prop, if provided, will be called before the transaction is sent.\n * ```tsx\n * <TransactionButton\n *   onClick={() => alert(\"Transaction is about to be sent\")}\n *   transaction={...}\n * >\n *   ...\n * </TransactionButton>\n * ```\n *\n * ### Attach custom Pay metadata\n * ```tsx\n * <TransactionButton\n *   payModal={{\n *     // This image & title will show up in the Pay modal\n *     metadata: {\n *       name: \"Van Gogh Starry Night\",\n *       image: \"https://unsplash.com/starry-night.png\"\n *     }\n *   }}\n * >\n *   ...\n * </TransactionButton>\n * ```\n *\n * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)\n * ```tsx\n * <TransactionButton\n *   gasless={{\n *     provider: \"engine\",\n *     relayerUrl: \"https://thirdweb.engine-***.thirdweb.com/relayer/***\",\n *     relayerForwarderAddress: \"0x...\",\n *   }}\n * >\n *   ...\n * </TransactionButton>\n * ```\n *\n * ### Gasless usage with OpenZeppelin\n * ```tsx\n * <TransactionButton\n *   gasless={{\n *     provider: \"openzeppelin\",\n *     relayerUrl: \"https://...\",\n *     relayerForwarderAddress: \"0x...\",\n *   }}\n * >\n *   ...\n * </TransactionButton>\n * ```\n * @component\n * @transaction\n */\nexport function TransactionButton(props) {\n  const {\n    children,\n    transaction,\n    onTransactionSent,\n    onTransactionConfirmed,\n    onError,\n    onClick,\n    gasless,\n    payModal,\n    disabled,\n    unstyled,\n    ...buttonProps\n  } = props;\n  const account = useActiveAccount();\n  const sendTransaction = useSendTransaction({\n    gasless,\n    payModal\n  });\n  const {\n    mutate: handleClick,\n    isPending\n  } = useTransactionButtonMutation(props, sendTransaction.mutateAsync);\n  return _jsx(CustomThemeProvider, {\n    theme: props.theme,\n    children: _jsxs(Button, {\n      gap: \"xs\",\n      disabled: !account || disabled || isPending,\n      variant: \"primary\",\n      unstyled: unstyled,\n      \"data-is-loading\": isPending,\n      onClick: () => handleClick(),\n      ...buttonProps,\n      style: !unstyled ? {\n        opacity: !account || disabled ? 0.5 : 1,\n        minWidth: \"165px\",\n        position: \"relative\",\n        ...buttonProps.style\n      } : {\n        position: \"relative\",\n        ...buttonProps.style\n      },\n      children: [_jsx(\"span\", {\n        style: {\n          visibility: isPending ? \"hidden\" : \"visible\"\n        },\n        children: children\n      }), isPending && _jsx(\"div\", {\n        style: {\n          position: \"absolute\",\n          display: \"flex\",\n          alignItems: \"center\",\n          height: \"100%\",\n          top: 0,\n          bottom: 0,\n          margin: \"auto\"\n        },\n        children: _jsx(Spinner, {\n          size: \"md\",\n          color: \"primaryButtonText\"\n        })\n      })]\n    })\n  });\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}