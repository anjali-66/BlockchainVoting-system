{"ast":null,"code":"import * as Authorization from './Authorization.js';\nimport * as Hex from './Hex.js';\n/**\n * Converts a {@link ox#TransactionRequest.TransactionRequest} to a {@link ox#TransactionRequest.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionRequest, Value } from 'ox'\n *\n * const request = TransactionRequest.toRpc({\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('0.01'),\n * })\n * ```\n *\n * @example\n * ### Using with a Provider\n *\n * You can use {@link ox#Provider.(from:function)} to instantiate an EIP-1193 Provider and\n * send a transaction to the Wallet using the `eth_sendTransaction` method.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Provider, TransactionRequest, Value } from 'ox'\n *\n * const provider = Provider.from(window.ethereum!)\n *\n * const request = TransactionRequest.toRpc({\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('0.01'),\n * })\n *\n * const hash = await provider.request({ // [!code focus]\n *   method: 'eth_sendTransaction', // [!code focus]\n *   params: [request], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param request - The request to convert.\n * @returns An RPC request.\n */\nexport function toRpc(request) {\n  const request_rpc = {};\n  if (typeof request.accessList !== 'undefined') request_rpc.accessList = request.accessList;\n  if (typeof request.authorizationList !== 'undefined') request_rpc.authorizationList = Authorization.toRpcList(request.authorizationList);\n  if (typeof request.blobVersionedHashes !== 'undefined') request_rpc.blobVersionedHashes = request.blobVersionedHashes;\n  if (typeof request.blobs !== 'undefined') request_rpc.blobs = request.blobs;\n  if (typeof request.chainId !== 'undefined') request_rpc.chainId = Hex.fromNumber(request.chainId);\n  if (typeof request.data !== 'undefined') {\n    request_rpc.data = request.data;\n    request_rpc.input = request.data;\n  } else if (typeof request.input !== 'undefined') {\n    request_rpc.data = request.input;\n    request_rpc.input = request.input;\n  }\n  if (typeof request.from !== 'undefined') request_rpc.from = request.from;\n  if (typeof request.gas !== 'undefined') request_rpc.gas = Hex.fromNumber(request.gas);\n  if (typeof request.gasPrice !== 'undefined') request_rpc.gasPrice = Hex.fromNumber(request.gasPrice);\n  if (typeof request.maxFeePerBlobGas !== 'undefined') request_rpc.maxFeePerBlobGas = Hex.fromNumber(request.maxFeePerBlobGas);\n  if (typeof request.maxFeePerGas !== 'undefined') request_rpc.maxFeePerGas = Hex.fromNumber(request.maxFeePerGas);\n  if (typeof request.maxPriorityFeePerGas !== 'undefined') request_rpc.maxPriorityFeePerGas = Hex.fromNumber(request.maxPriorityFeePerGas);\n  if (typeof request.maxPriorityFeePerGas !== 'undefined') request_rpc.maxPriorityFeePerGas = Hex.fromNumber(request.maxPriorityFeePerGas);\n  if (typeof request.nonce !== 'undefined') request_rpc.nonce = Hex.fromNumber(request.nonce);\n  if (typeof request.to !== 'undefined') request_rpc.to = request.to;\n  if (typeof request.type !== 'undefined') request_rpc.type = request.type;\n  if (typeof request.value !== 'undefined') request_rpc.value = Hex.fromNumber(request.value);\n  return request_rpc;\n}\n//# sourceMappingURL=TransactionRequest.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}