{"ast":null,"code":"import { isERC721 } from \"../erc721/read/isERC721.js\";\nimport { isERC1155 } from \"../erc1155/read/isERC1155.js\";\n/**\n * Retrieves the NFT asset based on the provided options.\n * @param options The transaction options.\n * @returns A promise that resolves to the NFT asset.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { getNFTAsset } from \"thirdweb/extensions/marketplace\";\n *\n * const nft = await getNFTAsset({ contract, tokenId: 1n });\n * ```\n */\nexport async function getNFTAsset(options) {\n  const [erc721, erc1155] = await Promise.all([isERC721(options), isERC1155(options)]);\n  switch (true) {\n    case erc721:\n      {\n        const {\n          getNFT\n        } = await import(\"../erc721/read/getNFT.js\");\n        return getNFT(options);\n      }\n    case erc1155:\n      {\n        const {\n          getNFT\n        } = await import(\"../erc1155/read/getNFT.js\");\n        return getNFT(options);\n      }\n    default:\n      {\n        throw new Error(\"Contract is neither ERC721 nor ERC1155.\");\n      }\n  }\n}\nexport function computeStatus(options) {\n  switch (options.listingStatus) {\n    case 1:\n      {\n        if (options.startTimestamp > options.blockTimeStamp) {\n          return \"CREATED\";\n        }\n        if (options.endTimestamp < options.blockTimeStamp) {\n          return \"EXPIRED\";\n        }\n        return \"ACTIVE\";\n      }\n    case 2:\n      {\n        return \"COMPLETED\";\n      }\n    case 3:\n      {\n        return \"CANCELLED\";\n      }\n    default:\n      {\n        throw new Error(`Invalid listing status: \"${options.listingStatus}\"`);\n      }\n  }\n}\n/**\n * @internal\n */\nexport async function getAllInBatches(fn, options) {\n  let start = options.start;\n  const batches = [];\n  while (options.end - start > options.maxSize) {\n    batches.push(fn(start, options.end + options.maxSize - 1n));\n    start += options.maxSize;\n  }\n  batches.push(fn(start, options.end - 1n));\n  return await Promise.all(batches);\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}