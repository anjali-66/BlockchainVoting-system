{"ast":null,"code":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { getCachedChain } from \"../../../../chains/utils.js\";\n/**\n * @internal\n */\nexport function useSiweAuth(activeWallet, activeAccount, authOptions) {\n  const requiresAuth = !!authOptions;\n  const queryClient = useQueryClient();\n  const isLoggedInQuery = useQuery({\n    queryKey: [\"siwe_auth\", \"isLoggedIn\", activeAccount?.address],\n    enabled: requiresAuth && !!activeAccount?.address,\n    queryFn: () => {\n      // these cases should never be hit but just in case...\n      if (!authOptions || !activeAccount?.address) {\n        return false;\n      }\n      return authOptions.isLoggedIn(activeAccount.address);\n    },\n    gcTime: 0,\n    placeholderData: false,\n    refetchOnWindowFocus: false\n  });\n  const loginMutation = useMutation({\n    mutationKey: [\"siwe_auth\", \"login\", activeAccount?.address],\n    mutationFn: async () => {\n      if (!authOptions) {\n        throw new Error(\"No auth options provided\");\n      }\n      if (!activeWallet) {\n        throw new Error(\"No active wallet\");\n      }\n      const chain = activeWallet.getChain();\n      if (!chain) {\n        throw new Error(\"No active chain\");\n      }\n      if (!activeAccount) {\n        throw new Error(\"No active account\");\n      }\n      const [payload, {\n        signLoginPayload\n      }] = await Promise.all([authOptions.getLoginPayload({\n        address: activeAccount.address,\n        chainId: chain.id\n      }),\n      // we lazy-load this because it's only needed when logging in\n      import(\"../../../../auth/core/sign-login-payload.js\")]);\n      if (payload.chain_id) {\n        await activeWallet.switchChain(getCachedChain(Number(payload.chain_id)));\n      }\n      const signedPayload = await signLoginPayload({\n        payload,\n        account: activeAccount\n      });\n      return await authOptions.doLogin(signedPayload);\n    },\n    onSettled: () => {\n      return queryClient.invalidateQueries({\n        queryKey: [\"siwe_auth\", \"isLoggedIn\"]\n      });\n    }\n  });\n  const logoutMutation = useMutation({\n    mutationKey: [\"siwe_auth\", \"logout\", activeAccount?.address],\n    mutationFn: async () => {\n      if (!authOptions) {\n        throw new Error(\"No auth options provided\");\n      }\n      return await authOptions.doLogout();\n    },\n    onSettled: () => {\n      return queryClient.invalidateQueries({\n        queryKey: [\"siwe_auth\", \"isLoggedIn\"]\n      });\n    }\n  });\n  return {\n    // is auth even enabled\n    requiresAuth,\n    // login\n    doLogin: loginMutation.mutateAsync,\n    isLoggingIn: loginMutation.isPending,\n    // logout\n    doLogout: logoutMutation.mutateAsync,\n    isLoggingOut: logoutMutation.isPending,\n    // checking if logged in\n    isLoggedIn: isLoggedInQuery.data,\n    isLoading: isLoggedInQuery.isFetching\n  };\n}\n//# sourceMappingURL=useSiweAuth.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}