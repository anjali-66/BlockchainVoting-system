{"ast":null,"code":"import { BaseError } from '../../errors/base.js';\nimport { fromHex, fromRlp, hexToBigInt, hexToNumber } from '../../utils/index.js';\nexport function parseEip712Transaction(transaction) {\n  const payload = fromHex(transaction, 'bytes');\n  if (payload[0] !== 113) throw new BaseError('transaction type must be eip712');\n  function validHex(value) {\n    if (!value || value === '0x') return '0x0';\n    return value;\n  }\n  function parsePaymasterArray(arr) {\n    if (arr.length === 0) return undefined;\n    if (arr.length !== 2) throw new BaseError(`Invalid paymaster parameters, expected to have length of 2, found ${arr.length}!`);\n    return {\n      paymaster: arr[0],\n      paymasterInput: arr[1]\n    };\n  }\n  const raw = fromRlp(payload.slice(1));\n  const paymasterParams = parsePaymasterArray(raw[15]);\n  return {\n    type: 'eip712',\n    nonce: hexToNumber(validHex(raw[0])),\n    maxPriorityFeePerGas: hexToBigInt(validHex(raw[1])),\n    maxFeePerGas: hexToBigInt(validHex(raw[2])),\n    gas: hexToBigInt(validHex(raw[3])),\n    to: raw[4],\n    value: hexToBigInt(validHex(raw[5])),\n    data: raw[6],\n    v: hexToBigInt(validHex(raw[7])),\n    r: raw[8],\n    s: raw[9],\n    chainId: hexToNumber(validHex(raw[10])),\n    from: raw[11],\n    gasPerPubdata: hexToBigInt(validHex(raw[12])),\n    factoryDeps: raw[13],\n    customSignature: raw[14],\n    paymaster: paymasterParams?.paymaster,\n    paymasterInput: paymasterParams?.paymasterInput\n  };\n}\n//# sourceMappingURL=parseEip712Transaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}