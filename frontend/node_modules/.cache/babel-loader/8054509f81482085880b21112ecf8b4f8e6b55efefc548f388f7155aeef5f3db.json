{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext } from \"react\";\n/**\n * @internal\n */\nexport const NFTProviderContext = /* @__PURE__ */createContext(undefined);\n/**\n * @internal\n */\nexport function useNFTContext() {\n  const ctx = useContext(NFTProviderContext);\n  if (!ctx) {\n    throw new Error(\"NFTProviderContext not found. Make sure you are using NFTMedia, NFTDescription, etc. inside a <NFTProvider /> component\");\n  }\n  return ctx;\n}\n/**\n * A React context provider component that supplies NFT-related data to its child components.\n *\n * This component serves as a wrapper around the `NFTProviderContext.Provider` and passes\n * the provided NFT data down to all of its child components through the context API.\n *\n *\n * @param {React.PropsWithChildren<NFTProviderProps>} props - The props for the NFT provider\n *\n * @example\n * ```tsx\n * import { getContract } from \"thirdweb\";\n * import { NFTProvider, NFTMedia, NFTDescription, NFTName } from \"thirdweb/react\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: ethereum,\n *   client: yourThirdwebClient,\n * });\n *\n * <NFTProvider contract={contract} tokenId={0n}>\n *    <NFTMedia />\n *    <NFTDescription />\n *    <NFTName />\n * </NFTProvider>\n * ```\n * @component\n * @nft\n * @beta\n */\nexport function NFTProvider(props) {\n  return _jsx(NFTProviderContext.Provider, {\n    value: props,\n    children: props.children\n  });\n}\n//# sourceMappingURL=provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}