{"ast":null,"code":"import { EventEmitter } from 'eventemitter3';\nimport * as Errors from './Errors.js';\nimport * as RpcResponse from './RpcResponse.js';\nexport class ProviderRpcError extends Error {\n  constructor(code, message) {\n    super(message);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'ProviderRpcError'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"details\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.code = code;\n    this.details = message;\n  }\n}\n/** The user rejected the request. */\nexport class UserRejectedRequestError extends ProviderRpcError {\n  constructor({\n    message = 'The user rejected the request.'\n  } = {}) {\n    super(4001, message);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'Provider.UserRejectedRequestError'\n    });\n  }\n}\nObject.defineProperty(UserRejectedRequestError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4001\n});\n/** The requested method and/or account has not been authorized by the user. */\nexport class UnauthorizedError extends ProviderRpcError {\n  constructor({\n    message = 'The requested method and/or account has not been authorized by the user.'\n  } = {}) {\n    super(4100, message);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'Provider.UnauthorizedError'\n    });\n  }\n}\nObject.defineProperty(UnauthorizedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4100\n});\n/** The provider does not support the requested method. */\nexport class UnsupportedMethodError extends ProviderRpcError {\n  constructor({\n    message = 'The provider does not support the requested method.'\n  } = {}) {\n    super(4200, message);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'Provider.UnsupportedMethodError'\n    });\n  }\n}\nObject.defineProperty(UnsupportedMethodError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4200\n});\n/** The provider is disconnected from all chains. */\nexport class DisconnectedError extends ProviderRpcError {\n  constructor({\n    message = 'The provider is disconnected from all chains.'\n  } = {}) {\n    super(4900, message);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'Provider.DisconnectedError'\n    });\n  }\n}\nObject.defineProperty(DisconnectedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4900\n});\n/** The provider is not connected to the requested chain. */\nexport class ChainDisconnectedError extends ProviderRpcError {\n  constructor({\n    message = 'The provider is not connected to the requested chain.'\n  } = {}) {\n    super(4901, message);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'Provider.ChainDisconnectedError'\n    });\n  }\n}\nObject.defineProperty(ChainDisconnectedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4901\n});\n/**\n * Creates an EIP-1193 flavored event emitter to be injected onto a Provider.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Provider, RpcRequest, RpcResponse } from 'ox' // [!code focus]\n *\n * // 1. Instantiate a Provider Emitter. // [!code focus]\n * const emitter = Provider.createEmitter() // [!code focus]\n *\n * const store = RpcRequest.createStore()\n *\n * const provider = Provider.from({\n *   // 2. Pass the Emitter to the Provider. // [!code focus]\n *   ...emitter, // [!code focus]\n *   async request(args) {\n *     return await fetch('https://1.rpc.thirdweb.com', {\n *       body: JSON.stringify(store.prepare(args)),\n *       method: 'POST',\n *       headers: {\n *         'Content-Type': 'application/json',\n *       },\n *     })\n *       .then((res) => res.json())\n *       .then(RpcResponse.parse)\n *   },\n * })\n *\n * // 3. Emit Provider Events. // [!code focus]\n * emitter.emit('accountsChanged', ['0x...']) // [!code focus]\n * ```\n *\n * @returns An event emitter.\n */\nexport function createEmitter() {\n  const emitter = new EventEmitter();\n  return {\n    get eventNames() {\n      return emitter.eventNames.bind(emitter);\n    },\n    get listenerCount() {\n      return emitter.listenerCount.bind(emitter);\n    },\n    get listeners() {\n      return emitter.listeners.bind(emitter);\n    },\n    addListener: emitter.addListener.bind(emitter),\n    emit: emitter.emit.bind(emitter),\n    off: emitter.off.bind(emitter),\n    on: emitter.on.bind(emitter),\n    once: emitter.once.bind(emitter),\n    removeAllListeners: emitter.removeAllListeners.bind(emitter),\n    removeListener: emitter.removeListener.bind(emitter)\n  };\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function from(provider, options = {}) {\n  const {\n    includeEvents = true\n  } = options;\n  if (!provider) throw new IsUndefinedError();\n  return {\n    ...(includeEvents ? {\n      on: provider.on?.bind(provider),\n      removeListener: provider.removeListener?.bind(provider)\n    } : {}),\n    async request(args) {\n      const result = await provider.request(args);\n      if (result && typeof result === 'object' && 'jsonrpc' in result) return RpcResponse.parse(result);\n      return result;\n    }\n  };\n}\n/** Thrown when the provider is undefined. */\nexport class IsUndefinedError extends Errors.BaseError {\n  constructor() {\n    super('`provider` is undefined.');\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'Provider.IsUndefinedError'\n    });\n  }\n}\n//# sourceMappingURL=Provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}