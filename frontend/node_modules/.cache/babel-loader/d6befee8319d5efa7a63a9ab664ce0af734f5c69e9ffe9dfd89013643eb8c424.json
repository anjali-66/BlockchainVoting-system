{"ast":null,"code":"import { signTransaction as signTransaction_ } from '../../actions/wallet/signTransaction.js';\nimport { isEIP712Transaction } from '../utils/isEip712Transaction.js';\nimport { signEip712Transaction } from './signEip712Transaction.js';\n/**\n * Signs a transaction.\n *\n * - Docs: https://viem.sh/docs/zksync/actions/signTransaction\n *\n * @param args - {@link SignTransactionParameters}\n * @returns The signed serialized transaction. {@link SignTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { zksync } from 'viem/chains'\n * import { signTransaction } from 'viem/zksync'\n *\n * const client = createWalletClient({\n *   chain: zksync,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { zksync } from 'viem/chains'\n * import { signTransaction } from 'viem/zksync'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: zksync,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function signTransaction(client, args) {\n  if (isEIP712Transaction(args)) return signEip712Transaction(client, args);\n  return await signTransaction_(client, args);\n}\n//# sourceMappingURL=signTransaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}