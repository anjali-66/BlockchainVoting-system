{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\nimport { LinearEncoding, sRGBEncoding, Vector2 } from 'three';\nimport { $threeTexture } from './image.js';\nimport { Texture } from './texture.js';\nconst $texture = Symbol('texture');\nconst $transform = Symbol('transform');\nexport const $materials = Symbol('materials');\nexport const $usage = Symbol('usage');\n// Defines what a texture will be used for.\nexport var TextureUsage;\n(function (TextureUsage) {\n  TextureUsage[TextureUsage[\"Base\"] = 0] = \"Base\";\n  TextureUsage[TextureUsage[\"MetallicRoughness\"] = 1] = \"MetallicRoughness\";\n  TextureUsage[TextureUsage[\"Normal\"] = 2] = \"Normal\";\n  TextureUsage[TextureUsage[\"Occlusion\"] = 3] = \"Occlusion\";\n  TextureUsage[TextureUsage[\"Emissive\"] = 4] = \"Emissive\";\n})(TextureUsage || (TextureUsage = {}));\n/**\n * TextureInfo facade implementation for Three.js materials\n */\nexport class TextureInfo {\n  constructor(onUpdate, usage, threeTexture, material, gltf, gltfTextureInfo) {\n    this[_a] = null;\n    this[_b] = {\n      rotation: 0,\n      scale: new Vector2(1, 1),\n      offset: new Vector2(0, 0)\n    };\n    // Creates image, sampler, and texture if valid texture info is provided.\n    if (gltfTextureInfo && threeTexture) {\n      const gltfTexture = gltf.textures ? gltf.textures[gltfTextureInfo.index] : null;\n      const sampler = gltfTexture ? gltf.samplers ? gltf.samplers[gltfTexture.sampler] : null : null;\n      const image = gltfTexture ? gltf.images ? gltf.images[gltfTexture.source] : null : null;\n      this[$transform].rotation = threeTexture.rotation;\n      this[$transform].scale.copy(threeTexture.repeat);\n      this[$transform].offset.copy(threeTexture.offset);\n      this[$texture] = new Texture(onUpdate, threeTexture, gltfTexture, sampler, image);\n    }\n    this.onUpdate = onUpdate;\n    this[$materials] = material;\n    this[$usage] = usage;\n  }\n  get texture() {\n    return this[$texture];\n  }\n  setTexture(texture) {\n    const threeTexture = texture != null ? texture.source[$threeTexture] : null;\n    let encoding = sRGBEncoding;\n    this[$texture] = texture;\n    if (this[$materials]) {\n      for (const material of this[$materials]) {\n        switch (this[$usage]) {\n          case TextureUsage.Base:\n            material.map = threeTexture;\n            break;\n          case TextureUsage.MetallicRoughness:\n            encoding = LinearEncoding;\n            material.metalnessMap = threeTexture;\n            material.roughnessMap = threeTexture;\n            break;\n          case TextureUsage.Normal:\n            encoding = LinearEncoding;\n            material.normalMap = threeTexture;\n            break;\n          case TextureUsage.Occlusion:\n            encoding = LinearEncoding;\n            material.aoMap = threeTexture;\n            break;\n          case TextureUsage.Emissive:\n            material.emissiveMap = threeTexture;\n            break;\n          default:\n        }\n        material.needsUpdate = true;\n      }\n    }\n    if (threeTexture) {\n      // Updates the encoding for the texture, affects all references.\n      threeTexture.encoding = encoding;\n      threeTexture.rotation = this[$transform].rotation;\n      threeTexture.repeat = this[$transform].scale;\n      threeTexture.offset = this[$transform].offset;\n    }\n    this.onUpdate();\n  }\n}\n_a = $texture, _b = $transform;\n//# sourceMappingURL=texture-info.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}