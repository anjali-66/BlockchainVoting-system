{"ast":null,"code":"import { useQuery } from \"@tanstack/react-query\";\nimport { getBuyWithFiatQuote } from \"../../../../pay/buyWithFiat/getQuote.js\";\n/**\n * Hook to get a price quote for performing a \"Buy with Fiat\" transaction that allows users to buy a token with fiat currency.\n *\n * The price quote is an object of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote).\n * This quote contains the information about the purchase such as token amounts, processing fees, estimated time etc.\n *\n * This hook is a React Query wrapper of the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n * You can also use that function directly\n *\n * Once you have the `quote`, you can open a new window with `quote.onRampLink` to allow the user to buy the token with fiat currency.\n * and [`useBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/useBuyWithFiatStatus) function to start polling for the status of this transaction.\n *\n * @param params - object of type [`GetBuyWithFiatQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithFiatQuoteParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote)\n * @example\n * ```ts\n * import { NATIVE_TOKEN_ADDRESS } from \"thirdweb\";\n * import { base } from \"thirdweb/chains\";\n * import { useBuyWithFiatQuote } from \"thirdweb/react\";\n *\n * // get a quote for buying 0.01 base native token with USD fiat currency\n * function Example() {\n *   const quote = useBuyWithFiatQuote({\n *     client: client, // thirdweb client\n *     fromCurrencySymbol: \"USD\", // fiat currency symbol\n *     toChainId: base.id, // base chain id\n *     toAmount: \"0.01\", // amount of token to buy\n *     toTokenAddress: NATIVE_TOKEN_ADDRESS, // native token\n *     toAddress: \"0x...\", // user's wallet address\n *   });\n *\n *   return (\n *     <div>\n *       {quote.data && (\n *         <a href={quote.data.onRampLink} target=\"_blank\">\n *           open onramp provider\n *         </a>\n *       )}\n *     </div>\n *   );\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyWithFiatQuote(params, queryOptions) {\n  return useQuery({\n    ...queryOptions,\n    queryKey: [\"useBuyWithFiatQuote\", params],\n    queryFn: async () => {\n      if (!params) {\n        throw new Error(\"No params provided\");\n      }\n      return getBuyWithFiatQuote(params);\n    },\n    enabled: !!params,\n    retry(failureCount, error) {\n      if (failureCount > 3) {\n        return false;\n      }\n      try {\n        // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n        const serverError = error.error;\n        if (serverError.code === \"MINIMUM_PURCHASE_AMOUNT\") {\n          return false;\n        }\n        if (serverError.statusCode === 404 || serverError.statusCode >= 500) {\n          return false;\n        }\n      } catch {\n        return true;\n      }\n      return true;\n    }\n  });\n}\n//# sourceMappingURL=useBuyWithFiatQuote.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}