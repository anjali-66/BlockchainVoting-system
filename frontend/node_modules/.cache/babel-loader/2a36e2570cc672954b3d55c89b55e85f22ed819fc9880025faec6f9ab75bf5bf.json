{"ast":null,"code":"// TODO: error should not depend on walletlink. revisit this.\nimport { VERSION } from '../../sdk-info.js';\nimport { isErrorResponse } from '../../sign/walletlink/relay/type/Web3Response.js';\nimport { standardErrorCodes } from './constants.js';\nimport { serialize } from './utils.js';\n/**\n * Serializes an error to a format that is compatible with the Ethereum JSON RPC error format.\n * See https://docs.cloud.coinbase.com/wallet-sdk/docs/errors\n * for more information.\n */\nexport function serializeError(error) {\n  const serialized = serialize(getErrorObject(error), {\n    shouldIncludeStack: true\n  });\n  const docUrl = new URL('https://docs.cloud.coinbase.com/wallet-sdk/docs/errors');\n  docUrl.searchParams.set('version', VERSION);\n  docUrl.searchParams.set('code', serialized.code.toString());\n  docUrl.searchParams.set('message', serialized.message);\n  return Object.assign(Object.assign({}, serialized), {\n    docUrl: docUrl.href\n  });\n}\n/**\n * Converts an error to a serializable object.\n */\nfunction getErrorObject(error) {\n  var _a;\n  if (typeof error === 'string') {\n    return {\n      message: error,\n      code: standardErrorCodes.rpc.internal\n    };\n  } else if (isErrorResponse(error)) {\n    const message = error.errorMessage;\n    const code = (_a = error.errorCode) !== null && _a !== void 0 ? _a : message.match(/(denied|rejected)/i) ? standardErrorCodes.provider.userRejectedRequest : undefined;\n    return Object.assign(Object.assign({}, error), {\n      message,\n      code,\n      data: {\n        method: error.method\n      }\n    });\n  }\n  return error;\n}\n//# sourceMappingURL=serialize.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}