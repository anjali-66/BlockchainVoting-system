{"ast":null,"code":"import { ScopedLocalStorage } from '../../core/storage/ScopedLocalStorage.js';\nimport { deriveSharedSecret, exportKeyToHexString, generateKeyPair, importKeyFromHexString } from '../../util/cipher.js';\nconst OWN_PRIVATE_KEY = {\n  storageKey: 'ownPrivateKey',\n  keyType: 'private'\n};\nconst OWN_PUBLIC_KEY = {\n  storageKey: 'ownPublicKey',\n  keyType: 'public'\n};\nconst PEER_PUBLIC_KEY = {\n  storageKey: 'peerPublicKey',\n  keyType: 'public'\n};\nexport class SCWKeyManager {\n  constructor() {\n    this.storage = new ScopedLocalStorage('CBWSDK', 'SCWKeyManager');\n    this.ownPrivateKey = null;\n    this.ownPublicKey = null;\n    this.peerPublicKey = null;\n    this.sharedSecret = null;\n  }\n  async getOwnPublicKey() {\n    await this.loadKeysIfNeeded();\n    return this.ownPublicKey;\n  }\n  // returns null if the shared secret is not yet derived\n  async getSharedSecret() {\n    await this.loadKeysIfNeeded();\n    return this.sharedSecret;\n  }\n  async setPeerPublicKey(key) {\n    this.sharedSecret = null;\n    this.peerPublicKey = key;\n    await this.storeKey(PEER_PUBLIC_KEY, key);\n    await this.loadKeysIfNeeded();\n  }\n  async clear() {\n    this.ownPrivateKey = null;\n    this.ownPublicKey = null;\n    this.peerPublicKey = null;\n    this.sharedSecret = null;\n    this.storage.removeItem(OWN_PUBLIC_KEY.storageKey);\n    this.storage.removeItem(OWN_PRIVATE_KEY.storageKey);\n    this.storage.removeItem(PEER_PUBLIC_KEY.storageKey);\n  }\n  async generateKeyPair() {\n    const newKeyPair = await generateKeyPair();\n    this.ownPrivateKey = newKeyPair.privateKey;\n    this.ownPublicKey = newKeyPair.publicKey;\n    await this.storeKey(OWN_PRIVATE_KEY, newKeyPair.privateKey);\n    await this.storeKey(OWN_PUBLIC_KEY, newKeyPair.publicKey);\n  }\n  async loadKeysIfNeeded() {\n    if (this.ownPrivateKey === null) {\n      this.ownPrivateKey = await this.loadKey(OWN_PRIVATE_KEY);\n    }\n    if (this.ownPublicKey === null) {\n      this.ownPublicKey = await this.loadKey(OWN_PUBLIC_KEY);\n    }\n    if (this.ownPrivateKey === null || this.ownPublicKey === null) {\n      await this.generateKeyPair();\n    }\n    if (this.peerPublicKey === null) {\n      this.peerPublicKey = await this.loadKey(PEER_PUBLIC_KEY);\n    }\n    if (this.sharedSecret === null) {\n      if (this.ownPrivateKey === null || this.peerPublicKey === null) return;\n      this.sharedSecret = await deriveSharedSecret(this.ownPrivateKey, this.peerPublicKey);\n    }\n  }\n  // storage methods\n  async loadKey(item) {\n    const key = this.storage.getItem(item.storageKey);\n    if (!key) return null;\n    return importKeyFromHexString(item.keyType, key);\n  }\n  async storeKey(item, key) {\n    const hexString = await exportKeyToHexString(item.keyType, key);\n    this.storage.setItem(item.storageKey, hexString);\n  }\n}\n//# sourceMappingURL=SCWKeyManager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}