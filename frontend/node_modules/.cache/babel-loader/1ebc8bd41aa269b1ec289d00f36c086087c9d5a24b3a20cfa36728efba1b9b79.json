{"ast":null,"code":"\"use client\";\n\nimport { useCallback, useState } from \"react\";\nimport { useConnectionManagerCtx } from \"../../providers/connection-manager.js\";\nimport { useSetActiveWalletConnectionStatus } from \"./useSetActiveWalletConnectionStatus.js\";\n/**\n * A hook to set a wallet as active wallet\n * @returns A function that lets you connect a wallet.\n * @example\n * ```jsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { useConnect } from \"thirdweb/react\";\n * import { createWallet } from \"thirdweb/wallets\";\n *\n * const client = createThirdwebClient({\n *   clientId: \"YOUR_CLIENT_ID\",\n * });\n *\n * function Example() {\n *   const { connect, isConnecting, error } = useConnect();\n *   return (\n *     <button\n *       onClick={() =>\n *         connect(async () => {\n *           // instantiate wallet\n *           const wallet = createWallet(\"io.metamask\");\n *           // connect wallet\n *           await wallet.connect({\n *             client,\n *           });\n *           // return the wallet\n *           return wallet;\n *         })\n *       }\n *     >\n *       Connect\n *     </button>\n *   );\n * }\n * ```\n * @walletConnection\n */\nexport function useConnect(options) {\n  const manager = useConnectionManagerCtx(\"useConnect\");\n  const {\n    connect\n  } = manager;\n  const setConnectionStatus = useSetActiveWalletConnectionStatus();\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const handleConnection = useCallback(async walletOrFn => {\n    // reset error state\n    setError(null);\n    setConnectionStatus(\"connecting\");\n    if (typeof walletOrFn !== \"function\") {\n      const account = await connect(walletOrFn, options);\n      setConnectionStatus(\"connected\");\n      return account;\n    }\n    setIsConnecting(true);\n    try {\n      const w = await walletOrFn();\n      const account = await connect(w, options);\n      setConnectionStatus(\"connected\");\n      return account;\n    } catch (e) {\n      console.error(e);\n      setError(e);\n      setConnectionStatus(\"disconnected\");\n    } finally {\n      setIsConnecting(false);\n    }\n    return null;\n  }, [connect, options, setConnectionStatus]);\n  return {\n    connect: handleConnection,\n    isConnecting,\n    error\n  };\n}\n//# sourceMappingURL=useConnect.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}