{"ast":null,"code":"import { client, parsers } from \"@passwordless-id/webauthn\";\nimport { webLocalStorage } from \"../../../../../utils/storage/webStorage.js\";\nimport { base64ToString, base64UrlToBase64 } from \"../../../../../utils/uint8-array.js\";\nimport { ClientScopedStorage } from \"../../../core/authentication/client-scoped-storage.js\";\nexport class PasskeyWebClient {\n  isAvailable() {\n    return client.isAvailable();\n  }\n  async register(args) {\n    const {\n      name,\n      challenge,\n      rp\n    } = args;\n    const registration = await client.register({\n      user: name,\n      challenge,\n      userVerification: \"required\",\n      domain: rp.id,\n      attestation: true\n    });\n    const clientDataB64 = base64UrlToBase64(registration.response.clientDataJSON);\n    const clientDataParsed = JSON.parse(base64ToString(clientDataB64));\n    return {\n      authenticatorData: registration.response.authenticatorData,\n      credentialId: registration.id,\n      clientData: registration.response.clientDataJSON,\n      credential: {\n        publicKey: registration.response.publicKey,\n        algorithm: parsers.getAlgoName(registration.response.publicKeyAlgorithm)\n      },\n      origin: clientDataParsed.origin\n    };\n  }\n  async authenticate(args) {\n    const {\n      credentialId,\n      challenge,\n      rp\n    } = args;\n    const result = await client.authenticate({\n      allowCredentials: credentialId ? [credentialId] : [],\n      challenge,\n      userVerification: \"required\",\n      domain: rp.id\n    });\n    const clientDataB64 = base64UrlToBase64(result.response.clientDataJSON);\n    const clientDataParsed = JSON.parse(base64ToString(clientDataB64));\n    return {\n      authenticatorData: result.response.authenticatorData,\n      credentialId: result.id,\n      clientData: result.response.clientDataJSON,\n      signature: result.response.signature,\n      origin: clientDataParsed.origin\n    };\n  }\n}\n/**\n * Returns whether this device has a stored passkey ready to be used for sign-in\n * @param client - the thirdweb client\n * @returns whether the device has a stored passkey\n * @walletUtils\n */\nexport async function hasStoredPasskey(client, ecosystemId) {\n  const storage = new ClientScopedStorage({\n    storage: webLocalStorage,\n    // TODO (passkey) react native variant of this fn\n    clientId: client.clientId,\n    ecosystem: ecosystemId ? {\n      id: ecosystemId\n    } : undefined\n  });\n  const credId = await storage.getPasskeyCredentialId();\n  return !!credId;\n}\n//# sourceMappingURL=passkeys.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}