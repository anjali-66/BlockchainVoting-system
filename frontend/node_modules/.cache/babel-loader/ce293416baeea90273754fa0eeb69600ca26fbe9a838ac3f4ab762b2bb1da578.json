{"ast":null,"code":"\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useSetSelectionData } from \"../../providers/wallet-ui-states-provider.js\";\nimport { useScreenContext } from \"../../ui/ConnectWallet/Modal/screen.js\";\nimport { WalletEntryButton } from \"../../ui/ConnectWallet/WalletEntryButton.js\";\nimport { reservedScreens } from \"../../ui/ConnectWallet/constants.js\";\nimport { ConnectWalletSocialOptions } from \"../shared/ConnectWalletSocialOptions.js\";\nimport { LoadingScreen } from \"../shared/LoadingScreen.js\";\nimport { useInAppWalletLocale } from \"./useInAppWalletLocale.js\";\n/**\n *\n * @internal\n */\nfunction InAppWalletSelectionUI(props) {\n  const {\n    screen\n  } = useScreenContext();\n  const setData = useSetSelectionData();\n  const locale = useInAppWalletLocale(props.connectLocale.id);\n  // do not show the \"selectUI\" if\n  // modal is compact or\n  // it is being rendered in Safe wallet\n  if (props.size === \"wide\" || screen !== reservedScreens.main && props.size === \"compact\") {\n    return _jsx(WalletEntryButton, {\n      walletId: props.wallet.id,\n      selectWallet: () => {\n        setData({});\n        props.select();\n      },\n      client: props.client,\n      connectLocale: props.connectLocale,\n      recommendedWallets: props.recommendedWallets,\n      isActive: screen === props.wallet,\n      badge: undefined\n    });\n  }\n  if (!locale) {\n    return _jsx(LoadingScreen, {\n      height: \"195px\"\n    });\n  }\n  return _jsx(ConnectWalletSocialOptions, {\n    disabled: props.disabled,\n    locale: locale,\n    wallet: props.wallet,\n    done: props.done,\n    select: props.select,\n    goBack: props.goBack,\n    chain: props.chain,\n    client: props.client,\n    size: props.size\n  });\n}\nexport default InAppWalletSelectionUI;\n//# sourceMappingURL=InAppWalletSelectionUI.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}