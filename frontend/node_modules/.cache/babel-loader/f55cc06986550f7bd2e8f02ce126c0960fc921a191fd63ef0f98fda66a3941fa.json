{"ast":null,"code":"import { SignClient } from \"@walletconnect/sign-client\";\nimport { getDefaultAppMetadata } from \"../../utils/defaultDappMetadata.js\";\nimport { DEFAULT_PROJECT_ID } from \"../constants.js\";\nimport { handleSendRawTransactionRequest } from \"./request-handlers/send-raw-transaction.js\";\nimport { handleSendTransactionRequest } from \"./request-handlers/send-transaction.js\";\nimport { handleSignTransactionRequest } from \"./request-handlers/sign-transaction.js\";\nimport { handleSignTypedDataRequest } from \"./request-handlers/sign-typed-data.js\";\nimport { handleSignRequest } from \"./request-handlers/sign.js\";\nimport { handleSwitchChain } from \"./request-handlers/switch-chain.js\";\nimport { getSessions, initializeSessionStore, removeSession } from \"./session-store.js\";\nlet walletConnectClientCache = new WeakMap();\n/*\n * @internal\n */\nexport const clearWalletConnectClientCache = () => {\n  walletConnectClientCache = new WeakMap();\n};\n/**\n * Default request handlers for WalletConnect requests.\n */\nexport const DefaultWalletConnectRequestHandlers = {\n  personal_sign: handleSignRequest,\n  eth_sign: handleSignRequest,\n  eth_signTypedData: handleSignTypedDataRequest,\n  eth_signTypedData_v4: handleSignTypedDataRequest,\n  eth_signTransaction: handleSignTransactionRequest,\n  eth_sendTransaction: handleSendTransactionRequest,\n  eth_sendRawTransaction: handleSendRawTransactionRequest,\n  wallet_addEthereumChain: _ => {\n    throw new Error(\"Unsupported request method: wallet_addEthereumChain\");\n  },\n  wallet_switchEthereumChain: handleSwitchChain\n};\n/**\n * Creates a new WalletConnect client for interacting with another application.\n * @param options - The options to use to create the WalletConnect client.\n *\n * @returns The WalletConnect client. Use this client to connect to a WalletConnect URI with {@link createWalletConnectSession}.\n * @example\n * ```ts\n * import { createWalletConnectClient } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n * });\n * ```\n * Pass custom handlers:\n * ```ts\n * import { createWalletConnectClient } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n *   requestHandlers: {\n *     eth_signTransaction: ({ account, chainId, params }) => {\n *       // handle transaction signing\n *     },\n *   },\n * });\n * ```\n * Pass connect and disconnect callbacks:\n * ```ts\n * import { createWalletConnectClient } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n *   onConnect: (session) => {\n *     console.log(\"Connected to WalletConnect\", session);\n *   },\n *   onDisconnect: (session) => {\n *     console.log(\"Disconnected from WalletConnect\", session);\n *   },\n * });\n * ```\n * @wallet\n */\nexport async function createWalletConnectClient(options) {\n  const {\n    wallet,\n    requestHandlers,\n    onConnect,\n    onDisconnect,\n    client: thirdwebClient\n  } = options;\n  const chains = (() => {\n    if (options.chains && options.chains.length > 10) {\n      console.warn(\"WalletConnect: Can specify no more than 10 chains, truncating to the first 10 provided chains...\");\n      return options.chains.slice(0, 10);\n    }\n    return options.chains;\n  })();\n  if (walletConnectClientCache.has(thirdwebClient)) {\n    return walletConnectClientCache.get(thirdwebClient);\n  }\n  initializeSessionStore({\n    clientId: options.client.clientId\n  });\n  const defaults = getDefaultAppMetadata();\n  const walletConnectClient = await SignClient.init({\n    projectId: options.projectId ?? DEFAULT_PROJECT_ID,\n    metadata: {\n      name: options.appMetadata?.name ?? defaults.name,\n      url: options.appMetadata?.url ?? defaults.url,\n      description: options.appMetadata?.description ?? defaults.description,\n      icons: [options.appMetadata?.logoUrl ?? defaults.logoUrl]\n    }\n  });\n  walletConnectClient.on(\"session_proposal\", async event => {\n    const {\n      onSessionProposal\n    } = await import(\"./session-proposal.js\");\n    await onSessionProposal({\n      wallet,\n      walletConnectClient,\n      event,\n      chains,\n      onConnect\n    }).catch(error => {\n      if (options.onError) {\n        options.onError(error);\n      } else {\n        throw error;\n      }\n    });\n  });\n  walletConnectClient.on(\"session_request\", async event => {\n    const {\n      fulfillRequest\n    } = await import(\"./session-request.js\");\n    await fulfillRequest({\n      wallet,\n      walletConnectClient,\n      event,\n      handlers: requestHandlers,\n      thirdwebClient\n    }).catch(error => {\n      if (options.onError) {\n        options.onError(error);\n      } else {\n        throw error;\n      }\n    });\n  });\n  walletConnectClient.on(\"session_event\", async _event => {\n    // TODO (accountsChanged, chainChanged)\n  });\n  walletConnectClient.on(\"session_ping\", _event => {\n    // TODO\n  });\n  walletConnectClient.on(\"session_delete\", async event => {\n    await disconnectWalletConnectSession({\n      session: {\n        topic: event.topic\n      },\n      walletConnectClient\n    }).catch(error => {\n      if (options.onError) {\n        options.onError(error);\n      } else {\n        throw error;\n      }\n    });\n  });\n  // Disconnects can come from the user or the connected app, so we inject the callback to ensure its always triggered\n  const _disconnect = walletConnectClient.disconnect;\n  walletConnectClient.disconnect = async args => {\n    const result = await _disconnect(args).catch(() => {\n      // no-op if already disconnected\n    });\n    if (onDisconnect) {\n      disconnectHook({\n        topic: args.topic,\n        onDisconnect\n      });\n    }\n    return result;\n  };\n  walletConnectClientCache.set(options.client, walletConnectClient);\n  return walletConnectClient;\n}\n/**\n * Initiates a new WalletConnect session for interacting with another application.\n * @param options - The options to use to create the WalletConnect session.\n * @example\n * ```ts\n * import { createWalletConnectClient, createWalletConnectSession } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n * });\n *\n * const session = createWalletConnectSession({\n *   walletConnectClient: client,\n *   uri: \"wc:...\",\n * });\n * ```\n * @wallet\n */\nexport function createWalletConnectSession(options) {\n  const {\n    uri,\n    walletConnectClient\n  } = options;\n  walletConnectClient.core.pairing.pair({\n    uri\n  });\n}\n/**\n * Retrieves all active WalletConnect sessions.\n * @returns All active WalletConnect sessions.\n * @example\n * ```ts\n * import { getActiveWalletConnectSessions } from \"thirdweb/wallets\";\n *\n * const sessions = await getActiveWalletConnectSessions();\n * ```\n * @wallet\n */\nexport async function getActiveWalletConnectSessions() {\n  return getSessions();\n}\n/**\n * Disconnects a WalletConnect session.\n * @param options - The options to use to disconnect the WalletConnect session.\n * @example\n * ```ts\n * import { disconnectWalletConnectSession } from \"thirdweb/wallets\";\n *\n * await disconnectWalletConnectSession({\n *   session: mySession,\n *   walletConnectClient: wcClient,\n * });\n * ```\n * @wallet\n */\nexport async function disconnectWalletConnectSession(options) {\n  removeSession(options.session);\n  try {\n    await options.walletConnectClient.disconnect({\n      topic: options.session.topic,\n      reason: {\n        code: 6000,\n        message: \"Disconnected\"\n      }\n    });\n  } catch {\n    // ignore, the session doesn't exist already\n  }\n}\n/**\n * @internal\n */\nasync function disconnectHook(options) {\n  const {\n    topic,\n    onDisconnect\n  } = options;\n  const sessions = await getSessions();\n  onDisconnect(sessions.find(s => s.topic === topic) ?? {\n    topic\n  });\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}