{"ast":null,"code":"import { useQuery } from \"@tanstack/react-query\";\nimport { getFunctionId } from \"../../../utils/function-id.js\";\nimport { stringify } from \"../../../utils/json.js\";\nconst CONTRACT_QUERY_CACHE = new WeakMap();\n/**\n * Creates a `useQuery` hook for a contract call.\n * @param readCall - A function that performs the contract function call and returns the result.\n * @returns An object containing the created `useRead` hook.\n * @example\n * ```jsx\n * import { createContractQuery } from \"thirdweb/react\";\n * import { totalSupply } from \"thirdweb/extensions/erc20\";\n * const useTotalSupply = createContractQuery(totalSupply);\n * const { data, isLoading } = useTotalSupply({contract})\n * ```\n * @transaction\n */\nexport function createContractQuery(readCall) {\n  if (CONTRACT_QUERY_CACHE.has(readCall)) {\n    return CONTRACT_QUERY_CACHE.get(readCall);\n  }\n  function useRead(options) {\n    const {\n      contract,\n      queryOptions,\n      ...params\n    } = options;\n    return useQuery({\n      queryKey: [\"readContract\", contract.chain.id, contract.address, getFunctionId(readCall), stringify(params)],\n      queryFn: () => readCall(options),\n      ...queryOptions\n    });\n  }\n  CONTRACT_QUERY_CACHE.set(readCall, useRead);\n  return useRead;\n}\n//# sourceMappingURL=createQuery.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}